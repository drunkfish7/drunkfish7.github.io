[{"title":"DIY 超酷的像素钟","url":"/awtrix/","content":"\n![awtrix](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/awtrix.jpg)\n\n小弟以前听说过 [LaMetric TIME](https://lametric.com/)，觉得很酷，像桌面版的 Apple Watch，可以显示一些固定信息（如时间、天气等等），还可以显示通知，过滤信息。但是囊中羞涩，只能远观。直到发现这位大大的[视频](https://www.youtube.com/playlist?list=PLmxTR4AYd_9T3Lw7PR9u_UrtplM1Dqp77)，详细记录了替代品的完整制作过程，小弟根据步骤也做了一个，期间踩了一些坑，以下是过程：\n\n## 购买配件\n\n像素钟的名字是 [Awtrix](https://blueforcer.de/awtrix-2-0/)，在[测试版文档](https://awtrix.github.io/AWTRIX2.0-Docs_Beta/#/en-en/hardware)（目前仅德语）及[旧版文档](https://docs.blueforcer.de/#/v2/)中可以找到需要的电路元件，主要有以下：\n\n基本元件：\n- Wemos D1 mini（也可以用 NodeMCU 等 Esp8266 模块，免焊接）\n- 8x32 WS2812B 全彩软像素屏\n- 杜邦线若干（建议公对母、公对公、母对母都备一些，方便延长线）\n- MicroUSB 数据线\n\n可选配件：\n- DC 直流电源插头\n- 5v 4A电源\n- 1000uF 10V 电容\n- LDR GL5528 光敏电阻\n- 1000Ω 电阻\n- APDS-9960 手势模块\n- MicroSD 卡模块\n\n（以上元件都可以在淘宝买到，若选择 Wemos D1 mini，可能还需要一个电烙铁进行焊接）\n\n其他配件：\n1.3D 打印光栅\n默认像素灯是圆形，加入光栅可以将圆形变成方形，显示效果更好，建议打印。打印文件可以在 [Thingiverse](https://www.thingiverse.com/thing:2791276) 下载，小弟是在[魔猴网](http://www.mohou.com/)打印的，加运费大概 60-70 元。\n\n2.外壳（可选）\n可选外壳，非必选，打印成本较高，另外作者推出了 Awtrix Pro，外壳和之前的不一样。\n\n3.亚克力蒙版\n可以增强显示效果，淘宝搜索「亚克力定制」即可，颜色选「黑茶色」，尺寸可以选 95×340×2mm。\n\n4.A3 纸\n起到增强显示效果的作用，A4 纸不够长。\n\n## 服务器端\nAwtrix 分服务器端与控制端，其中服务器端小弟选择用群晖 Docker 运行，也可以用树莓派（新的外壳可以直接放入树莓派），甚至是 Android 手机。\n\n下面是 Docker 的步骤，在注册表中搜索「whyet」，下载映像。映像下载好运行映像，小弟没搞清楚配置文件的路径，所以没有设置，另外 Awtrix 会占用 7000 端口号，可以根据自己实际情况调整。\n\n![docker_awtrix](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/docker_awtrix.png)\n\n容器运行后，可以在日志后终端中看到安装情况，待 jar 文件下载完成，在浏览器中打开 http(s)://群晖 ip:7000，就可以进入 Awtrix 服务器端，因为还没有控制端，所以会有未连接的提示。\n\n![awtrix_manager](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/awtrix_manager.png)\n\n另外，服务端适配了移动端，可以手机端进行控制。由于是运行在群晖中，依旧可以通过配置端口映射实现外网访问。\n\n## 控制端\n### 刷入固件\n1.控制端刷入固件非常容易，首先要下载相应模块的驱动，若是 D1 mini，请前往[这里](https://wiki.wemos.cc/downloads)下载，若是 NodeMCU 请前往[这里](https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers) 下载。\n\n2.下载安装 [NodeMCU PyFlasher](https://github.com/marcelstoer/nodemcu-pyflasher/releases) 及控制端[固件](https://blueforcer.de/awtrix/beta/firmware.bin)，将模块用 MicroUSB 数据线连接至电脑 USB 口，选择好端口及固件路径，点击[刷入]。\n\n![awtrix_flash](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/awtrix_flash.png)\n\n刷入成功可以看到 Awtrix 的 AP，连入这个 WiFi（密码是 awtrixxx），之后填入 WiFi 信息（名称、密码）及服务端 IP （即群晖 IP）即可（无需端口号）。\n\n### 连接电路元件及组装\n\n1.连接按照官方的[电路图](https://awtrix.github.io/AWTRIX2.0-Docs_Beta/#/en-en/hardware?id=basis-variante)连接即可，连接成功默认显示「时间」 App。\n\n注意：正负极不要接反。\n\n2.显示部分按照亚克力板、纸（裁成亚克力板大小）、光栅、像素灯从外到底的顺序，用双面胶粘住。若打印了外壳，可以将元件套入外壳中。\n\n3.连接好后，按几次 D1 mini 的[reset]键，待屏幕出现图像启动即可。\n\n![awtrix_display](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/awtrix_display.png)\n\n### App 推荐\nAwtrix 支持多个 App，以下是几个 App 介绍：\n\nTime：默认自带，可以在设置中调整时区，可以选择日期、时间 12/24 制、是否显示星期指示格式。\n\nOpenWeather：需到 [OpenWeather](https://home.openweathermap.org/) 注册填入 APIKey。填入之后位置 ID，可以在[这里](https://openweathermap.org/city)。 \n\nAnimations：可以显示随机动画，很有趣，无需配置。\n\nMoon：可以显示当日月相，无需配置。\n\nPM：可以显示地区 PM2.5 值，需要填入位置监测点位置 ID。\n\nMatrix：显示矩阵动画。\n\nSpotify：登录 Spotify 账号即可，每次切换歌曲可以显示歌名（目前仅支持英文）。\n\n## 存在问题\n\n小弟使用过程中，像素灯感觉黯淡，使用了 5V 4A 的电源依然如此，了解到可以在显示屏另接一个 5V 电源，还没有尝试。\n\n## 延伸\n\n若是像素钟只显示内置的信息还是不够酷，AWtrix 支持 MQTT 和 REST API，这样就可以与其他设备联动了，后续小弟会再写一篇专述与像素钟其他设备的联动。","tags":["awtrxi,docker"]},{"title":"群晖搭建静态个人博客","url":"/docker-hexo/","content":"\n<meta name=\"referrer\" content=\"no-referrer\" />\n\n[Hexo](https://hexo.io/) 是 [tommy351](https://zespia.tw/) 开发的静态网页生成工具，基于 node.js、支持 Markdown，可托管至 [Github Page](https://pages.github.com/)。\n\n群晖外网访问及备份非常方便，小弟尝试用群晖搭建 Hexo，将生成的静态页面部署至 Github Pages，折腾如下：\n\n## GitHub 创建 Github Pages\n\n登录 [Github](https://github.com/) ，在任意页面右上角点击「＋」，选择「新建仓库」。\n\n![github_new](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/github_new.png)\n\n之后填入名称，包括 Github 用户名及后缀 .github.io，等待建好仓库。\n\n![github_repo](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/github_repo.png)\n\n浏览器访问地址 https://<username>.github.io 就可以看到新建的网页。此时已经建好了一个博客，这个博客基于 [Jekyll](https://www.jekyll.com.cn/) ，我们要搭建 Hexo 还要继续。\n\n注意：个人主页前缀要和 GitHub 用户名一致，只能有一个，若要建立多个，可建立项目主页，具体参见[官方文档](https://help.github.com/en/github/working-with-github-pages/about-github-pages)。\n\n## 安装 Hexo\n\n### Docker 安装 Hexo\n\n打开群晖 Docker（未安装可在「套件中心」搜索 docker 下载安装）， 在注册表中搜索「spurin」，找到映像 「spurin/hexo」并下载。这个 Docker 已经集成 [Hexo Admin Plugin](https://github.com/jaredly/hexo-admin)（一个 Hexo 文章后台管理插件）和连接 Github Pages 服务，可以方便我们快速搭建 Hexo 。\n\n![docker_hexo_reg](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/docker_hexo_reg.png)\n\n待下载完成后点击[启动]，选择[高级设置]，在「高级设置」中可以选择是否自动启动、是否建立桌面快捷方式（随个人偏好）。同时在「卷」在路径中添加文件夹，此文件夹为放置 Hexo 文件的文件夹，路径为 /app 。在「网络」中可以选「与宿主使用相同网络」，也可以到「端口设置」中自定义端口号。Hexo 会使用 4000 端口号。\n\n![docker_hexo_dir](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/docker_hexo_dir.png)\n\n在「环境」中可以填入自己的 Github 用户名及邮箱，以便生成有效的 SSH Key。\n\n![docker_hexo_env](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/docker_hexo_env.png)\n\n等待容器运行，打开容器详情，待安装完成，出现安装完成提示后，在浏览器中打开 http(s)://群晖 ip:4000，可以看到 Hexo 生成的网站。 访问http(s)://群晖 ip:4000/admin，可以看到文章后台管理页面。\n\n![hexo_admin](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/hexo_admin.png)\n\n### 连接 Github Pages\n\n安装完成在日志或终端机中复制生成的 SSH Key（或查看 .ssh 路径下的 id_rsa.pub 这个文件）。之后打开 Github，打开个人设置，找到「SSH and GPG keys」，新建一个密钥，将密钥粘贴。\n\n![github_key](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/github_key.png)\n\n在容器终端中输入 `ssh -T git@github.com`，若可以看到自己的 Github 用户名，证明连接成功。\n\n![key_test](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/key_test.png)\n\n### 配置 Hexo Admin 插件\nHexo Admin 这个插件已经年久失修，最近一次更新是几年前了，小弟使用时踩了不少坑，下面只示范正确的步骤：\n\n1. 安装 hexo-deployer-git 插件，在容器终端输入命令 `npm install hexo-deployer-git --save`\n2. 在自定义的 Hexo 路径下新建脚本文件 hexo-deploy.sh，内容如下：\n\n``` bash\nhexo g\nhexo d\n```\n3. 配置文件 _config.yml 下添加以下：\n\n``` yml\ndeploy:\n  type: git\n  repo: git@github.com:<username>/d<username>.github.io.git\n  branch: master\n\nadmin:\n  deployCommand: './hexo-deploy.sh'\n```\n\n点击[deploy]可以生成页面并部署至 Github Pages，若未报错说明插件配置成功，打开 https://<username>.github.io 可以看到 Hexo 生成的页面。\n\n注意：注意 yml 文件格式规范，名称后面有空格。\n\n4. 设置密码\n\n插件支持设置密码，相应页面设置密码即可。\n\n5. 设置外网访问\n\n为了可以随时随地发布博客，需要设置暴露 4000 端口便于外网访问。家用群晖外网访问简单的办法有：1、公网 IP + 路由器映射端口；2、利用群晖自带 DDNS。\n\n## 绑定域名\n\n### 购买域名\n购买域名可以去 [domcomp](https://www.domcomp.com) 先比较下价格，另外也可以到 [Google Domains](https://domains.google) 购买。\n\n### 域名商设置\n\n不同域名商设置不完全相同，小弟是从 [gandi.net](https://www.gandi.net) 买的，新增一条 ALIAS 的 DNS 记录即可。\n\n![domain_alias](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/domain_alias.png)\n\n### Github Pages 设定\nGithub Pages 设定很简单，在仓库设置中直接填入域名即可，另外建议勾选「强制 https」，这样访问域名就可以看到安心的绿色小锁。\n\n![page_domain](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/page_domain.png)\n\n设置完成之后可能要过几分钟才能可以使 DNS 生效，另外可以使用命令 dig <your domain> +nostats +nocomments +nocmd 验证是否绑定成功。\n\n遇到问题可以咨询域名服务商和查阅 Github Pages 域名相关[官方文档](https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site)\n\n## 配置相关\n\nHexo 的设置可以在 _config.yml 这个文件下修改，下面贴一下主要的配置项：\n\n### 配置主题\n\n小弟发现 [casper](https://github.com/xzhih/hexo-theme-casper) 主题不错，安装配置可移步[作者](https://zhih.me/hexo-casper-usage/)博客。\n\n几个注意的点：\n\n1. 注册 leancloud 可以用[国际版](https://console.leancloud.app/login.html#/signin)地址注册。免实名认证（需提供国内手机号）\n2. 在 Google Analysis 设置中点击[新增账户]可以新增一个账户，找到追踪 ID 填入即可。\n\n### 增加 RSS 支持\n\n增加 RSS 支持需要安装 [hexo-generator-feed](https://github.com/hexojs/hexo-generator-feed) 插件。\n\n首先在容器终端中输入命令`npm install hexo-generator-feed`\n\n之后在 Hexo 配置文件 _config.yml 文件中增加以下配置即可：\n\n```yml\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n  hub:\n  content:\n  content_limit: 140\n  content_limit_delim: ' '\n  order_by: -date\n  icon: icon.png\n  autodiscovery: true\n  template:\n```\n\n### 文章命名自定义\n\nHexo 默认文章链接以文章日期命名，想修改文章链接可以参考[官方文档](https://hexo.io/docs/permalinks.html)。\n\n## 撰写文章\n\n### 页面属性\n\nmd 文件会存放在 /source/posts 这个路径下，生成的页面在路径 /public，文章用 Markdown 书写，语法参考[这个](https://markdown.tw/)，每篇文章可以加入页面属性：\n\n```md\n---\ntitle:               # 文章标题\ndate:                # 文章日期\ntags:                # 文章标签\ncover_img:           # 在文章摘要上显示\nfeature_img:         # 在文章详细页面上置顶\n---\n```\n\n### 书写工具\n\n可以直接打开 http(s)://群晖 ip:4000 在线用 [Markdown](https://markdown.tw/) 撰写文章，支持实时保存、预览，另外可以使用任意支持 Markdown 的书写工具书写，如 [Typora](http://typora.io)（支持实时预览、实用小功能）。\n\n小弟推荐使用图床管理图片（这样做 md 文件可以免配置本地图片路径，且备份时只需要备份一个 md 文件就可以了），图床推荐放在 Github 仓库，稳定、够用（具体参见[容量限制](https://help.github.com/cn/github/managing-large-files/what-is-my-disk-quota) 可到100G），推荐使用图床工具上传，如 [uPic](https://blog.svend.cc/upic/)(支持拖拽上传、上传完成后自动复制文件链接等等)、[PicGo](https://github.com/Molunerfinn/PicGo) (多平台、支持[插件](https://github.com/PicGo/Awesome-PicGo))，建议勾选 [jsDelivr](https://www.jsdelivr.com/) 优化国内访问。\n\n另外，使用图床务若图片无法显示可以在文章页面属性下方插入以下代码：\n\n```html\n<meta name=\"referrer\" content=\"no-referrer\" />\n```\n\n发布文章有两种：\n1.本地写好 md 文件，上传至 /source/posts 路径下，之后在容器终端运行 hexo g && hexo d；\n2.通过访问 http(s)://群晖 ip:4000 ，在线写，写完点击[deploy]。\n\n书写小建议：\n1.文件命名建议英文命名，关键词之间用「-」隔开;\n2.Markdown 模块间用一空行隔开。\n\n至此我们的博客就搭建好了，是不是很酷。\n\n\n","tags":["hexo,synology,docker"]}]