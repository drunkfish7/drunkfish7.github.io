[{"title":"ChatGPT 的几个小工具","url":"/gpt/","content":"![gpt_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/gpt_cover.png)\n\n> 熟读唐诗三百首，不会吟诗也会吟。——蘅塘退士\n\n2022 年末，GPT 成为热门讨论词汇。在 GPT 出现之前，人类已经在生活很多方面使用 AI（artificial intelligence），比如辨识车牌、语音识别文字等等。大多数 AI 技术集中在辨识方面，鲜少有生成功能的 AI，或有生成功能但并不好用。\n\nGPT (Generative Pre-trained Transformer) 全称是生成型预训练变换模型，由 [OpenAI](https://openai.com/) 提出的自然语言处理技术，可以通过使用深度学习生成人类可以理解的自然语言。\n\nChatGPT 是 GPT 在聊天中的应用，从 22 年 11 月开放大众使用，不到两个月时间已经有一亿用户。ChatGPT 的厉害之处在于学习了大量文本，可以生成自然、流畅的文本回复。在我们的工作、学习、生活中，很大一部分是「生成」方面的工作，所以 ChatGPT 是工作、学习、生活的好帮手。\n\nOpenAI 有开放 API，可以在不同工具使用 GPT，以下是小弟整理的几个小工具（不断整理中）：\n\n## New Bing\n\n![gpt_bing](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/gpt_bing.png)\n\n作为 OpenAI 主要投资方，微软有 GPT 独家授权，自家的 New Bing 已经结合 GPT。New Bing 基于 GPT-4（ChatGPT 的 GPT-4 暂时仅限付费用户使用），且有最新数据（ChatGPT 数据学习到 2021 年）。\n\n使用很简单，电脑端使用 [Microsoft Edge 浏览器](https://www.microsoft.com/zh-tw/edge?form=MA13FJ) 到 https://www.bing.com/new 登录即可使用，手机端可以使用 Bing App。\n\n若想在 Chrome 上使用 New Bing，可以通过修改浏览器 UA（User Agent） 实现，实现在 Chrome 安装 [HeaderEditor](https://github.com/FirefoxBar/HeaderEditor) 插件，添加规则 \n\nMatch Rule：\n`^http(s?)://(.*).bing\\.com/(.*)`\n\nHeader Value：\n`Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.1587.41`\n\n![gpt_header_editor](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/gpt_header_editor.png)\n\n## Glarity\n\n[Glarity](https://glarity.app/) 是一个浏览器插件，目前功能有二：1、在 Google 搜索结果右侧显示 ChatGPT 结果；2、在 YouTube 视频右侧显示 ChatGPT 对视频的总结。\n\n![gpt_glarity](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/gpt_glarity.png)\n\n首先到 [OpenAI](https://platform.openai.com/account/api-keys) 获取 API Key，在 Glarity 设置页面填入 API Key 后即可使用。\n\n![gpt_glarity_setting](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/gpt_glarity_setting.png)\n\n## ChatGPT Telegram Bot\n\n![gpt_telegram_example](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/gpt_telegram_example.jpg)\n\n[chatgpt-telegram-bot](https://github.com/RainEggplant/chatgpt-telegram-bot) 可以连接 Telegram 和 ChatGPT，在 Telegram 的精美聊天 UI 中使用 ChatGPT。以群晖为例的安装步骤：\n\n在 Telegram 与 [@BotFather](https://t.me/botfather) 对话创建机器人，记下机器人 token。到[这里](https://github.com/RainEggplant/chatgpt-telegram-bot/blob/master/config/default.json)下载 `default.json` 文件，填入机器人 token 及 OpenAI 的 API。\n\n在群晖新建文件夹保存 `default.json` 文件，打开群晖 Docker，在注册表搜索「raineggplant/chatgpt-telegram-bot」，下载完成后部署，将保存`default.json` 文件的文件夹映射为 `default.json` 文件，启动容器。\n\n![gpt_telegram_config](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/gpt_telegram_config.png)\n\n等待容器启动，向机器人发送 `/chat`命令即可开始对话，另外还支持以下命令：\n\n- `/help`：显示帮助。\n- `/reset`：重置当前聊天线程并开始新线程。\n\n## PopClip 插件\n\n[PopClip](https://pilotmoon.com/popclip/) 是一个 macOS 平台的辅助工具，在 Mac 上用鼠标**选择文本时，可以出现快捷命令，如復制粘贴、访问搜索、拼写、字典等操作。PopClip 目前也有了 ChatGPT 插件，可以将所选文本发送到 ChatGPT，回复会附加到文本后面，按住 Shift 键可以仅複製回复。下载扩展后填入 [OpenAI API Key](ttps://platform.openai.com/account/api-keys) 即可使用。\n\n![gptpopclip](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/gpt_bing_popclip.gif)\n\n## Siri 快捷指令\n\n有大大写了 Apple Shotcuts，可以在 Siri 中使用 ChatGPT，实现到[这里](https://shivam.sh/2023/siri-gpt)下载捷径，填入 OpenAI API Key。使用时需要先说出捷径名称运行捷径，之后就可以与 ChatGPT 对话。"},{"title":"制作超酷的 WiFi 信息卡","url":"/wifi_card/","content":"\n![wifi_card_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/wifi_card_cover.png)\n\n有亲友来家里，一个必要的招待是帮亲友连接 WiFi。分享 WiFi 最简单但使用最不方便的方法是把 WiFi 名称和密码写在纸上或口述，有没有其他家中分享 WiFi 的方式？以下是小弟的一些实践：\n\nWiFi 分享的一个问题是除了直接输入密码不同设备没有一个通用的密码分享方式，但是有一些设备又有通用的。\n\n## 亲友苹果设备分享 WiFi\n\n苹果有注意到这个问题，所以苹果设备间有内建分享 WiFi 密码的功能。如果亲友和自己都是用的苹果设备，可以直接使用苹果的 WiFi分享功能，参见 https://support.apple.com/zh-tw/HT209368，这是最快速、简单的分享 WiFi 的方式。\n\n判定亲友的方式三自己已将对方 Apple ID 绑定的手机号或电子邮件地址储存在「联系人」中，当亲友在要连接的装置上选取 Wi-Fi 网路时，自己的装置上会显示一个分享 WiFi 密码的模态，点一下「分享密码」，就可以将密码共享给亲友。\n\n密码分享给亲友后，若亲友有其他苹果设备，也会同步密码。\n\n![ios_share_wifi](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/ios_share_wifi.jpeg)\n\n## 通用 WiFi 密码分享贴纸\n\n聪明的人已经注意到 WiFi 分享的问题，也给出了巧妙的解法。\n\n[Wifi Porter](https://tenonedesign.com/porter.php) 是一块带 WiFi 标识的木板，内建 NFC 线圈，有 NFC 功能的手机可以直接贴近木板连接 WiFi，不带 WiFi 功能的手机、电脑可以翻转木板背面查看 WiFi 信息或扫描 QR Code 连接 WiFi。WiFi 信息及 QR Code 可以自己打印，放在木板里。[Wifi Porter Hospitality Edition](https://tenonedesign.com/hospitality.php) 是这个公司的另一个 WiFi 连接辅助产品，把 WiFi 信息和 WiFi 标志都放在了正面。这个产品利用了 NFC 的便捷、QR Code 在手机间的通用、不同设备的兼容性，是个设计很好的产品。\n\n看到这个产品，小弟也想通过一张 WiFi 信息卡片探索 WiFi 分享方式，首先列出手机、平板、电脑连接 WiFi 最简便的方式（不包括苹果设备间 WiFi 分享功能）\n\n| 设备                                                         | 连接 WiFi 方便形式                                           |\n| ------------------------------------------------------------ | ------------------------------------------------------------ |\n| 有 NFC 功能 Android 手机                                     | 碰触含 WiFi 信息的 NFC 贴纸                                  |\n| 无 NFC 功能 Android 手机、Android 平板、XR 之前 iPhone、iPad | 扫描含 WiFi 信息的 QR Code                                   |\n| XR 后续 iPhone                                               | 碰触 NFC 贴纸，跳转含 WiFi 信息的静态页面，查看 WiFi 名称，复制 WiFi 密码 |\n| Windows 电脑、macOS 电脑、Linux 电脑                         | 手动输入 WiFi 信息                                           |\n\n根据这些信息，最终贴纸包括以下几个部分：\n\n![wifi_card_info](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/wifi_card_info.png)\n\n### A.WiFi 标识区\n\nWiFi 标识区展示 Wifi 标志，标识此处有 WiFi 信息。\n\n### B.NFC 贴纸区\n\nAndroid 与 iPhone 碰触 NFC 后连接 WiFi 方式不同，Android 可直接读取并导入 WiFi 信息，iOS 设备碰触 NFC 后无法读取 WiFi 信息。\n\n不过 iOS 有折中方式，可以先跳转至一个含 WiFi 信息的静态网页，网页中显示 WiFi 名称密码、「一键复制」按钮，点击「一键复制」按钮后可复制 WiFi 密码，打开 WiFi 设置页面后选择要连接的 WiFi 粘贴密码即可连接。\n\n需要注意的是，针对 iPhone 的这个静态页面需要确保外网可以访问的到。\n\n是以 NFC 贴纸需要两个，为 Android 与 iPhone 分别制作。\n\nAndroid 手机贴纸： 准备好 NFC 贴纸后，在支持 NFC 的手机（Android、iOS 均可）下载安装 [NFC Tools](https://play.google.com/store/apps/details?id=com.wakdev.wdnfc) （有Android、iOS 版），选择「写信息」→「加一条记录」，找到 WiFi 选项填写 WiFi 信息，之后点击「写入」，将 NFC 贴纸放在摄像头附件等待写入完成，写好之后可以测试是否正常写入及信息是否正确。\n\n![wifi_card_android](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/wifi_card_android.png)\n\niOS 手机贴纸：iOS 需要预先制作好 WiFi 信息静态页，静态页显示 WiFi 信息，下面有一个「复制密码」的按钮，点击「复制密码」按钮后显示操作步骤。制作好静态页后需要将静态页部署至可外网访问的服务器上（也可以是群晖），部署好之后记下静态页访问链接。\n\n![wifi_card_ios_web](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/wifi_card_ios_web.png)\n\n在支持 NFC 的手机（Android、iOS 均可）下载安装 [NFC Tools](https://apps.apple.com/app/nfc-tools/id1252962749) （有Android、iOS 版），选择「写信息」→「加一条记录」，找到 URL 网址填写静态页链接，之后点击「写入」，将 NFC 贴纸放在摄像头附件等待写入完成，写好之后可以测试是否正常写入及信息是否正确。\n\n![wifi_card_ios](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/wifi_card_ios.png)\n\n### C.QR Code 区\n\n用系统相机应用扫描 QR Code 是 Android 与 iOS 通用的连接 WiFi 方式，可以直接在[这里](https://qifi.org/) 生成含有 WiFi 信息的 QR Code。\n\n### D.WiFi 信息区\n\nWiFi 信息区显示 WiFi 名称与密码明文，方便电脑等设备连接 WiFi。\n\n"},{"title":"NASTool 实现媒体自动化","url":"/nastools/","content":"\n![nastools_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nastools_cover.png)\n\n流媒体当道的时代，通过 [PT 站点](https://zh.wikipedia.org/zh-tw/PT%E4%B8%8B%E8%BC%89)下载影片观看仍有其意义所在。流媒体的好处是方便，网页、客户端打开就能看，画面品质、字幕翻译有保证。但流媒体缺点也存在，流媒体由于版权因素片源较分散，即便订阅了 Netflix、Disney+、HBO Go 等多家流媒体，仍有些影片看不到，或者版权到期影片下架，加之现在各家流媒体重金投入自制剧制作，这个情况更严重。\n\nPT 站点是流媒体的补充，缺点是操作步骤比流媒体点播多很多，首先要登录 PT 站点搜索资源名称，找到资源下载种子文件，再将种子文件导入下载工具等待下载完成，一段时间打开下载工具确认资源已下载完成。 \n\n[nas-tools](https://github.com/jxxghp/nas-tools) 是一个影视资源的自动化工具，可以直接搜索资源、自动下载、重命名资源，此外还有资源订阅、站点养护、站点功能，打通 PT 站点、下载工具、媒体服务器。\n\n## 安装\n\nnas-tools 很适合运行在群晖，以下是群晖 Docker 安装 nas-tools 的简要步骤：\n\n打开群晖 Docker，在「注册表」中搜索「jxxghp」，下载「jxxghp/nas-tools」，\n\n![nastools_docker1](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nastools_docker1.png)\n\n等待下载完成后在映像中找到「jxxghp/nas-tools」，打开高级设置，在「卷」中添加存放 nas-tools 配置文件的目录，映射为 `/config`，以及媒体目录，映射为`/想设置的容器内能见到的目录`，若有多个媒体目录，需要分别映射进来，\n\n![nastools_docker1](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nastools_docker1.png)\n\nDocker 版本 nas-tools 默认使用 3000 端口，可以映射为其他端口。\n\n![nastools_docker1](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nastools_docker1.png)\n\n## 配置\n\n等待 nas-tools 启动，在浏览器访问链接 `http://群晖地址:自定义端口号`，输入默认用户密码：admin/password 登录，\n\n![nastools_login](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nastools_login.png)\n\n### 配置 TMDB\n\n在 https://www.themoviedb.org/ 注册账号，在「账号设定」→「API」中找到 API Key 并复制，\n\n![nastools_tmdb1](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nastools_tmdb1.png)\n\n在 nas-tools 中「设置」→「基础设置」中填入 TMDB API Key 并保存。\n\n![nastools_tmdb2](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nastools_tmdb2.png)\n\n### 配置媒体目录\n\n文件转移模式支持六种模式：复制、硬链接、软链接、移动、RCLONE、MINIO。\n\n1. 复制模式下载做种和媒体库是两份，多占用存储，好处是媒体库的盘不用 24 小时运行可以休眠；\n\n2. 硬链接模式不用额外增加存储空间，一份文件两份目录，但需要下载目录和媒体库目录在一个磁盘分区或者存储空间；\n\n   软链接模式就是快捷方式，需要容器内路径与真实路径一致才能正常使用；\n\n3. 移动模式会移动和删除原文件及目录；\n\n4. RCLONE 模式 针对 RCLONE 网盘使用场景，MINIO 针对 S3/云原生场景。\n\n根据自己实际情况在 nas-tools 中「设置」→「基础设置」→「默认文件转移方式」选择相应的模式并保存。\n\n![nastools_file_type](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nastools_file_type.png)\n\n在「设置」→「基础设置」中将媒体库文件夹添加至相应类别。\n\n![nastools_media_file](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nastools_media_file.png)\n\n### 配置索引器\n\n首先需要添加 PT 或 BT 站点，在「站点管理」→「站点维护」中，选择「新增站点」，填入站点链接地址、cookie 等信息（cookie 可通过浏览器 F12 开发者工具获取）。如果有多个站点，可逐个添加。\n\n![nastools_index1](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nastools_index1.png)\n\n添加好站点后，在「设置」→「索引器」中选中内建索引器，选择需要索引的站点。、\n\n![nastools_index2](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nastools_index2.png)\n\n### 配置下载器\n\nnas-tools 支持 qBittorrent、Transmission 等下载工具，在「设置」→「下载器」中选择自己使用的下载工具，填入地址、用户名、密码，添加好可测试是否联通。\n\n![nastools_download](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nastools_download.png)\n\n### 配置媒体服务器\n\nnas-tools 支持 Emby、Jellyfin、Plex，设置媒体服务器后可以对本地资源进行判重避免重复下载、标识本地已存在的资源、重命名文件帮助搜刮。在「设置」→「媒体服务器」中选择自己使用的媒体服务器并填入相应信息。\n\n![nastools_media_server](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nastools_media_server.png)\n\n## 配置字幕\n\nnas-tools 支持 OpenSubtitles 和 ChineseSubFinder， OpenSubtitles 无需配置即可使用，ChineseSubFinder 需要自行搭建，可根据实际选择。\n\n![nastools_media_subtitle](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nastools_media_subtitle.png)\n\n### 配置 Telegram 通知\n\nnas-tools 支持 Telegram、Slack 等近十种渠道图文消息通知，最简单的是 Telegram，在 Telegram 创建好机器人后，在 nas-tools 「设置」→「消息通知」中选择「新增消息通知」，之后选择 Telegram 并填入机器人 Token 及用户 ID。\n\n![nastools_notify](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nastools_notify.png)\n\n## 使用\n\n可利用公网 IP 和 DDNS 配置外网访问 nas-tools，在搜索框中输入想看的影片，在各站点搜索后显示搜索结果，选择相应的种子选择下载，即可将种子文件推送至下载器，待下载完成，媒体服务器会对下载的文件搜刮、解码，便于在各设备上观看。\n\n![nastools_example](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nastools_example.png)"},{"title":"Fire Tablet 100 种另类用法","url":"/fire_tablet/","content":"\n![fire_tablet_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/fire_tablet_cover.png)\n\n前年黑色星期五小弟在美国亚马逊买了 Fire HD 8 Plus，经过了半个地球，从美国转运至新加坡，再由新加坡运到中国，终于这个平板到了小弟手里。平板从中国生产，运到美国贩售，最后由中国人购买，回到中国。想想有些不可思议，从美国购买需要付半个地球的运费和关税，最后价格还是比直接在中国买划算。\n\n平板配置不高，但是有触控屏幕、麦克风、扬声器、麦克风，支持无线充电，运行 Android 系统，有了这些，可以做的事情就很多了，以下是小弟的一些实践：\n\n## 作为 Echo Show\n\nFire Tablet 支持 Hands-Free 使用 Alexa，只要说出唤醒词「Alexa」或「Amazon」就可以执行 Alexa 命令，包括问天气、定时、视频电话、控制设备等等。除此之外，Fire HD 8 和 Fire HD 10 还支持 Show Mode，可以把 Fire Tablet 当成 Echo Show，入口有以下几个：\n\n- 直接说出「Alexa，switch to Show Mode」；\n\n- 在顶部往下滑在下拉菜单中将 Show Mode 的开关打开；\n\n- 设置中无线充电时切换至 Show Mode，当无线充电时，就可以自动切换至 Show Mode，断开无线充电自动关闭 Show Mode。\n\nFire Tablet 的 Show Mode 可以实现 Echo Show 的大部分功能，但还是有些功能实现不了：\n\n- 唤醒词只能用 Alexa 或 Amazon；\n\n- 无法用语音命令使用 Spotify 播放音乐，只能打开 Spotify 应用。\n\n![fire_tablet_show_mode](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/fire_tablet_show_mode.png)\n\n## Alexa 设备 Dashboard\n\nFireOS 有内置 Alexa 设备的 Dashboard，屏幕底部比其他 Android 平板多了一个设备仪表板的虚拟按键，可在任何介面点击位设备仪表板按钮进入设备仪表板。\n\n![fire_tablet_dashboard](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/fire_tablet_dashboard.png)\n\n## 智能家居 Dashboard\n\nFire Tablet 另一个很实用的功能是作为 Home Assistant Dashboard，推荐使用 [Kiosk Browser](https://www.fully-kiosk.com/)，可以实现一个屏幕控制所有设备。\n\n除此之外，还可以安装 [browser_mod](https://github.com/thomasloven/hass-browser_mod) 组件实现自动化，比如：\n\n- 当有人按门铃时，平板电脑显示前门摄像头视频流；\n\n- 整点、半点报时；\n\n- 洗衣机完成洗衣播放音乐或 TTS 通知；\n\n- 到睡觉时间在小孩房间的平板显示弹窗通知。\n\n![fire_tablet_kiosk](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/fire_tablet_kiosk.jpeg)\n\n## 魔镜\n\n[MagicMirror²](https://magicmirror.builders/) 是树莓派的一个超酷的模块化智能镜子平台，可以把走廊或浴室镜子转换为个人助理，通过各种模块化组件显示各类信息。Magic Mirror 一个缺点是适配树莓派显示器价格都不是很便宜，自己用旧显示器改装也较麻烦。\n\n魔镜一个较核心的组件是一个叫做半透镜的镜子，这种镜子可透过一半光，反射另一半光，利用 Fire Tablet 、半透镜和 Home Assistant，可以快速制作一个 Magic Mirror，制作方法很简单：\n\n1.在 Home Assistant 选择要显示的组件，选择 Dark Mode，即黑底白字模式\n\n2.将单向镜粘在 Fire Tablet 上\n\n3.将 Fire Tablet 插入电源保证供电\n\n一个简单的 Magic Mirror 就做好了，这个魔镜支持显示各类信息，不支持触屏，但是支持 Alexa 语音助手。\n\n![fire_tablet_mirror](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/fire_tablet_mirror.jpeg)\n\n## 作为 CarPlay/Android Auto 使用\n\n驾驶自家车时，一个较频繁使用的是车载系统，车载系统可以提供音乐播放、导航、通话、新闻、一键控制等等。Apple CarPlay 和 Android Auto 是苹果和 Google 为汽车设计的内容延伸功能，可以通过最日常最常用的电子设备——手机连接到车载系统，无缝造访联络人、简讯、音乐和地图导航。\n\n![fire_tablet_carplay_demo](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/fire_tablet_carplay_demo.png)\n\n有些买的早的车可能没有支援 CarPlay，可以买一个 CarPlay 转换盒、Type-C to USB OTG 转接头，将 CarPlay 转换盒与 Fire Tablet 连接， Fire Tablet 上安装 CarPlay 转换盒的特定应用即可激活 Apple CarPlay 或 Android Auto。图片来自[这里](https://youtu.be/yqSm5vlLCfo)。\n\n![fire_tablet_carplay](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/fire_tablet_carplay.png)\n\nFire Tablet 屏幕有 8 寸、10 寸，支援触控，可以作为很好的 CarPlay/Android Auto 车载系统，另外还支援无线充电，不占用 Type-C 口。\n\n## 简易版 Stream Deck\n\nStream Deck 是 [Elgato](https://www.elgato.com/) 推出的视频直播操作、宏命令控制台，搭配 LCD 实体按钮，可以自定义图标及按钮功能，同时保持实体按键的触控感。同时 Stream Deck 可自定义程度很高，支援的应用也很多，包括 OBS、Twitch、Twitter、、YouTube 等等，可以设置一个按键执行一系列命令，如一键切换场景，开启直播和控制音量。\n\n![fire_tablet_stream_deck_demo](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/fire_tablet_stream_deck_demo.jpeg)\n\nStream Deck 设计很赞，但价格不便宜，借助宏命令应用 Fire Tablet 也可以变成一个简易版 Stream Deck。这类应用需要在电脑和 Fire Tablet 安装相关应用，Fire Tablet 可以自定义 Dashboard 命令按钮，配置好后通过平板上的 Dashboard 命令按钮就可以控制电脑，包括 [Touch Portal](https://www.touch-portal.com/)（有收费功能）、[Macro Deck](https://macrodeck.org/download)（免费，仅支持 Windows 系统）、[Stream Deck Mobile](https://www.elgato.com/en/stream-deck-mobile)（Stream Deck 官方宏命令应用，订阅制）。\n\n![fire_tablet_panel](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/fire_tablet_panel.png)\n\n## 为局域网设备提供代理\n\n如果在熊猫国看流媒体，一个重要的步骤是开网络代理，有些设备没办法装代理应用（如 Apple TV）或者 CPU 算力无法支持代理设备的加密解密运算（如低配 Android TV），除了配置软路由之外，一个简单的办法是通过 Fire Tablet 为局域网设备提供代理。\n\n这里主要利用的是 [Clash for Android](https://play.google.com/store/apps/details?id=com.github.kr328.clash) 的允许局域网连接功能，之后在需要代理的设备上将代理网关设置为 Fire Tablet 的 IP 地址即可。\n\n## 媒体选择器\n\nFire Tablet 可以安装各类流媒体应用，包括 Netflix、Disney+、HBO Go 等等，虽然 8 寸的分辨率只有 1280 x 800 分辨率（即 189 ppi），但海外流媒体码率都较高，观看起来较清晰。除此之前，得益于 Chromecast 的投屏功能，Fire Tablet 可以作为一个很好的媒体选择器，Fire Tablet 查看媒体信息，之后点击投屏即可在电视观看，期间 Fire Tablet 可以作为一个遥控器控制电视。手机也可以做媒体选择器，Fire Tablet 的好处在于可以作为公共设备放在电视旁边，可以随时拿起使用。\n\n## 作为摄像头\n\n使用 [IP Webcam](https://play.google.com/store/apps/details?id=com.pas.webcam) 可以把 Fire Tablet 变成一个可以使用多种查看方式查看的网络摄像头用作视频监控。这个应用支持动作检测、声音检测，可以在动作或声音监测触发后云推送通知、动作触发后云录制。\n\n如果有群晖，也可以直接使用群晖官方的 [DS cam](https://play.google.com/store/apps/details?id=com.synology.DScam) 将 Fire Tablet作为一个监控摄像头。\n\n## 把 3D 打印机变无线\n\n[OctoPrint](https://octoprint.org/) 是一个 3D 打印机的 Web 界面，可以实现在浏览器中控制和监控 3D 打印机和打印作业，安装各类插件系统扩展功能，方便地创建延时摄影，直接切片 STL 文件等等。\n\nOctoPrint 运行在 Linux 系统上，Android 系统内核也是 Linux，理论上可以运行 Linux 应用。有大大做了 [octo4a](https://github.com/feelfreelinux/octo4a)，可以方便地在 Android 设备上安装 OctoPrint。\n\n首先下载 [Octo4a 应用](https://github.com/feelfreelinux/octo4a/releases/)，安装应用中的步骤，几分钟就可以将 Octoprint 安装到Android 设备上。\n\n![fire_tablet_octo4a_demo](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/fire_tablet_octo4a_demo.png)\n\n装好 OctoPrint 后通过 USB OTG 将 Fire Tablet 与 3D 打印机连接，之后在 OctoPrint 的 Web 介面操作即可。\n\n值得注意的是，Fire Tablet 有无线充电，不会占用宝贵的 Type-C 口，也就不用转接线拓展。\n\n## 作为 3D 打印机面板\n\nOcto4a 应用可以让 Android 手机安装 [Octoprint]，但在手机上的查看打印机状态没有适配。[OctoDash](https://unchartedbull.github.io/OctoDash/index.html) 是用于 OctoPrint 的开源仪表板，针对触摸屏设备进行了优化，整体UI 很美观。\n\n![fire_tablet_octodash_demo](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/fire_tablet_octodash_demo.png)\n\n有大大实现了[在 Android 上运行 Octodash](https://xiaoxx.cc/use-octodash-on-your-android-phone/)，可以直接利用触屏屏幕查看信息和控制打印机。图片来自作者文章。\n\n![fire_tablet_octodash](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/fire_tablet_octodash.jpeg)\n"},{"title":"SONOFF Zigbee 网关的使用","url":"/zigbee_hub/","content":"\n![zigbee_hub_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/zigbee_hub_cover.png)\n\n早些时候小弟买了 [SONOFF 的 Zigbee USB 网关](https://sonoff.tech/product/gateway-and-sensors/sonoff-zigbee-3-0-usb-dongle-plus-p/)，记录下使用过程。\n\n## 两种网关\n\n目前 SONOFF 的 Zigbee USB 网关有两款：ZBDongle-P、ZBDongle-E，两款信号和做工都很好，ZBDongle-P 是 CC2652P 芯片，ZBDongle-E 的 EFR32MG21 是更新的芯片。\n\n![zigbee_hub_compare](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/zigbee_hub_compare.jpeg)\n\n两款外壳都是金属外壳，做工很有质感，头部是 USB 口，尾部可旋上天线。\n\n![zigbee_hub_accessories](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/zigbee_hub_accessories.jpeg)\n\n小弟买的时间较早，买的是 CC2652P 的版本，以下示例 CC2652P 版本的使用。\n\n## 注意\n\n如果在树莓派运行 Home Assistant，可以直接将 Dongle 插入树莓派 USB 口，若是群晖虚拟机运行 Home Assistant 需要添加在设定中将 USB 设备添加至虚拟机中（路径为选中 Home Assistant 虚拟机→「动作」→「编辑」→「其他」）\n\n![zigbee_hub_vmm](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/zigbee_hub_vmm.png)\n\n### 重要提示 1\n\nUSB 3.0 端口（内部带有蓝色的端口）会对任何 2.4Ghz 无线设备造成明显的、噪音和无线电干扰，包括 Zigbee。如果不使用 USB 延长线，可能无法工作，包括配对问题、设备丢失、无法访问设备、超时等，因此强烈建议使用 USB 延长线连接网关与群晖。\n\n![zigbee_hub_usb_cable](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/zigbee_hub_usb_cable.jpeg)\n\n### 重要提示 2\n\nZigBee 和 Wi-Fi 信道都存在于 2.4 GHz 频段、相同的频率空间。同一环境同时部署 Wi-Fi 和 ZigBee，必须仔细规划确保不会相互干扰，其中信道规划很关键。\n\n要选择不与 WiFi 重叠的 Zigbee 通道，Zigbee 可以尝试通道 15、20 或 25，这些 Zig bee 通道避开最常见的 WiFi 通道（1、6、11），或者选择 WiFi 通道避开  Zigbee 通道，参考[这里](https://www.control4.com/docs/product/zigbee/best-practices/english/latest/zigbee-best-practices-rev-d.pdf)与[这里](https://www.metageek.com/training/resources/zigbee-wifi-coexistence/)。\n\n![zigbee_hub_channel](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/zigbee_hub_channel.png)\n\n## 通过 ZHA 使用\n\n连接好之后 Home Assisrant 可以自动发现设备，之后按照屏幕的操作即可。\n\n![zigbee_hub_ha_discovery](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/zigbee_hub_ha_discovery.webp)\n\n## 通过 Zigbee2MQTT 使用\n\n在 Home Assistant 中使用 Zigbee 设备的另一种方法是使用 Zigbee2MQTT\n\n使用 Zigbee2MQTT 一个较复杂的步骤是刷固件，推荐在 Windows 系统下进行，以下是步骤：\n\n### 下载固件\n\n到[这里](https://www.home-assistant.io/integrations/zha)下载协调器固件，下载完成后解压缩。\n\n![zigbee_hub_download_firmware](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/zigbee_hub_download_firmware.jpg)\n\n### 安装驱动\n\n安装 [CP210x USB to UART Bridge VCP Drivers](https://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers?tab=downloads) 驱动。\n\n### 安装刷固件工具\n\n到[这里](https://www.ti.com/tool/FLASH-PROGRAMMER)下载刷固件工具并安装。\n\n![zigbee_hub_download_tool](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/zigbee_hub_download_tool.png)\n\n### 拆机\n\n用十字螺丝刀拧下金属外壳的两颗螺丝，拆出电路板。\n\n### 开始刷机\n\n打开安装好的 SmartRF Flash Programmer，左上角确保选中「none」，左下角选择「CC2652P」，\n\n![zigbee_hub_flash1](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/zigbee_hub_flash1.jpeg)\n\nFlash Image(S) 选择固件路径，Actions 勾选「Erase」「Program」。\n\n![zigbee_hub_flash2](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/zigbee_hub_flash2.jpg)\n\n将网关连接好 USB 延长线，按住「boot」按钮并保持，在将 USB 延长线连接电脑（也可以直接按住「boot」按钮并保持连接电脑）。\n\n点击三角形的「烧录」按钮，待绿色进度条走完，全程需按住 「boot」按钮。若显示红色，可重复步骤重试。\n\n","tags":["Home Assistant"]},{"title":"Nest Hub 的使用","url":"/nest_hub/","content":"\n![nest_hub_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nest_hub_cover.png)\n\n早些时候，小弟从沃尔玛买了 [Nest Hub 2](https://store.google.com/product/nest_hub_2nd_gen)，经过一个多月的路程终于收到。小弟之前就有用过 Google Home Mini，经过一段时间的使用，感觉这个产品有很多设计很好的功能，非非仅仅加了屏幕。\n\n## 配置\n\nNest Hub 2 有配备 7 寸触控屏幕 (1024 x 600px，169.5ppi)、1.7 寸喇叭、3 个远扬麦克风，此外有内建带 Motion Sense 功能的 Soli 感应器、环境光度等化感应器、温度感应器，重量有 558 克，支持 2.4 GHz 与 5 GHz 的 Wi-Fi、蓝牙 5.0，未来支持 Matter 协议。\n\n## 睡眠感应\n\nNest Hub 2 一个很厉害的功能是[睡眠感应功能](https://store.google.com/tw/product/nest_hub_sleep_sensing)。说到功能不得不提带 Motion Sense 功能的 [Soli 感应器](https://atap.google.com/soli/)， Soli 是一个微型雷达，可以感应、理解各种人体的运动，从心跳到身体的运动，最早用在 Pixel 4 手机上，可以让 Pixel 4 无需触摸手机跳过歌曲、暂停闹钟、静音来电等等。而现在 Google 进一步通过配套的软件发挥这个雷达的潜力。除了 Soli 雷达，Nest Hub 2 还使用麦克风感应声音、光传感器感应光线、温度感应器感应温度、超声波传感器感应距离，综合收集睡眠数据。\n\n具体使用是睡前将 Nest Hub 2 面对自己，无须其他操作，待第二天早上就可以看到睡眠数据。睡眠感应功能会协助分析瞭解影响睡眠品质的可能原因，通过这侦测你的呼吸速率，睡眠期间受到的干扰，例如咳嗽和打鼾声，以及房间中的光线和温度变化。睡眠感应仅支持分析一个人的睡眠状况，目前此服务可以免费使用，将来会收费。\n\n![nest_hub_sleep](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nest_hub_sleep.webp)\n\n## 智能家居\n\nNest Hub 2 另一个实用功能是可以控制智能家居设备，有了屏幕有些操作可以更简单，还可以一次查看多个设备的状态。通过语音控制设备存在一些问题：口音辨识不准确，命令的发现等等，触控屏幕是语音控制一个很好的补充。\n\n![nest_hub_smart_home](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nest_hub_smart_home.webp)\n\n除此之外，如果有使用 Home Assistant，还可以使用 [Home Assistant Cast](https://cast.home-assistant.io/faq.html) 将 Home Assistant 设备数据投屏至 Nest Hub 上，支持触屏操作。\n\n![nest_hub_cast](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nest_hub_cast.png)\n\n## 语音助手\n\nNest Hub 2 内置 Google Assistant，是忙碌家庭的好帮手，可以查看日曆，设定提醒或计时器和闹钟、待办事项、取得天气资讯、通过广播讯息告诉大家晚餐准备好了等等。\n\n![nest_hub_voice](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nest_hub_voice.webp)\n\n比较贴心的是，通过传感器的协作，Nest Hub 2 对很多细节了设计。当靠近萤幕时，装置画面会自动亮起显示内容。当关灯后屏幕也会自动变暗显示。当在房间的另一头离屏幕很远时，萤幕会放大烹饪计时器显示的时间，方便查看。使用快捷手势操作可以延后闹钟、停止计时器。\n\n## 欣赏影音\n\nNest Hub 2 有内置 Youtube、Netflix、Disney+、Spotify 等流媒体应用，可以直接在屏幕点选观看。另外也有内置 Chromecast 功能，可以通过手机将流媒体内容投至 Nest Hub 2 播放。\n\n![nest_hub_media](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nest_hub_media.png)\n\nNest Hub 2 播放流媒体的好处是播放音质会好很多，可以手势播放或暂停歌曲，以及语音控制。","tags":["Home Assistant"]},{"title":"人生苦短，我用 NAS——NAS 用法介绍","url":"/nas/","content":"\n![nas_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nas_cover.png)\n\n2022 年，人类进入 21 世纪已经快 1/4，20 年前还在用传统的调制解调器上网，现在可以在线观看 4K 影片。技术的进步也带来问题的增多，我们的各种数据集中在几个大公司手里，照片、影片、应用、其他文件占的存储空间越来越大。\n\n难以想象，1998、1999 年还在讨论因为节约内存和存储空间的「[千年虫问题](https://zh.m.wikipedia.org/zh-tw/2000%E5%B9%B4%E9%97%AE%E9%A2%98)」，2022 年有 1T 存储容量的手机，手机存储容量比之前都要大，却比以往更容易容量不足。\n\n新世纪解决村存储空间不足的一个方法是使用 NAS （Network Attached Storage 网路附加储存），NAS 是一台电脑，可以集中储存照片、影片、音乐、文件等。由于本身是一台电脑，所以 NAS 的功能不限于存储，还有很多其他功能。\n\nNAS 有很多品牌，群晖、威联通、华芸等等，其中市占率较高的是群晖，以下以群晖为例说明：\n\n## 跨平台共享存储文件\n\nNAS 默认有装好 NFS、SMB、FTP、WebDAV 等文件共享服务，可以很方便地在局域网及外网跨平台、跨设备大容量共享存储文件。\n\n![nas_share_file](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nas_share_file.png)\n\n## 多设备同步文件\n\nNAS 设备多提供可以自动同步的应用，如群晖的 [Synology Drive](https://www.synology.com/zh-tw/dsm/feature/drive) 在需要同步的设备装好应用或在浏览器打开应用页面后，就可以将文件同步至最新，同时还有随需同步、协作、版本回溯等功能。\n\n![nas_drive](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nas_drive.png)\n\n## 备份手机照片、影片\n\n手机存储一部分是照片、影片占用，NAS 设备都有提供辈分手机照片、影片的功能，可以安全备份手机照片、影片，释放手机存储空间。群晖照片备份工具有 [Synology Photos](https://www.synology.com/zh-tw/dsm/feature/photos) ，手机安装应用备份照片后可以在应用内查看备份的照片，还可以依人脸辨识、地理位置、标籤自动产生相簿。\n\n![nas_photos](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nas_photos.webp)\n\n不过 iOS 端的 Synology Photos 并不好用，iOS 开启 iCloud 备份后会将不使用且已备份到 iCloud 的照片、影片在本机删除，Synology Photos 备份这些照片需要先从 iCloud 下载照片到本地。这样有太多问题，手机备份照片前，可能存储空间已经不够，从 iCloud 下载照片到本地会加剧手机存储空间不够，手机存储空间不够一定程度会导致手机运行卡顿，如果照片很多，卡顿过程会持续很久。解决这个问题的一个办法是使用 [boredazfcuk/icloudpd](https://hub.docker.com/r/boredazfcuk/icloudpd) 这个 Docker，可以直接将 iCloud 中的照片、影片备份至群晖。\n\n## 备份整个电脑\n\n除了备份文件、照片、视频等，NAS 还提供整个电脑备份功能，与 macOS 的 [Time Machine](https://support.apple.com/zh-tw/HT201250) 功能类似，但是功能更加强大。群晖的 [Active Backup for Business](https://www.synology.com/zh-tw/dsm/feature/active-backup-business/pc) 可以对 Windows、macOS、Linux 系统进行整机备份，还可以排程备份任务，或登出或装置开机等触发备份，备份的电脑无法开机时，通过 U 盘进行整机復原。\n\n![nas_active_backup](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nas_active_backup.webp)\n\n## PT 下载\n\nPT 下载是流媒体资源的补充，NAS 可 24 小时下载、做种，有足够的存储空间，是 PT|下载最佳伴侣，NAS 可以方便地安装主流的 PT 下载工具，如 qBittorrent、Transmission 等等。\n\n![nas_qb](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nas_qb.png)\n\n## 媒体服务器\n\n下载好的媒体文件最好有一处集中管理，并提供多媒体串流服务，方便在各设备上观看。媒体服务器即是提供以上功能的产品，常用的有 Jellyfin、Emby、Plex，NAS 可方便地安装以上媒体服务器。\n\n![nas_jellyfin](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nas_jellyfin.png)\n\n## 图书管理\n\n除了管理影音内容，NAS 也可以管理电子书内容，[Calibre Web](https://hub.docker.com/r/johngong/calibre-web) 是一个好用的电子书管理工具，有干净的介面，可以搜刮电子书信息，转换电子书格式、提供 OPDS （ Open Publication Distribution System，开放式出版发布系统）服务等，方便在各端查看电子书。\n\n![nas_calibre](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nas_calibre.png)\n\n## 管理网路摄像头\n\n[Surveillance Station](https://www.synology.com/zh-tw/surveillance) 是群晖的网路摄像头管理工具，可以观看、录製即时影像、设定排程录影，透过网页、手机播放录好的事件，以及在重要事件发生时发送通知。NAS 存储空间很大，不用担心录制的影像无处存放。\n\n![nas_surveillance_station](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nas_surveillance_station.png)\n\n## 运行 Home Assistant\n\n[Home Assistant](https://www.home-assistant.io/) 是开源的智能家居自动化平台，可以接入市面上几乎所有智能家居设备。群晖是运行 Home Assistant 好设备，最简单的方法是通过虚拟机安装 Home Assistant。\n\n![nas_home_assistant](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nas_home_assistant.png)\n\n## 运行 OpenWrt\n\n[OpenWrt](https://openwrt.org/) 是一个开源的路由器系统，可以安装很多拓展，且稳定性很好。OpenWrt 可以很好地解决各种网络问题，如多设备使用代理、域名分流、隐私保护等等。\n\n![nas_openwrt](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nas_openwrt.png)\n\n## 托管静态页面\n\nNAS 可以架设、发佈网站，小弟最常用的用来托管静态网页，群晖有附带 Web Station 套件，只需要几个简单步骤就可以快速部署静态网页。\n\n![nas_web_station](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nas_web_station.png)\n\n一个示例是若群晖运行了上面提到的很多服务，可以通过 Web Station 快速部署一个导航页。\n\n![nas_nav_page](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nas_nav_page.png)\n\n## 运行 Docker\n\nDocker 是一款轻量级虚拟化应用程序，可以快速部署各种打包的容器应用。群晖的 Docker 套件有提供 Docker 图形介面，使用者可免除使用文字指令，快速完成Docker下的应用程式部署与操作，对初学者非常友好。\n\n![nas_web_station](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/nas_web_station.png)\n"},{"title":"ESP32 实现在家离家判断","url":"/espresense/","content":"\n![espresense_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/espresense_cover.png)\n\n在家、离家是两个区别较大的场景，通过设备追踪（Device Tracke）可以是判断在家离家的一个简单、可靠方式，[ESPresense](https://espresense.com/) 是一个利用 ESP32 低成本实现设备追踪的项目。\n\n## 原理\n\n![beacon_flow.jpeg](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/beacon_flow.jpeg)\n\n[ESPresense](https://espresense.com/) 通过蓝牙信号强度测量距离，首先 ESP32 收集信标（如手机、手表）广播的广告包，并发布至 MQTT，Home Assistant 解析 MQTT 信息并报告给追踪传感器。大多数蓝牙设备处于隐私广播的 mac 地址都有加密，但 ESPresense 基于指纹 ID 追踪，可以稳定、可靠地跟踪设备。通过蓝牙信号强度测量距离可精确到几米，也可以追踪设备是否在某一个房间，ESP32 价格低廉，综合来说，这是一个低成本且可靠的设备追踪方案。\n\n## 刷机\n\n准备好 ESP32 后可直接在线刷机：\n\n1.确保电脑装好驱动：\n\n- CP2102 驱动： [Windows 和 Mac](https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers)\n- CH342、CH343、CH9102 驱动： [Windows](https://www.wch.cn/downloads/CH343SER_ZIP.html)、 [Mac](https://www.wch.cn/downloads/CH34XSER_MAC_ZIP.html)\n- CH340、CH341 驱动： [Windows](https://www.wch.cn/downloads/CH341SER_ZIP.html)、 [Mac](https://www.wch.cn/downloads/CH341SER_MAC_ZIP.html) \n\n2.将 ESP32 与电脑通过数据线连接（确保 USB 数据线可用于数据传输，而不是仅用于供电的数据线），使用 Chromium 内核的浏览器打开 `https://espresense.com/firmware`\n\n3.点击「连接」，选择端口，等待刷机完成。\n\n![espresense_flash](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/espresense_flash.png)\n\n## 配置\n\n刷机完成后重启 ESP32，寻找 SSID 为 `ESPresense-` 开头的 AP 热点并连接，\n\n连接 AP 热点后在设置页面中，填入 WIFI 信息、房间名称及 MQTT 信息，以及多少米判断在房间、不在房间。\n\n!![espresense_setting](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/espresense_setting.png)\n\n### Android 设备\n\n对于 Android 设备需要一个应用程序发出 BLE 广告，推荐 Home Assistant 的 [HA Companion App](https://play.google.com/store/apps/details?id=io.homeassistant.companion.android&hl=en_GB&gl=US) 。\n\n### iOS 设备\n\n苹果设备会发出各种[连续性](https://github.com/furiousMAC/continuity)消息，指纹 `apple:100?:*-*` 通常是可见的。但如果家里有很多 iPhone，会导致附近的信息冲突并重复。\n\n解决此问题需要从 iOS 或 WatchOS 设备获取 IRK（身份解析密钥），并添加至 ESPresense 的 `Known BLE identity resolving keys` 配置中：\n\n1.浏览器打开 `http://espresense 设备 IP/ui`，在名称中为您的设备填写想显示的设备名称，点击「Enroll」按钮，\n\n!![espresense_enroll](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/espresense_enroll.png)\n\n2.打开 iOS 设备，在「设置」→「蓝牙」中找到 ESPresense 设备并配对，\n\n![espresense_pair](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/espresense_pair.png)\n\n4.下载安装 [MQTT Explorer](http://mqtt-explorer.com/)，填入 MQTT 信息，在 `espresense/settings` 主题中可以找到 IRK 密钥。\n\n![espresense_mqtt](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/espresense_mqtt.png)\n\n### APPle Watch\n\nApple Watch 的 IRK 获取参见 https://espresense.com/beacons/apple Watch OS 相关内容。\n\n\n\n### Home Assistant 配置\n\nHome Assistant 可以自动发现 ESPresense，\n\n![espresense_ha_mqtt](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/espresense_ha_mqtt.png)\n\n每个需要追踪的信标需要添加到 configuration.yaml 文件中，\n\n```yaml\nsensor:\n# 每个需要追踪的信标都需要设置\n  - platform: mqtt_room\n    device_id: \"iTrack:xxxxxxxxxxxx\"\n    name: 'ESP Keys'\n    state_topic: 'espresense/devices/iTrack:xxxxxxxxxxxx'\n    timeout: 10\n    away_timeout: 120\n  - platform: mqtt_room\n    device_id: \"iBeacon:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx-3-58241\"\n    name: 'ESP Chipolo'\n    state_topic: 'espresense/devices/iBeacon:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx-3-58241'\n    timeout: 10\n    away_timeout: 120\n```\n\n保存后重启 Home Assistant，之后就可以看到追踪的信标距离 ESP32 的距离以及是否在房间。\n\n![espresense_device](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/espresense_device.png)\n\n需要注意的是，若墙壁等阻隔，测量距离可能比实际距离稍远。","tags":["Home Assistant"]},{"title":"Android 设备做家庭 Dashboard","url":"/kiosk/","content":"\n![kiosk_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/kiosk_cover_new.png)\n\n智能家居场景面板是扩展智能家居控制的好方法，可以更方便地让客人或其他家庭成员控制家里的设备，除此之外，还可以一目了然地查看某个设备的状态并与设备交互。市面上有一些场景面板类产品，这些场景面板可以方便地控制接入的设备，美中不足是大多数产品自定义程度不高。\n\n除了使用市面上的场景面板，另一个 CP 值比较高的方式是利用 Android 设备作为 Dashboard，通过安装 Home Assistant App 或浏览器在触屏屏幕上控制各种设备。\n\n## 设备选择\n\n### 旧 Android 手机或 Android 平板\n\n如果不想额外花费，可以直接使用旧 Android 手机充当 Home Assistant 的控制装置，不过使用旧手机需要解决电源的问题。\n\n除了旧 Android 手机，还可以使用 Android 平板，好处是有比手机更大的屏幕。平板中 CP 值比较高的有 [Amazon Fire Tablet](https://www.amazon.com/Amazon-Fire-Tablet-Family/b?ie=UTF8&node=6669703011) 或 [Walmart 的 onn tablet](https://www.walmart.com/search?q=onn+tablet)。其中有些平板还支持语音助手，如 Amazon 的 Fire 平板支持免提使用 Alexa。和手机一样，平板也有电源的问题需要解决。\n\n一个较干净利索的思路是使用无线充电器（需要手机或平板支持），在墙上装一个手机或平板的壁挂支架（可以 3D 打印），支架或平板其中一个粘上小磁片，另一个粘上铁片，通过磁吸拿下放上去。\n\n另外一个需要注意的问题是，使用 Android 设备做 Dashboard 屏幕可能会有反光（灯光或太阳光）的问题，解决这个问题的思路是贴磨砂的膜或者屏幕亮度调高。\n\n### Android 场景面板\n\n除了常规的 Android 设备，也有厂商推出 Android 系统的场景面板，这类面板的好处是既有 Android 的灵活性，又可以无缝安装在原来灯泡机械开关的位置，直接市电供电。\n\n![kiosk_panel1](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/kiosk_panel1.png)\n\n![kiosk_panel2](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/kiosk_panel2.png)\n\n## 应用选择\n\nAndroid 系统使用 Home Assistant 主要有三种方式：\n\n第一种是直接使用 Home Assistant 官方的 [Companion App](https://www.home-assistant.io/integrations/mobile_app/)；\n\n第二种是使用全屏浏览器类应用，如 [Fully Kiosk Browser](https://www.fully-kiosk.com/)（部分功能付费）或 [WallPanel](https://github.com/thecowan/wallpanel-android)（免费），浏览器类应用可以实现更多功能，如利用设备摄像头作为一个运动传感器、支持将浏览器作为一个媒体播放器、实现更多自动化等等。\n\n![img](https://github.com/thecowan/wallpanel-android/raw/master/img/dashboard2.png)\n\n第三类是类似 [SharpTools](https://sharptools.io/) 这样的工具，这类工具有很多预制的适配 Dashboard 的卡片，直接选择相应的卡片可以快速配置美观的 Dashboard，由于卡片类型都是定义好的，所以自定义程度不如浏览器类应用，但是配置起来相对容易。\n\n![kiosk_sharptools](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/kiosk_sharptools.png)\n\n## 配置展示应用\n\n三种方式中自定义程度高且功能丰富的是使用浏览器类应用，以 Fully Kiosk Browser 为例，安装好之后可以进行以下设置：\n\n1、基本设置\n\n在「设置」→「网页内容设置」可以填入 Home Assistant 的地址。\n\n![kiosk_browser_setting1](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/kiosk_browser_setting1.png)\n\n2、其他设置\n\n可以设置多少秒之后显示屏保，屏保可以设置打开一个网址，或者调用 Android 系统自带屏保或者打开某一个 App。\n\n![kiosk_browser_setting2](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/kiosk_browser_setting2.png)\n\n除此之外，还可以设置摄像头作为一个运动传感器，传感器敏感度、侦测到运动传感器后点亮屏幕等等都可以设置，这样在无人操作或夜晚就可以关闭屏幕显示，防止光污染。\n\n![kiosk_browser_setting3](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/kiosk_browser_setting3.png)\n\n需要注意的是，设置中标注 PLUS 的，如果不付费会出现水印。\n\n3、远端控制\n\nFull Kiosk Browser 可以设置远端控制，打开远端控制后可以在其他设备通过浏览器访问 Kiosk Browser 的地址进行设置。\n\n![kiosk_browser_setting4](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/kiosk_browser_setting4.png)\n\n打开设置中的「远端控制」及设置好密码后，就可以直接在电脑浏览器进行设置了。\n\n![kiosk_browser_setting5](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/kiosk_browser_setting5.png)\n\n4、系统权限\n\n如果希望 Fully Kiosk Browser 可以控制系统屏幕等，需要获取系统权限，需要确保这些权限是打开状态。\n\n![kiosk_browser_setting6](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/kiosk_browser_setting6.png)\n\n5、作为组件接入 Home Assistant\n\nFull Kiosk Browser 可以通过  [Fully Kiosk Browser integration](https://github.com/cgarwood/homeassistant-fullykiosk) 组件 这个组件作为一个系统组件接入 Home Assistant，\n\n首先在 HACS 中搜索「Full Kiosk Browser」并安装，\n\n![kiosk_browser_kiosk_integration1](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/kiosk_browser_kiosk_integration1.png)\n\n在「设置」→「设备与服务」中，点击右下角「add integration」，搜索「kiosk」，选择「Full Kiosk Browser」\n\n![kiosk_browser_kiosk_integration2](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/kiosk_browser_kiosk_integration2.png)\n\n填入安装 Full Kiosk Browser 的设备的 IP 地址及密码，\n\n![kiosk_browser_kiosk_integration3](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/kiosk_browser_kiosk_integration3.png)\n\n正确填入后 Home Assistant 会多一个设备，安装 Kiosk Browser 设备的各种信息都可以作为一个传感器接入。\n\n![kiosk_browser_kiosk_integration4](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/kiosk_browser_kiosk_integration4.png)\n\n## 配置 Dashboard\n\nHome Assistant 可自定义程度很高，有很多大大分享自己的配置，如 [matt8707](https://github.com/matt8707) 的[类似 HomeKit 的 Dashboard](https://github.com/matt8707/hass-config)，\n\n![kiosk_browser_sample1](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/kiosk_browser_sample1.png)\n\n[pqpxo](https://github.com/pqpxo) 的 [SWAKES_hassio](https://github.com/pqpxo/SWAKES_hassio)\n\n![kiosk_browser_sample2](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/kiosk_browser_sample2.png)\n\n[jimz011](https://github.com/jimz011) 的 [homekit-infused](https://github.com/jimz011/homekit-infused) ，\n\n![kiosk_browser_sample3](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/kiosk_browser_sample3.png)\n\n这些配置介面很漂亮，不过这些介面需要自己配置 yaml 文件，配置起来复杂。\n\n简单的方式是通过 GUI 直接增删卡片，除了 Home Assistant 自带的卡片类型，有大大分享了一个简洁、可自定义的 UI 卡片集合 [Mushroom Card](https://github.com/piitaya/lovelace-mushroom)，可以丰富自定义卡片类型，方便地构建美观的 Dashboard。\n\n### 安装 Mushroom Card\n\n可直接通过 HACS 安装 Mushroom Card，在 HACS 前端中搜索「mushroom」安装，之后重启 Home Assistant。\n\n### 配置卡片\n\n1、单个 entity 卡片\n\n首先点击右上角「更多」按钮，点击「编辑 Dashboard」进入编辑状态，点击右下角的「添加」按钮，在「按照卡片」选项中搜索「mushroom」，可以看到 mushroom 相关卡片，\n\n![kiosk_browser_insert_mushroom](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/kiosk_browser_insert_mushroom.png)\n\nMushroom Card 目前有这几种类型的卡片：\n\n[警报卡片](https://github.com/piitaya/lovelace-mushroom/blob/main/docs/cards/alarm.md)、[窗帘卡片](https://github.com/piitaya/lovelace-mushroom/blob/main/docs/cards/cover.md)、[实体卡片](https://github.com/piitaya/lovelace-mushroom/blob/main/docs/cards/entity.md)、[风扇卡片](https://github.com/piitaya/lovelace-mushroom/blob/main/docs/cards/fan.md)、[灯泡卡片](https://github.com/piitaya/lovelace-mushroom/blob/main/docs/cards/light.md)、[家庭成员卡片](https://github.com/piitaya/lovelace-mushroom/blob/main/docs/cards/person.md)、[自定义卡片](https://github.com/piitaya/lovelace-mushroom/blob/main/docs/cards/template.md)、[Chips 卡片](https://github.com/piitaya/lovelace-mushroom/blob/main/docs/cards/chips.md)、[标题卡片](https://github.com/piitaya/lovelace-mushroom/blob/main/docs/cards/title.md)、[更新管理卡片](https://github.com/piitaya/lovelace-mushroom/blob/main/docs/cards/update.md)、 [吸尘器卡片](https://github.com/piitaya/lovelace-mushroom/blob/main/docs/cards/vacuum.md)、[媒体播放器卡片](https://github.com/piitaya/lovelace-mushroom/blob/main/docs/cards/media-player.md)、[锁卡片](https://github.com/piitaya/lovelace-mushroom/blob/main/docs/cards/lock.md)、[加湿器卡片](https://github.com/piitaya/lovelace-mushroom/blob/main/docs/cards/humidifier.md)\n\n![kiosk_browser_mushroom_all](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/kiosk_browser_mushroom_all.png)\n\n每种卡片都可以自定义参数，如窗帘卡片可以设置是否显示位置百分百、显示开合按钮等等。\n\n![kiosk_browser_insert_mushroom_cover_card](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/kiosk_browser_insert_mushroom_cover_card.png)\n\n2、善用 Horizon Stack\n\nMushroom Card 可以和系统自带的 Horizontal Stack 结合使用，创建更丰富的卡片形式，在添加卡片中搜索「horizontal」选择 Horizontal Stack 嵌套 Mushroom Card。\n\n![kiosk_browser_insert_horizontal_stack](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/kiosk_browser_insert_horizontal_stack.png)\n\n3、设置页面层级\n\nMushroom Card 可以设置点击后效果，可以设置点击跳转路径，通过此设置有页面层级的 Dashboard。\n\n![kiosk_browser_mushroom_click](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/kiosk_browser_mushroom_click.png)\n\n\n\n### 隐藏顶部 bar\n\n另外一个需要注意的是，Home Assistant 默认会显示顶部 bar，\n\n![kiosk_kiosk_mode](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/kiosk_kiosk_mode.gif)\n\n如果想隐藏，可以用 [kiosk-mode](https://github.com/maykar/kiosk-mode) 这个小工具，首先下载 [kiosk-mode.js](https://github.com/matt8707/kiosk-mode/releases/latest) 到 `www` 路径下，Dashboard 编辑模式选择「原始 yaml 编辑」，将以下代码添加并保存。\n\n```yaml\nresources:\n  - url: /local/kiosk-mode.js?v=1.2.1\n    type: module\n```\n\n如果想显示隐藏的 bar，在路径加上参数 `?disable_km` 可临时取消隐藏。\n\n### Dashboard 示例\n\n最终可以得到这样一个 Dashboard，\n\n![kiosk_final_dashboard](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic//kiosk_final_dashboard.jpg)\n\n## 自动化\n\nDashboard 本身的自动化可以通过 [hass-browser_mod](https://github.com/thomasloven/hass-browser_mod) 这个组件实现。\n\n### 安装 browser mod\n\n安装分三步：\n\n1、直接在 HACS 搜索「browser mod」搜索并安装，\n\n2、在 `configuration.yaml`文件中加入\n\n```\\\nbrowser_mod:\n  prefix: \"browser_\"\n```\n\n3、重启 Home Assistant\n\n安装好之后可用的命令很丰富，包括調試、設置主題、導航至某个路径、显示实体详情、媒体播放、浏览器 Toast、浏览器 popup 弹窗、关闭 popup 弹窗、延遲、呼叫某个 Home Assistant 服務等等。\n\nbrowser mod 有一个概念是 entity_id，browser mod 通过 entity_id 区分各浏览器，entity_id 可以在开发者工具里「服务」中选择「Browser mod: debug」，呼叫后将在所有浏览器弹出 entity_id 信息。\n\n### 自动化示例 1：有人按门铃显示摄像头\n\n當有人按門鈴時，播放声音，并把门口的攝像頭画面在平板上彈出。\n\n```yaml\nalias: popup_camera\ndescription: ''\ntrigger:\n  - platform: device\n    domain: mqtt\n    device_id: fc7c97eef33567c1e5107e84d452a42e\n    type: click\n    subtype: single\n    discovery_id: 0x00158d0003503065 click_single\ncondition: []\naction:\n  - service: browser_mod.more_info\n    data:\n      entity_id: camera.camera1\n  - service: media_player.play_media\n    data:\n      media_content_id: https://i.drunkfish.me:8123/local/doorbell.mp3\n      media_content_type: music\n      deviceID:\n        - 12345678-12345678\n    target:\n      entity_id:\n        - media_player.browser_c494f5db_139ca1f4\nmode: single\n```\n\n### 自动化示例 2：平板做报时钟\n\n每天整点报时，方便实践单核工作法。\n\n```yaml\nalias: clock hour fire tablet\ndescription: ''\ntrigger:\n  - platform: time\n    at: '8:00'\n  - platform: time\n    at: '9:00'\n  - platform: time\n    at: '10:00'\n  - platform: time\n    at: '11:00'\n  - platform: time\n    at: '12:00'\n  - platform: time\n    at: '13:00'\n  - platform: time\n    at: '14:00'\n  - platform: time\n    at: '15:00'\n  - platform: time\n    at: '16:00'\n  - platform: time\n    at: '17:00'\n  - platform: time\n    at: '18:00'\n  - platform: time\n    at: '19:00'\n  - platform: time\n    at: '20:00:00'\n  - platform: time\n    at: '21:00:00'\n  - platform: time\n    at: '22:00:00'\n  - platform: time\n    at: '23:00:00'\ncondition: []\naction:\n  - service: media_player.play_media\n    data:\n      media_content_id: https://i.drunkfish.me:8123/local/hour.mp3\n      media_content_type: music\n      deviceID:\n        - 12345678-12345678\n    target:\n      entity_id:\n        - media_player.browser_c494f5db_139ca1f4\n```\n\n### 自动化示例 3：睡觉时间在小孩房间平板显示通知\n\n晚上 10 点半在小孩房间平板显示声音和弹窗，提醒小孩睡觉，5s 后弹窗消失。\n\n![kiosk_automation_bedtime](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/kiosk_automation_bedtime.png)\n\n```yaml\nalias: it's bed time\ndescription: ''\ntrigger:\n  - platform: time\n    at: '22:30'\ncondition: []\naction:\n  - service: browser_mod.popup\n    data:\n      title: Popup example\n      large: ture\n      hide_header: ture\n      card:\n        type: markdown\n        content: '![](https://i.drunkfish.me:8123/local/bedtime.png)'\n  - service: media_player.play_media\n    data:\n      media_content_id: https://i.drunkfish.me:8123/local/bedtime.mp3\n      media_content_type: music\n      deviceID:\n       - 12345678-12345678\n    target:\n      entity_id:\n        - media_player.browser_c494f5db_139ca1f4\n  - delay:\n      hours: 0\n      minutes: 0\n      seconds: 5\n      milliseconds: 0\n  - service: browser_mod.close_popup\n    data: {}\nmode: single\n```\n\n### 自动化示例 4：午夜后吸顶灯打开，切换到客厅视图\n\n晚上 12 点后客厅吸顶燈打开后，浏览器切換到客厅视图。\n\n```yaml\nalias: turn on ceiling light_switch to card\ndescription: ''\ntrigger:\n  - platform: state\n    entity_id:\n      - switch.switch\n    from: 'off'\n    to: 'on'\ncondition:\n  - condition: time\n    before: '07:00:00'\n    after: '00:00:00'\naction:\n  - service: browser_mod.navigate\n    data:\n      navigation_path: /lovelace-test/living%20room\n    deviceID:\n       - 12345678-12345678      \nmode: single\n```\n","tags":["Home Assistant"]},{"title":"Android TV 应用推荐——以 Mibox 为例","url":"/tv/","content":"\n![tv_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/tv_cover.png)\n\n小弟入手了一个小米盒子国际版 [Mibox Original](https://www.mi.com/global/mibox)，运行 Android TV 系统，下面是一些使用建议：\n\n![tv_mibox](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/tv_mibox.png)\n\n## 介绍\n\n并非所有运行 Android 系统的盒子或电视都是 [Android TV](https://www.android.com/tv/)，Android TV 是有 Google 认证的盒子或电视，预装 Google 服务框架，带 Chromecast 功能，有 Netflix 等流媒体授权。\n\n![tv_index](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/tv_index.png)\n\n### 网络建议\n\n稳定的网络连接是充分使用 Android TV 的前提，推荐使用软路由，通过 [OpenClash](https://github.com/vernesong/OpenClash) 插件实现网络代理、域名分流。\n\n### Google Assistant\n\nAndroid TV 系统有内置 Google Assistant 语音助理，按下遥控器语音按钮可激活使用，[可用语音执行很多操作](https://www.youtube.com/watch?v=hIHsgqID9Xc)，如查看日程、打开应用、搜索影片、控制其他设备等等。针对搜索影片，Android TV 上的 Google Assistant 有做聚合搜索，直接说出电影或剧集名称（可中文或英文）会显示所有可以播放的选项。另外，还可以用 Google Home 反向控制 Android TV。\n\n![tv_google_assistant](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/tv_google_assistant.png)\n\n### Chromecast\n\nAndroid TV 系统内置 Chromecast，流媒体平台都有支援，只要轻轻一点就可以将影片或音乐投至电视欣赏，用手机充当遥控器控制。\n\n## 欣赏串流媒体\n\nAndroid TV 一个最主要的功能是用来欣赏串流媒体平台，在 Google Play 中可以方便安装各类流媒体应用，且 Android TV 上的流媒体应用都有对电视使用场景做优化与适配。Android TV 可以方便地切换 Google 账号，可以注册多个地区的 Google 账号方便下载不同地区的流媒体应用。\n\n目前有支援的中文的较主流流媒体平台有 [Netflix](https://www.netflix.com/browse)、[Disney+](https://www.disneyplus.com/)、[HBO GO](https://www.hbogoasia.tw/movies)、[Amazon Prime Video](https://www.primevideo.com/)、[Apple TV+](https://www.apkmirror.com/apk/apple-inc/apple-tv-android-tv/)、[动画疯](https://play.google.com/store/apps/details?id=tw.com.gamer.android.animad)、[Spotify](https://www.spotify.com/) 等等。很多流媒体都有低价区，可以跨区订阅，还支持家庭共享账号，故可以至低价区订阅找人合租或直接找人合租。\n\n如果有订阅多个串流媒体平台，可以使用 [JustWatch](https://www.justwatch.com/)，可以聚合搜索各个流媒体平台的资源，手机、电脑同时安装 JustWatch 后，就可以在手机聚合搜索影片，并直接在电视播放。\n\n## 观看电视直播\n\n除了点播流媒体，Android TV 也可以像「传统电视」一样看电视直播。Youtube 上就有很多免费电视直播频道可以直接观看。\n\n如果有直播源可以使用 [TiviMate IPTV Player](https://play.google.com/store/apps/details?id=ar.tvplayer.tv) 观看 IPTV，应用有对电视操作特别适配，介面美观，功能全面。或者在 [Kodi]() 这个应用上安装 [PVR IPTV Simple Client](https://kodi.wiki/view/Add-on:PVR_IPTV_Simple_Client) 这个插件来播放直播源。\n\n## 欣赏局域网内媒体\n\n若 NAS 下载了很多影片，可以通过安装应用在电视上直接播放。[Kodi](https://kodi.tv/) 可以挂载局域网 NAS，对影片内容进行搜刮、下载字幕以及播放等等。除此之外，若在 NAS 上有安装[Plex](https://www.plex.tv/)、[Emby](https://emby.media/) 或 [Jellyfin](https://jellyfin.org/) 等媒体服务器，可以安装相应客户端欣赏其中的影片。\n\n## 应用推荐\n\n### ATV Launcher Pro\n\nAndroid TV 自带 Launcher 有很多推荐内容，且不符合 Android TV 应用图标规范的应用不能直接显示出来。如果需要一个简单的、可自定义的  Launcher，可以使用 [ATV Launcher Pro](https://play.google.com/store/apps/details?id=ca.dstudio.atvlauncher.pro) ，这个启动器介面简单，可以隐藏应用、自定义应用图标、自定义图标顺序等等。\n\n### Mix-Apps\n\n除了 ATV Launcher Pro，也可以使用 [Mix-Apps](https://play.google.com/store/apps/details?id=com.himedia.applications) 将应用图标不带 Banner 的应用显示出来。\n\n### 乐播投屏\n\n[乐播投屏](https://www.hpplay.com.cn) 对 AirPlay 协议做了逆向，可以将 Android 设备模拟成 Apple TV，方便苹果设备使用 AirPlay 进行投屏。\n\n### 小盒精灵\n\n[小盒精灵](http://down.znds.com/apk/app/2020/0222/7414.html)可以方便在手机浏览器输入文字、传输文件。\n\n### Kodi\n\n[Kodi](https://kodi.tv/) 是 Xbox 以前的 Media Center，播放能力、可拓展能力很强。可以播放局域网内影片，也可以用来观看 IPTV、通过安装插件观看 Netflix、当做 DLNA 投屏装置等等，功能很多。\n\n### Button Mapper\n\n[Button Mapper](https://play.google.com/store/apps/details?id=flar2.homebutton) 可以自定义遥控器按键，使遥控器或其他输入设备使用更顺手。\n\n### JioPages\n\n[JioPages](https://play.google.com/store/apps/details?id=com.jio.web.androidtv) 是一款 TV 浏览器，有对电视操作进行适配，可以进行一些轻度浏览网页操作。\n\n### tinyCam Monitor\n\n[tinyCam Monitor](https://play.google.com/store/apps/details?id=com.alexvas.dvr) 可以方便地在电视大屏幕上查看 IP 摄像机。\n\n## 手机应用推荐\n\n### Google TV\n\n[Google TV 应用](https://support.google.com/googletv/answer/11136134) 是 Google 官方的 Android TV 控制应用，可以用手机控制 Android TV、进行语音交互、输入文字等等。\n\n除此之外，若用 Google 搜索影片时将影片加入 Watchlist，也可以在 Google TV 应用中看到。\n\n### Kodi Remote\n\n[Kodi Remote](https://kodi.wiki/view/Official_Kodi_Remote) 是 Kodi 官方的 Kodi 控制应用，可以方便地在 Kodi 各功能切换、控制、查看媒体信息等等。\n\n## 配件推荐\n\n### 迷你键盘\n\n盒子自带遥控器的按键比较少，只能满足基本使用。小弟有买过一些遥控器，也曾\n\n[i8 迷你键盘](http://www.riitek.com/index.html) 看起来有点像一个游戏手柄，比较厉害的是小小空间装了完整 QWERTY 全键盘、触摸板，还支持背光按键。i8 迷你键盘有好几个版本：推荐蓝牙版本或蓝牙/2.4GHz 双模版。\n\n![tv_i8](https://cdn.jsdelivr.net/gh/drunkfish7/pic5@master/uPic/tv_i8.jpeg)\n\n### NFC 贴纸\n\nNFC 贴纸的功能是快速打开小盒精灵的页面或者打开 Google TV 应用，可以粘在遥控器上，手机碰触贴纸即可快速打开 Google TV，方便输入长文本或发送安装包。\n\n"},{"title":"100 种设备接入 HomeKit","url":"/tuya_hub/","content":"\n![tuya_hub_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/tuya_hub_cover.png)\n\n> 四海皆兄弟，谁为行路人。——两汉·佚名\n\n一直以来，苹果的产品都是品质的保证。在智能家居领域， 苹果主推的 [HomeKit](https://www.apple.com/ios/home/) 也是独树一帜，在很多方面与其他平台不一样：\n\nHomeKit 设备需要一个叫做「Works with Apple HomeKit」的认证，认证通过备案制管理。大公司可以为自己工厂申请资质，初创公司可以委托拥有资质的工厂代生产，由于备案制，HomeKit 设备品质都有保证。也因为需要认证， HomeKit 认证设备售价普遍较高。\n\n与其他平台的另一个不同之处在于，HomeKit 需要通过一个「[家居中枢](https://support.apple.com/en-us/HT207057)」实现设备自动化及外网访问。家庭中枢可以是 HomePod、iPad 或 Apple TV ，在本地网络处理各类自动化，这样做一方面可以用苹果 A 系列处理器弥补各类网关性能上的不足，另一方面数据存在本地，免数据传到外网中转，隐私可最大程度保护。\n\n同时，HomeKit 的另一项优势在于苹果有目前最完善的跨设备体验，无论手机、平板、电脑、手表、电视还是音箱，都可以提供一致、优质的体验，并且 HomeKit 在苹果各设备上都有系统级的入口，可以以最短的路径操作设备。\n\n小弟最近在使用 [Zemismart 的涂鸦 Zigbee HomeKit 网关](https://item.taobao.com/item.htm?id=658436128278&spm=2015.23436601.0.0)，可以作为[涂鸦](https://www.tuya.com/) Zigbee 设备与 HomeKit 的桥梁，快速将各类涂鸦 Zigbee 设备转成「一等设备」，使用苹果生态及涂鸦生态的叠加优势。\n\n在用这个网关之前，小弟一直使用 Home Assistant 作为中介将设备接入 HomeKit，总体感觉是「灵活有余，稳定不足」，设备状态容易「无响应」，而坊间的 HomeKit 网关大多只支持自家品牌的设备，这个网关（确切的说是桥接器）算是一个折衷，有苹果认证保证连接的稳定，半开放的涂鸦固件确保有足够种类数量的设备接入。\n\n\n\n## 外观\n\n就像路由器的性能比外观重要，网关的外观与功能相比也很次要，但是好的外观还是可以吸引到人。这款网关很小巧，整体是一个扁平的圆柱体，外观简洁、紧凑，全白的颜色非常有质感，侧边有一圈指示灯，总体看上去觉有点像压扁的 [Google Wifi](https://store.google.com/us/product/google_wifi_2nd_gen?hl=en-US)，接口方面有一个 microUSB 电源口和一个以太网口。除了网关本体，另有附赠一个底座、一条 microUSB 充电线、一根网线与三颗螺丝。\n\n![tuya_hub_package](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/tuya_hub_package.jpg)\n\n## 入网\n\n网关入网很简单，首先确保 iOS 设备已登录 iCloud 且已开启「iCloud 钥匙串」和「家庭」。\n\n![tuya_hub_ios_check](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/tuya_hub_ios_check.png)\n\n将网关通电，网关未附电源，可以用手机的 5V 1A 豆腐头充电器，通电同时用网线将网关与路由器连接（附的网线较短，可能需要另找一根网线），之后长按以太网口旁边的「重置」按钮，此时网关进入配对状态，指示灯显示**常绿**。\n\n![tuya_hub_pair_hub](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/tuya_hub_pair_hub.jpg)\n\nHomeKit 认证设备通过贴纸（二维码或 NFC 贴纸）配对入网，这个网关在网关底部、包装盒、说明书都有贴二维码贴纸，打开使用 iOS 设备的「家庭」应用，选择右上角的「＋」→「添加配件」或者直接点击「添加配件」按钮，扫描贴纸上的配对码，HomeKit 会识别为「桥接设备」，点击「添加到家庭」按钮，耐心等待「家庭」App 将网关接入，之后选择网关所在房间及重命名网关。\n\n![tuya_hub_home_pair](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/tuya_hub_home_pair.jpg)\n\n## 添加子设备\n\n### 可配对的子设备\n\n网关的作用在于收集信号，发送指令，实现产品之间的通讯连接，需要各种功能需要接入子设备。这个网关目前只要是涂鸦标准方案（目前只支持刷入涂鸦标准方案的固件的设备）的 Zigbee 设备理论上就可以接入，不需要是同一个品牌。涂鸦 Zigbee 设备的一个特点是品类覆盖广，在涂鸦 App 中列出的 Zigbee 设备就有 56 种之多，覆盖了开关、传感器、窗帘等除电冰箱、洗衣机大家电之外的几乎所有品类。\n\n![tuya_hub_child](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/tuya_hub_child.png)\n\n需要注意的是，涂鸦厂商采用自定义固件或厂商固件，这些「非标准」固件由开发者或厂商维护，其中可能与这个网关连不上。即便如此，可选的设备还是有很多。\n\n除了品类丰富，涂鸦固件的设备另外一个特点是价格亲民，性价比普遍较高。\n\n### 配对流程\n\n这个网关可以在「家庭」App 添加子设备，也可以「涂鸦」App 添加子设备，在一个 App 中添加子设备后两个 App 中可以同步。\n\n#### 使用「家庭」App 配对子设备\n\n配对子设备的需要网关与子设备同时进入配对状态，使用「家庭」App 配对子设备需要手动将网关调至配对状态，具体的操作是按一下网关侧面的 reset 键，此时网关指示灯显示**绿色灯闪烁**，同时子设备也要调至配对状态（不同设备进入配对设备方法不同，如大多数传感器是长按 reset 键至指示灯闪烁，具体可查阅设备附的说明书或设备标识）。\n\n![tuya_hub_home_pair_child](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/tuya_hub_home_pair_child.jpg)\n\n网关会自动寻找并配对网关，待配对完成，子设备会出现在「家庭」App。\n\n#### 使用「涂鸦」App 配对子设备\n\n除了使用「家庭」App 配对子设备，也可以使用「涂鸦」App 配对子设备。若之前有通过 「家庭」App 入网，打开「涂鸦」App 可以直接发现网关，点击「添加」即可将网关绑定至涂鸦账号，\n\n![tuya_hub_child_pair_tuya1](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/tuya_hub_child_pair_tuya1.png)\n\n不同于在「家庭」App 中需要手动将网关调至配对状态，在「涂鸦」App 中可以直接在 App 中将网关调至配对状态，在「涂鸦」App 中找到网关，进入网关详情页面，点击「添加子设备」按钮，可将网关调至配对状态，同时将子设备调至配对状态（可参阅子设备说明书），网关会自动发现设备。\n\n![tuya_hub_child_pair_tuya2](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/tuya_hub_child_pair_tuya2.png)\n\n### 两者区别\n\n「家庭」App 与「涂鸦」App 都可添加独立子设备，添加后两个 App 中可以同步，在「家庭」App 中需要手动将网关调至配对状态，添加子设备后无法直接手动删除。「涂鸦」App 中管理子设备较灵活，可以手动解绑子设备。\n\n## 苹果装置控制设备\n\n网关入网后可以用 iPhone、iPad、Mac 设备控制子设备或查看设备状态，包括 Siri、「家庭」应用、控制中心快捷入口，或者使用 Apple Watch 的「家庭」应用以及 HomePod 或 Apple TV 的 Siri 控制。\n\n## 自动化与外网控制\n\n由于 HomeKit 生态的特殊性，自动化及场景设置主要有两种方式：\n\n### 通过 HomeKit 自动化\n\nHomeKit 需要苹果定义的「家庭中枢」实现自动化，这样做的前提是要有 HomePod、iPad 或 Apple TV 的其中一个设备作为家庭中枢，家庭中枢在本地网络实现自动化和外网访问。\n\n#### 「家庭」App 自带自动化\n\n设置好家庭中枢后，可以直接在「家庭」App 中设置自动化。\n\n以「日出打开窗帘」为例，打开「家庭」App 的「自动化」tab，点击「创建自动化」按钮，选择「某个特定时间」，触发条件选择「日出」，执行设备选择窗帘。状态调整为「打开」，点击「完成」可建立自动化。\n\n![tuya_hub_home_auto](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/tuya_hub_home_auto.png)\n\n#### 第三方 HomeKit 应用\n\n比较遗憾的是，「家庭」应用自带的自动化不是很丰富，如「家庭」App 尚未开放用温度或湿度数值作为自动化触发条件，如想设置根据温度或湿度开启冷气或加湿器这样的自动化就不能直接添加了。\n\n不过苹果有开放其他应用读取家庭数据，有第三方应用可提供复杂的自动化设定，付费的应用有 [Home+ 4](https://apps.apple.com/us/app/home-4/id995994352)、[HomeDash](https://apps.apple.com/us/app/homedash/id1003033186) 等，免费的有 [Eve for HomeKit](https://apps.apple.com/us/app/eve-for-homekit/id917695792)。[Eve](https://www.evehome.com/en) 是一家生产 HomeKit 配件的厂商，他家的 [Eve for HomeKit](https://apps.apple.com/us/app/eve-for-homekit/id917695792) 除了可以接自家的设备（全是 HomeKit 设备）以外，也可以设定很多 HomeKit 的自动化，功能齐全并且免费。\n\n以「温度高于 30℃打开冷气」为例设置自动化，安装好 Eve for HomeKit 后，打开「自动化」tab 中的「规则」，点击「新增规则」，\n\n![tuya_hub_eve_auto1](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/tuya_hub_eve_auto1.png)\n\n在触发条件中选择「添加触发条件」，选择「温度」，选中要监控的温度计并调整温度至阈值温度，如果需要设置其他触发条件也可以添加，\n\n![tuya_hub_eve_auto2](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/tuya_hub_eve_auto2.png)\n\nEve 的自动化是通过建立场景实现的，选择「新增场景」→「新增动作」，在「模式」中找到要控制的空调并调整温度至阈值温度，之后重命名场景，选择一个图标方便辨识。选中这个场景作为执行动作就可以了。\n\n![tuya_hub_eve_auto3](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/tuya_hub_eve_auto3.png)\n\n建立好自动化之后，在「家庭」App 中也可以看到这个自动化。\n\n![tuya_hub_eve_auto4](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/tuya_hub_eve_auto4.png)\n\n### 通过涂鸦 App\n\n### 「涂鸦」App 自动化\n\n如果没有苹果的家庭中枢设备或者感觉 HomeKit 设置麻烦，可以使用涂鸦 App 的自动化功能。无需额外设备，在涂鸦 App 就可以设置各种自动化。\n\n打开「涂鸦」App 的「智能」tab，选择「创建智能场景」，触发条件依次选择「气象变化时」→「日落日出」→「日出」，\n\n![tuya_hub_tuya_auto1](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/tuya_hub_tuya_auto1.png)\n\n执行动作选择「操作设备」，在设备列表中选中要执行动作的设备，功能依次选择「控制」→「开启」，保存即可建立好自动化。\n\n![tuya_hub_tuya_auto2](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/tuya_hub_tuya_auto2.png)\n\n### 两者区别\n\n两种方式的区别在于家庭中枢的自动化是本地控制，「涂鸦」 App 的自动化是连接到涂鸦的服务器。对于设置难易度来说，有些自动化「家庭」App 设置起来稍微麻烦一点。就执行效率来说，苹果家庭中枢会更快，且由于本地控制，即使断网，家庭中枢的自动化仍可正常运行。另外，如果注重隐私，可以只用 HomeKit 生态。\n\n## 对接其他平台\n\n网关采用的是涂鸦方案，这个网关也可以接入 Google Assistant、Amazon Alexa 等语音平台，这些语音平台也可以设定一些自动化。\n"},{"title":"一分钟给卷珠帘加「魔法」","url":"/roller_blind/","content":"\n![roller_blind_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/roller_blind_cover.png)\n\n> 我在冰封的深海，找寻希望的缺口。却在午夜惊醒时，蓦然瞥见绝美的月光。——幾米《我的心中每天开出一朵花》\n\n几千年以来，窗帘与人类的生存空间共存，从最简单的兽皮、草席到现在风格与款式的千变万化。窗帘给我们提供遮光、隔熱、保护隱私的功能，在一定程度可以抑制噪音，在白天帮助唤醒，晚上幫助我们睡眠。\n\n众多窗帘中，可以更加精细化调整光线的窗帘是卷珠帘、百叶帘。相较于卷珠帘可以通过上下调整透光量、百叶帘还可以通过调整窗叶的角度精细调整光线，以上两种窗帘都可以通过卷帘的机械装置向下拉动卷珠调整窗帘透光大小。\n\n如果卷珠帘接入家庭自动化，就可以根据不同时间调整进入房间的光线，提升每天的生活品质。坊间有不少厂商有出电动窗帘（如[宜家的电动卷帘](https://www.ikea.cn/cn/zh/cat/dian-dong-juan-lian-44531/)），大多数需要整体换窗帘。\n\n小弟最近有用 [Zemismart 的卷珠帘外挂](https://detail.tmall.com/item.htm?id=646026082368)，可以免去窗帘轨道等一系列繁琐步骤，快速将卷珠帘接入家居自动化平台，赋予卷珠帘「魔法」。\n\n## 适用范围\n\nZemismart 的卷珠帘外挂由电机、遥控器、发射器、转轴齿轮配件组成。电机转动卷珠（可通过转轴齿轮配件适配不同卷珠），发射器与遥控器可发送转动指令，发射器可将窗帘接入到各语音平台。\n\n![roller_blind_pic](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/roller_blind_pic.png)\n\n基于巧妙的设计，Zemismart 的这个外挂适配市面上几乎所有用卷珠帘滚轮机械的各种 blind，如百叶帘（Venetian blind）、垂直帘（Vertical blind）、蜂窝帘（Honeycomb blind）等，以及各种 shade，如三色帘（Triple shade）、卷帘（Roller shade）、斑马帘（Zebra shade）等。\n\n![roller_blind_type](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/roller_blind_type.png)\n\n另外比较酷的是，这款产品已内置电池，无需考虑插座布线供电。\n\n## 安装与接入 OEM\n\n### 版本差异\n\n产品有分涂鸦版与米家版：涂鸦版使用的是 915mHz 射频，发射器是涂鸦固件，可通过涂鸦固件对接天猫、Amazon Alexa、Google Assistant等语音平台。米家版使用的是蓝牙协议，可直接接入米家 App，与米家生态的各种设备联动。两版本均无法直接接入 Apple HomeKit，但可以通过 Shortcuts 使用 Siri 语音命令控制。两版本除协议及固件有差异，其余无显著差异。\n\n### 安装\n\n相较于其他的窗帘需要换轨道的复杂繁琐操作，这款产品安装很简单。首先使用卡针长按电机的「set」键（这个键确切地说是 power 键）待蓝色灯闪烁一下即开机。此时按动电机上的按钮齿轮即转动，按动遥控器按钮齿轮也可转动。\n\n将将电机头部的外壳取出，卷珠帘的卷珠套入电机齿轮，看齿轮可否带动卷珠转动，带不动可更换转轴配件。\n\n![roller_blind_roller](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/roller_blind_roller.png)\n\n套好卷珠后可将电机用胶或者用附送的螺丝将电机固定在墙上，注意将卷珠及电机在同一平面，即窗帘与卷珠尽量保持垂直，电机后的背板的后盖底部轻向上掀可以分离，另外，产品有附盖板贴纸帮助确定打孔或粘贴位置。背板固定好之后，将电机挂好珠子，电机卡进背板，完成即完成，\n\n### 接入米家 App\n\n米家版接入米家 App 很简单，首先将发射器通电，用卡针长按上面的「set」键约 5 秒，待蓝灯闪烁。\n\n打开米家 App ，点击右上角「+」选择「扫描」中可以扫描到（请确保系统蓝牙已打开且授权米家 App 使用蓝牙），\n\n![roller_blind_mijia1](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/roller_blind_mijia1.png)\n\n之后按步骤填入 WiFi 名称及密码即可，注意 WiFi 确保是 2.5Ghz。\n\n接入之后可以设定上下滚动距离，在窗帘页面右上角点击「...」，进入设置页面选择「设置距离」，进入「距离设置」页面，可以先清除距离设置，将窗帘手拉至最低或最高，之后按动电机或遥控器将窗帘升或降至最高或最低，按下遥控器的「暂停」键，并在 App 中点击「最低」或「最高」，设置好最高后依法配置最低点。另外，「设置」页面还有一个翻转选项，可以按实际是否打开，使最终 App 中的「打开窗帘」与实际的「打开窗帘」一致。\n\n![roller_blind_mijia2](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/roller_blind_mijia2.png)\n\n### 接入涂鸦 App\n\n若使用天猫等语音助理，可以通过先接入涂鸦 App 再对接语音平台，首先将发射器插入 USB 充电器，用卡针长按「set」键约 5 秒，看到蓝灯闪烁。\n\n下载安装 Tuya Smart 应用，点击右上角「+」按钮，选择「小型家庭装置」中的「窗帘 Wifi」，之后按步骤填入 WiFi 名称及密码，注意 WiFi 确保是 2.5Ghz。\n\n![roller_blind_tuya·](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/roller_blind_tuya1.png)\n\n接入之后可以设定上下滚动距离，在窗帘页面右上角点击「更多」，进入设置页面选择「设置距离→「上限设置」，可以先清除距离设置，将窗帘手拉至最低或最高，之后按动电机或遥控器将窗帘升或降至最高或最低，按下遥控器的「暂停」键，并在 App 中点击「最低」或「最高」，设置好最高后依法配置最低点。另外，「设置」页面还有一个翻转选项，可以按实际是否打开，使最终 App 中的「打开窗帘」与实际的「打开窗帘」一致。\n\n![roller_blind_tuya2](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/roller_blind_tuya2.png)\n\n## 小贴士\n\n1、电机转速有两档\n\n这款产品转速有两档，默认按下「上升」键是慢速，转速慢且噪音小，再次按下「上升」键是快速，转速快且噪音稍大。快速、慢速上升下降在电机按钮、遥控器及 App 中均适用。\n\n2、米家版联动示例\n\n如果之前有买过米家生态的产品，米家版的可以与之前购买的产品一起使用，产生最大收益，联动示例：\n\n- 定时开关窗帘\n- 使用米家无线开关、米家魔方控制窗帘开关\n- 当气温超过 35℃ 时自动关闭窗帘\n- 当打开空调时自动关闭窗帘\n- 设置「晚安」模式关闭窗帘\n\n3、遥控器背板有附磁铁\n\n遥控器背板有附磁铁，可吸附在含铁的背板上（如冰箱上）防止找不到。\n\n## 使用 Siri 控制窗帘\n\n窗帘外挂无法直接接入 Apple HomeKit，但可以通过 Shortcuts 使用 Siri 语音命令控制。\n\n### 米家使用 Siri\n\n米家版使用 Siri 控制主要有两个步骤：\n\n首先新建一个「手动执行窗帘打开/关闭」的自动化，在米家 App 首页点击「自动化」标签，之后点击右上角「+」按钮，在条件中选择「手动执行」，行动中选择「Zemismart 窗帘」，之后选择动作并保存。\n\n![roller_blind_mijia3](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/roller_blind_mijia3.png)\n\n之后在「自动化」标签中可以看到新建的自动化，点击右上角的「添加至 Siri」入口，输入语音命令如「帮我打开窗帘」之后保存。保存好之后可以试试用 Siri 是否可以正常启动命令。\n\n![roller_blind_mijia4](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/roller_blind_mijia4.png)\n\n### 涂鸦使用 Siri\n\n涂鸦版使用 Siri 控制与米家版相似，也是新建一个「手动执行窗帘打开/关闭」的自动化，再将这个命令添加至 Siri。\n\n## 接入 Home Assistant\n\n米家固件、涂鸦固件都支持接入 Home Assistant。\n\n### 使用涂鸦组件接入\n\n目前涂鸦组件接入有三种方式，旧涂鸦组件、涂鸦组件 v2 及 [localtuya](https://github.com/rospogrigio/localtuya)。最简单的是旧涂鸦组件，直接在 integration 中搜索「tuya」，带组件安装完成后输入国家编号、涂鸦用户名邮箱、涂鸦密码即可。\n\n![roller_blind_ha1](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/roller_blind_ha1.png)\n\n添加后可以看到添加的窗帘设备，不过似乎不能百分比控制。\n\n![roller_blind_ha2](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/roller_blind_ha2.png)\n\n涂鸦组件 v2 是涂鸦官方与 Home Assistant 出的组件，需要先在 HACS 或手动安装。\n\nlocaltuya 是本地获取涂鸦设备 token，免连涂鸦服务器，相应更迅速，隐私性更好，需要先在 HACS 或手动安装，之后获取设备 token，由此接入窗帘支持百分比控制。\n\n### 使用 Miiot 组件接入\n\n米家设备接入 Home Assistant 方式很多，比较简单的是利用 [Xiaomi Miot Auto](https://github.com/al-one/hass-xiaomi-miot)，可以手动或在 HACS 安装，\n\n![roller_blind_ha3](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/roller_blind_ha3.png)\n\n重启后在在 integration 中搜索「xiaomi」，选择「Xiaomi Miot Auto」，填写小米账号及密码，国家选择「中国」即可将米家设备接入 Home Assistant。\n\n![roller_blind_ha4](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/roller_blind_ha4.png)\n\n接入后可以看到窗帘设备，暂时不支持百分比控制。\n\n![roller_blind_ha5](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/roller_blind_ha5.png)\n\n\n\n","tags":["Home Assistant"]},{"title":"电视增加超酷的 Ambilight","url":"/ambilight/","content":"\n![ambilight_new_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_new_cover.png)\n\n[Ambilight](https://www.philips.com.tw/c-m-so/tv/ambilight/latest) 是 Philips 在自家电视或显示器的特别的酷设计，电视边框有彩灯带，灯会随屏幕边缘显示内容同步颜色。另外，飞利浦还出过一个 [Philips Hue Play HDMI Sync Box](https://www.lighting.philips.com.hk/zh/consumer/p/hue-play-hdmi-sync-box-/8718699707248) 。Philips 对 Ambilight 的解释：\n\n> 情境光源(Ambilight) 是飞利浦的独特功能，会将柔和光源投射到电视周围的墙壁，依照画面的色彩与亮度自动变化。 情境光源可以改善感应到的对比度、色彩与细节，产生观看大萤幕的错觉。 而且，因为是较为放松的观赏体验，经证实可减少眼睛疲劳。\n\n## 在 Android TV 上安装\n\n在 Android TV 上主要是通过一个开源项目 [Hyperion](https://github.com/hyperion-project/hyperion.ng) 实现，这个项目可以选择有线或无线连接，有线连接的好处是可以播放有 DRM 的内容，包括 Netflix、HBO、Disney+ 这类流媒体服务，缺点是需要 HDMI 采集卡及树莓派。目前 HDMI 采集卡 1080P 价格较便宜，4K 价格稍贵，可按需选择。如果选择无线连接，无需 HDMI 采集卡，但是无法识别有 DRM 的媒体内容。\n\n小弟没有采集卡测试，以下步骤是通过无线连接方式实现电视的 Ambilight 效果，主要原理是 Android TV 通过应用 [Android Screen Grabber](https://github.com/abrenoch/hyperion-android-grabber) 抓取屏幕边缘信息并发送至 Hyperion（运行在群晖），Hyperion 再将 UDP 数据包同步至 WLED（通过 ESP8266 控制）。\n\n###  灯带计算\n\n坊间比较参见的灯带是 WS2812B 或 WS2811 灯带，灯带上都有焊好 LED 灯，两种灯带主要区别是电压，WS2812B 灯带的工作电压为 5V，WS2811 灯带工作电压为 5V 。\n\n灯带有不同级别的保护，可以按需选择。最常见的情况是 IP20-30（可以防止固体颗粒进入）、IP65（可以防止灰尘和水蒸气进入）、IP67（可以防灰尘以及部分或短期浸入水中至 1m 深度），基材颜色有黑色、白色两种。\n\n![ambilight_led_style](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_led_style.png)\n\n灯带每米的 LED 数量不同。通常每一米有 144、60、30 颗等等。一般每米灯泡密度越高，环境光分辨率越大，最大亮度也就越大。同时，项目中的 LED 越多，电源方案就会越复杂，且需要更多的电流。\n\n小弟建议用尺子量一下电视的边长，确定是要环绕边框的一边、两边、三边还是四边，进而确定用几米灯带及多少颗灯泡。如果系统中的LED总数不超过 120 个，则选择 WS2812B。如果大于 120 个，建议选工作电压为 12V 的 WS2811。\n\n两种灯带最大功耗大约为 0.3 瓦，电源不应小于 N×0.3 瓦（N 是项目中 LED 的数量）。例如，一台 42 英寸电视，选择 WS2812B LED 灯带，每米 30 个 LED，需要 3 米 LED 灯带（屏幕四边均安装），最大功率为 0.3×3×30=27 瓦，所需电流为 27/5≈6A，所以应该准备一个 5V 6A的电源。\n\n\n另外。如果 LED 灯条较长，电压会有损耗，尤其是在使用 5V 灯带时。建议 5 V 时每消耗 10 W 和 12 V 时每消耗 25 W 单独配电源。\n\n### 所需元件\n\n1、D1 Mini（或 ESP 8266）\n\n![ambilight_component1](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/ambilight_component1.png)\n\n2、WS2812B 或 WS2811 灯带\n\n灯带一般是按米卖，长度需测量\n\n![ambilight_component2](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/ambilight_component2.png)\n\n3、5V 或 12V 电源\n\n电流根据灯泡总功率决定\n\n![ambilight_component3](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/ambilight_component3.png)\n\n4、DC 直流电源插头公头母座圆孔\n\n直径需与电源匹配\n\n![ambilight_component4](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/ambilight_component4.png)\n\n5、杜邦线若干\n\n建议公对公、公对母、母对母都备一些，方便延长，至少准备公对母的杜邦线\n\n![ambilight_component5](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/ambilight_component5.png)\n\n6、3PIN 灯带免焊连接卡扣（非必须）\n\n非必须，用于连接灯带，可用焊接代替\n\n![ambilight_component6](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/ambilight_component6.png)\n\n7、3PIN 灯带免焊连接器 T 型（非必须）\n\n非必须，用于连接折角的灯带，可以弯折灯带或焊接代替\n\n![ambilight_component7](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/ambilight_component7.png)\n\n### 安装 Hyperion\n\n安装 Hyperion 有很多种方法，下面介绍两种：\n\n#### 通过群晖 Docker 安装\n\n打开群晖 Docker，在「注册表」中搜索「mumpfnix」，选择 `mumpfnix-hyperion.ng`，并下载，\n\n![ambilight_docker1](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_docker1.png)\n\n\n等待 image 下载完成（下载完成群晖会有通知），在「映像」中找到映像 `mumpfnix-hyperion.ng:latest`，点击「启动」，\n\n![ambilight_docker2](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_docker2.png)\n\n\n选择「高级设置」，\n\n![ambilight_docker3](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_docker3.png)\n\n\n可以新建一个文件夹存放配置文件，名字任意，如 `hyperion`，在「卷」中添加路径，映射为 `/root/.hyperion`，这个路径会存放 Hyperion 的配置文件，\n\n![ambilight_docker4](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_docker4.png)\n\n在「端口」中开放 `6080`、`19444`、`19445` 三个端口，并启动容器。\n\n![ambilight_docker5](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_docker5.png)\n\n在浏览器访问地址 `http://群晖地址:6080` 可以看到 Hyperion 配置页面说明成功安装。如果安装过程中遇到问题可以查阅 [Hyperion 文档](https://docs.hyperion-project.org/)。\n\n![ambilight_hyperion_web](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_hyperion_web.png)\n\n#### 通过 Home Assistant 插件安装\n\n在  Home Assistant 的 Supervisor 中点击右上角三个点按钮，选择「库」，\n\n![ambilight_hyperion_ha1](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_hyperion_ha1.png)\n\n添加库的地址 `https://github.com/bradsjm/hassio-addons`，\n\n![ambilight_hyperion_ha2](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_hyperion_ha2.png)\n\n在插件列表中找到 `Hyperion.NG` 并安装即可。\n\n![ambilight_hyperion_ha3](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_hyperion_ha3.png)\n\n### 刷入固件\n\nESP8266 通过刷入 [WLED 固件](https://github.com/Aircoookie/WLED)来控制灯带，刷入固件很容易：\n\n1.首先要下载相应模块的驱动，若是 D1 mini，请前往[这里](https://wiki.wemos.cc/downloads)下载，若是 NodeMCU 请前往[这里](https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers)下载。\n\n2.下载安装 [NodeMCU PyFlasher](https://github.com/marcelstoer/nodemcu-pyflasher/releases) 及控制端 [WLED 固件](https://github.com/Aircoookie/WLED/releases/tag/v0.9.1)，选择 [`WLED_版本号_ESP8266.bin`](https://github.com/Aircoookie/WLED/releases/download/v0.9.1/WLED_0.9.1_ESP8266.bin)`将模块用 MicroUSB 数据线连接至电脑 USB 口，选择好端口及固件路径，点击「刷入」，之后等待刷武完成。\n\n![ambilight_esptool](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_esptool.png)\n\n### 连线与安装\n\n#### 连线\n\n首先按照以下连接 ESP8266 与灯带，注意一定要灯带「进箭头」的方向：\n\n| 灯带              | ESP8266 |\n| ----------------- | ------- |\n| 5V（一般为红色）  | VIN     |\n| GND（一般为绿色） | GND     |\n| DIN（一般为白色） | D4      |\n\n之后将灯带的另外红线与白线连接至 DC 电流头正负极（注意不要接反），连接好再次确认是进箭头「进箭头」的方向。\n\n![ambilight_wire](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_wire.png)\n\n如果一切顺利，连接好电源，前 30 个 LED 将亮起亮橙色。\n\n#### 安装\n\n将电视翻到背面，将灯带粘到电视的边框。若灯带不够长，可以在铜触点位置将灯带剪断，用灯带连接卡扣将两端的铜触点连接或者直接焊接铜触点。\n\n折角地方可以直接弯折灯带或者用折角卡扣或者焊接。注意连接灯带时一定要沿着箭头方向连接 LED 灯带。\n\n![ambilight_wire_tv](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/ambilight_wire_tv.png)\n\n![ambilight_wire_tv2](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/ambilight_wire_tv2.png)\n\n![ambilight_wire2](https://cdn.jsdelivr.net/gh/drunkfish7/pic4@master/uPic/ambilight_wire2.png)\n\n安装好之后将每一边的灯泡数目记下来备用。\n\n### WLED 配置\n\n将刷好固件的 ESP8266 通电，可以看到名为 `WLED-AP` 的 AP，连入这个 WiFi（密码是 `wled1234`)，连接成功后会振动打开 IP 为 `4.3.2.1` 的地址，点击其中的「WiFi 设置」，\n\n![ambilight_wled_setting0](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_wled_setting0.png)\n\n将 WiFi 的 SSID 及密码填入并保存，之后 ESP8266 将联网，在路由器后台找到 ESP8266 的 IP 地址并在浏览器打开，打开后可以看到 WLED 的控制介面，选择「配置」→「LED 配置」，\n\n![ambilight_wled_setting2](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_wled_setting2.png)\n\n填写用到的灯泡总数，\n\n![ambilight_wled_setting3](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_wled_setting3.png)\n\n在这一页的下面的「变换」中取消勾选「淡入淡出」，配置好之后保存。\n\n![ambilight_wled_setting4](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_wled_setting4.png)\n\n### Hyperion 配置\n\n在浏览器打开 Hyperion 配置页面 `http://群晖地址:6080` ，选择「配置」→「LED 硬件」的「LED 控制端」标签中，控制类型选择「wled」，之后填入灯泡总数及 IP 地址，\n\n![ambilight_hyperion1](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_hyperion1.png)\n\n在「LED 层」标签中填入上、下、左、右的灯泡数目及输入位置，点击保存可以在右侧看到预览，调整参数使预览符合真实的灯泡位置，\n\n![ambilight_hyperion2](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_hyperion2.png)\n\n在「配置」→「网络服务」中，确保「端口缓冲服务器」打开并开放端口。\n\n![ambilight_hyperion3](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_hyperion3.png)\n\n### Android TV 配置\n\nAndroid TV 需要安装  [hyperion-android-grabber](https://github.com/abrenoch/hyperion-android-grabber) 这个应用，到[这里](https://github.com/abrenoch/hyperion-android-grabber/releases/tag/v1.0)下载好 apk 安装包并导入Android TV 安装，安装完成打开可以自动搜索到 Hyperion 服务器，之后在配置中需要修改横向、纵向灯泡数目，以及消息优先级调整为 `150`。\n\n![ambilight_tv_setting1](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_tv_setting1.png)\n\n保存后若灯带随屏幕示例颜色变化而变化说明配置成功。\n\n![ambilight_tv_setting2](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_tv_setting2.png)\n\n### 应用兼容性\n\n比较遗憾的是，这种无线连接的方式无法抓取有 DRM 的内容。大多数流媒体应用可以在选择电影或剧集时抓取到屏幕边缘信息，播放媒体时就无法显示。\n\n默认官方 Youtube 应用无法抓取，第三方 [Smart YouTube TV](https://smartyoutubetv.github.io/) 可以。\n\n## 在电脑上安装\n\n在电脑（PC、Mac 都可以）上可以通过 [Prismatik](https://github.com/psieg/Lightpack) 这款应用实现 Ambilight 效果，无需配置 Hyperion。\n\n安装方法与在电视上安装方法相似，需要在电脑屏幕边缘装好灯带，之后到[这里](https://github.com/psieg/Lightpack/releases/)下载安装 Prismatik，打开设置，在「设备」中选择「运行配置向导」，\n\n![ambilight_pc_setting1](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_pc_setting1.png)\n\n填入 WLED 的 IP 地址，\n\n![ambilight_pc_setting2](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_pc_setting2.png)\n\n填入灯泡总数、顶部、两侧、底部灯泡数、开始灯泡，点击「应用」可预览效果，\n\n![ambilight_pc_setting3](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_pc_setting3.png)\n\n设置完成后选中「屏幕抓取」模式配置完成。\n\n## 接入 Home Assistant\n\n### WLED 接入\n\n正常情况下 Home Assistant 可以自动发现 WLED，之后 WLED 可以以彩色灯泡接入 HomeKit、Google Home 和 Alexa。\n\n![ambilight_wled_integration](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_wled_integration.png)\n\n### Hyperion  接入\n\nHyperion 可以以 integration 的形式接入，在 Home Assistant 「配置」→「 Integration」中点击「添加  Integration」，搜索「hyperion」，填入群晖 IP 地址即可。\n\n![ambilight_hyperion_integration1](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_hyperion_integration1.png)\n\n接入后可以控制 Hyperion 开关。\n\n![ambilight_hyperion_integration2](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ambilight_hyperion_integration2.png)\n\n","tags":["Home Assistant"]},{"title":"群晖做超酷的录像机——免订阅+隐私保护+接入 HA","url":"/cam/","content":"\n![cam_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/cam_cover.png)\n\n[《黑镜》](https://www.netflix.com/title/70264888) 里有好几个关于摄像头隐私的故事，在新世纪，摄像头带来了「方便」，也给带来隐私方面的挑战。隐私问题在超级大国熊猫国尤其是个大问题，当权者对被统治者有深深的恐惧，用尽全力获取被统治者的一切行踪。还会强制要求各种提供服务的厂商上传用户资料，其中一个知名的例子是强制苹果中国公司将服务器设在中国贵州。\n\n比较安全且方便地使用摄像头监控的方法之一是本地局域网控制查看摄像头，外网访问利用公网 IP+DDNS，同时拒绝摄像头联外网并停用云存储功能。可以达到这一目的的成熟方案之一是利用群晖的 [Surveillance Station](https://www.synology.com/zh-tw/surveillance)（[此处](https://demo.synology.com/zh-tw/surveillance?utm_source=feature&utm_medium=mobile)可以在线体验群晖 Surveillance Station），具有直觉操作的使用者界面，因应各类情境的应用程式（即时影像警报系统、时间轴录影回放、电子地图等），可透过内部或外部网络、电脑、手机随时随地存取。\n\n## 接入群晖\n\n### 使用旧手机\n\n可以直接使用旧手机摄像头接入群晖，接入方法非常简单。首先群晖安装好 Surveillance Station 套件(套件中心搜索 Surveillance Station 安装即可)，\n\n![cam_dsm_ss](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/cam_dsm_ss.png)\n\n手机下载安装好「[LiveCam](https://www.synology.com/zh-tw/surveillance/feature/mobile#LiveCam)」，填入群晖地址、用户名、密码即可，群晖会自动连接这个摄像头。\n\n![cam_dsm_livecam](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/cam_dsm_livecam.png)\n\n### 使用摄像头\n\n#### 1、摄像头推荐\n\n群晖原生支援所有主流影音编码，及来自逾 130 个厂牌、超过 7600 种摄影机及录影服务器，[在此](https://www.synology.com/zh-tw/compatibility/camera)可以检视完整的相容性清单。\n\n群晖支援 [ONVIF](https://www.onvif.org) (the Open Network Video Interface Forum）协议，ONVIF 是一个通用协议，只要摄像头支援 ONVIF 大概率可以接入群晖。\n\n目前 CP 值比较高、支持 ONVIF 的摄像头是 [TP-LINK 的摄像头](https://security.tp-link.com.cn/)。小弟手里有一台 [TP-LINK 的 TL-IPC43CA](https://www.tp-link.com.cn/product_1917.html?smb)：\n\n- 支持 ONVIF 协议；\n- 最高分辨率 2304*1296，可输出300万像素画面；\n\n- 支持云台转动，水平 360°，垂直 114°；\n- 带夜视功能，夜视带彩；\n- 支持 WiFi 连接与以太网口连接；\n- CP 值高，淘宝售价 ￥130 左右。\n\n#### 2、利用 ONVIF 接入\n\n下载 TP-LINK 摄像头的手机端 [TP-LINK 安防](https://security.tp-link.com.cn/service/detail_download_6737.html)（注意此应用在美区 App Store 及Google Play 未上架），手机安装好后用**电子邮箱**注册，按步骤配置网络。\n\n电脑浏览器打开群晖 Surveillance Station，打开应用程序 IP Camera，点击「添加」→「添加摄像头」，\n\n![cam_add1](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/cam_add1.png)\n\n选择「快速配置」，\n\n![cam_add2](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/cam_add2.png)\n\n在添加页面中的 IP 地址点击搜索图标，\n\n![cam_add3](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/cam_add3.png)\n\n群晖会找到局域网内支持的摄像头，\n\n![cam_add4](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/cam_add4.png)\n\n默认 TP-LINK 摄像头用户名为 `admin`，密码为空，点击下一步即可添加。\n\n![cam_add5](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/cam_add5.png)\n\n添加摄像头之后可以实时查看摄像头串流，制定录像规则等等。手机可以下载 [DS cam](https://www.synology.com/zh-tw/surveillance/feature/mobile) 实时查看串流和录像。\n\n需要注意的是，群晖 Surveillance Station 默认只支持两个摄像头接入，2 个以上接入需要授权。\n\n#### 3、必做调整\n\n##### ① 分辨率调整\n\n小弟的这个摄像头接入群晖默认分辨率达不到  2304*1296，其中的原因是摄像头默认开启 H265，而群晖只支持 H264，需要修改摄像头配置，步骤如下：\n\n电脑浏览器输入摄像头 IP 地址进入摄像头配置页面，用户名 `admin`，密码默认为空，在`设置→摄像头→视音频`中调整视频编码为  `H264`，分辨率为  `2304*1296` 并保存。\n\n![cam_resolution1](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/cam_resolution1.png)\n\n在群晖摄像头配置中，选择 `设备设置→视频`，在「串流 1 」中，分辨率选择  `2304*1296` 并保存。\n\n![cam_resolution2](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/cam_resolution2.png)\n\n设置完成后即可看到 2304*1296 的高画质画面。\n\n② 云台参数调整\n\n群晖支持云台控制，但在这款摄像头上有问题，点一下方向按钮会一直转到底，而不是一段距离一段距离地移动，可以通过以下步骤修改配置：\n\n在群晖摄像头列表中，点击`配置→导出`，选择导出路径、摄像头，\n\n![cam_export](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/cam_export.png)\n\n导出完成后，在导出的文件夹中找到 `.Exp@SSCap` 路径下的 `名称_IP 地址`文件，\n\n![cam_export2](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/cam_export2.png)\n\n用文本编辑器打开，将里面的 pan、tilt、zoom 、focus 参数改为 `absolute`\n\n```\npan = absolute\ntilt = absolute\nzoom = absolute\nfocus = absolute\n```\n\n![cam_export3](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/cam_export3.png)\n\n修改完成之后在摄像头列表点击`配置→导入`，\n\n![cam_inport1](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/cam_inport1.png)\n\n选择修改后的配置，\n\n![cam_inport2](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/cam_inport2.png)\n\n设置完成后可以测试是否可以一段距离地移动。\n\n## 隐私保护\n\n摄像头有很大的隐私隐患，尤其是在熊猫国，中国各厂商的摄像头只要联网都非常不安全，比较简单有效的处理方法是禁止摄像头联网，各种控制管理在群晖进行。\n\nOpenWrt 系统禁止摄像头联外网方法很简单，在`网络→防火墙→自定义规则`中添加一条规则就可以（AA:BB:CC:DD:EE:FF 为摄像头 MAC 地址）：\n\n```\niptables -I FORWARD  -m mac --mac-source AA:BB:CC:DD:EE:FF -j DROP\n```\n\n![cam_firewall](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/cam_firewall.png)\n\n添加完成可以打开「TP-LINK 安防 App」 ，若显示「未连接」说明规则生效。可以安心使用摄像头。\n\n添加规则之后摄像头无法连接外网，但仍可在局域网被访问，使用群晖各端可以查看摄像头，利用公网 IP+ DDNS 或群晖自带 QuickConnect 可以外网访问。\n\n## 接入 Home Assistant\n\n### 利用群晖接入\n\n可以通过群晖组件直接将 摄像头接入 Home Assistant，在 integration 中选择添加，搜索 `synology`，填入群晖地址、用户名、密码，\n\n![cam_ha](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/cam_ha.png)\n\n添加群晖组件后即可看到摄像头，如果接入的 ONVIF 摄像头有支援传感器也会一起显示（小弟的这款没有），\n\n![cam_ha2](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/cam_ha2.png)\n\n另外还有一个群晖 Surveillance Station 「回家模式」开关传感器。\n\n![cam_ha3](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/cam_ha3.png)\n\n### motionEye 插件\n\n另外可以利用 motionEye 插件查看摄像头 ，在 Supervisor 中找到 motionEye 插件并安装，\n\n![cam_motioneye1](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/cam_motioneye1.png)\n\n安装完成之后打开 UI，之后添加摄像头，选择「网络摄像头」，URL 填入`rtsp://摄像头 IP:554/stream1`即可添加。\n\n![cam_motioneye2](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/cam_motioneye2.png)\n\n\n\n\n\n\n\n\n\n\n","tags":["Home Assistant"]},{"title":"Google 艺文的使用","url":"/google_art/","content":"\n![google_art_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/google_art_cover.png)\n\n## 艺术的慰藉\n\n进入 20 世纪，科学强势发展，宗教影响日益式微。信仰宗教的人减少，但人们面对生命的终极课题越来越困惑，解决这个问题的途径之一是借助于艺术，才子作家阿兰·德波顿在[《艺术的慰藉》](https://www.books.com.tw/products/0010642359)一书中曾论述艺术有七大功能：\n\n1.矫正记忆的缺陷\n\n艺术能够把经验的果实变得令人难忘，而且还能不断以新面貌重现。\n\n2.散播希望\n\n艺术让我们随时都能看得到令人愉悦开心的事物。\n\n3.呈现有尊严的哀愁\n\n艺术提醒我们，哀愁在美好人生中也占有一席之地，因此我们比较不会对自己遭遇的困难感到恐慌。\n\n4.协助我们取得平衡\n\n艺术以异常清晰的象征体现我们良好特性的本质，引导我们發挥自己最优秀的潜力。\n\n5.引导我们认识自我\n\n艺术能够帮助我们辨识出对我们具有核心重要性，却又难以形诸言词的事物。我们可以拿起艺术作品，以困惑但认真的态度说：「这就是我。」\n\n6.扩展我们的经验\n\n艺术是他人的经验透过极度精致的方式累积而成的结果。我们在艺术中可以找到其他文化的鲜明范例，因此亲近艺术作品能够扩展我们对自己以及世界的概念。\n\n7.唤醒麻木的心灵\n\n艺术能够剥开我们的外壳，把我们从习以为常的泥沼中拉出来，不再对自己身周的一切视而不见。\n\n## 介绍\n\n[Google Arts & Culture](https://artsandculture.google.com/) 是 Google 开發的在线艺术平台，各地区博物馆、艺廊等组织合作，利用各种技术将各博物馆实景、艺术作品数字化，提供艺术品的导览与简介。Google Arts & Culture 可以直接在浏览器使用，也可以下载 App 使用。\n\nGoogle 已与世界上大部分博物馆合作（包括中国），将成千上万的艺术品数字化，可以按照时间、色彩、主题等等推荐筛选。\n\n![google_art_pic](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/google_art_pic.png)\n\n在艺术品详情可以通过放大查看高清照片，也可以通过 360°街景查看，或者通过 AR（虚拟现实）查看。\n\n![google_art_view](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/google_art_view.png)\n\n另外，Google Arts & Culture App 还提供了艺术滤镜、艺术转化、艺术自拍等等有趣的小功能。\n\n## 使用\n\n有以下途径可以使用 Google Arts & Culture 的高清艺术照作为壁纸或屏保：\n\n1、Android TV\n\n- 可以通过 Chromecast 将艺术高清图投放至 Android TV 大屏查看，支持拖拽、放大缩小查看细节。\n\n![google_art_chromecast](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/google_art_chromecast.jpg)\n\n- 可以设置 Google Arts & Culture 艺术图作为屏保。在 Google Home App 中找到 Android TV 设置，打开「Ambient Mode」，选择「Art gellery」，之后选择「Fine art」。\n\n![google_art_tv](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/google_art_tv.png)\n\n2、Google Nest Hub\n\nGoogle Nest Hub 也支持 Chromecast 和设置屏保，方法与 Android TV 一致。\n\n3、Chrome 浏览器\n\nChrome 浏览器中可以使用 Google 官方出的 [Google Arts & Culture 插件](https://chrome.google.com/webstore/detail/google-arts-culture/akimgimeeoiognljlfchpbkpfbmeapkh)，可以设置每打开一个新标签页显示一张艺术图片。另外，遇见喜欢的艺术图片可以点击查看详情或者加入收藏在其他端查看。目前此插件仅支持 Chrome 浏览器。\n\n![google_art_chrome](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/google_art_chrome.jpg)\n\n4、MacOS\n\nMacOS 可以使用 [Artpaper](https://apps.apple.com/us/app/artpaper-new-wallpapers-daily/id1028838684) 作为桌面壁纸。\n\n![google_art_artpaper](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/google_art_artpaper.jpg)"},{"title":"HA 联动像素钟","url":"/awtrix_api/","content":"\n![awtrix_api_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/awtrix_api_cover.png)\n\n小弟曾做过一个像素钟 [LaMetric Time](https://lametric.com/en-US) 的 DIY 替代品 AWTRIX，有 8*32 个像素，可以显示像素动画、文字信息的等等。比较酷的是， AWTRIX 支持外部控制，这样就可以与其他设备联动。\n\nAWTRIX 可以通过 HTTP 和 MQTT 两种方式从外部控制，控制的元素很多，从显示图标、显示特定文字等都可以，详见 AWTRIX 文档 [API 部分](https://awtrixdocs.blueforcer.de/#/en-en/api)。以下实例介绍 AWTRIX 与 Home Assistant 的联动：\n\n## 利用 HTTP\n\n实例：通过 HTTP 定时控制像素灯泡开关\n\nAWTRIX 某种意义算是一个灯泡组合的信息版，可惜这个灯泡组合不能方便地打开/关闭显示屏幕，有大大利用 HTTP [将 AWTRIX 虚拟成一个灯光开关接入](https://bbs.iobroker.cn/t/topic/3509)，将以下代码复制粘贴至 configuration.yaml 文件即可（记得将 AWTRIX-SERVER_IP 替换成实际 IP ）：\n\n```yaml\nlight:\n  - platform: template\n    lights:\n      theater_volume:\n        friendly_name: Steam\n        turn_on:\n          service: shell_command.turn_on_123\n        turn_off:\n          service: shell_command.turn_off_541\n\nshell_command:\n  turn_off_541: 'curl --header \"Content-Type: application/json\" --request POST --data {\"power\":false} http://[AWTRIX-SERVER_IP]/api/v3/basics'\n  turn_on_123: 'curl --header \"Content-Type: application/json\" --request POST --data {\"power\":true} http://[AWTRIX-SERVER_IP]:7000/api/v3/basics'\n\n```\n\n加入虚拟开关后，就可以通过自动化控制像素时钟的显示与关闭，如可以设置定时开关屏幕，每天 7 点自动打开屏幕， 晚上 11 点关闭屏幕，自动化配置参考：\n\n```yaml\n- id: 'xxxxx'\n  alias: awtrix on\n  description: ''\n  trigger:\n  - platform: time\n    at: '7:00'\n  condition: []\n  action:\n  - service: switch.turn_on\n    data: {}\n    entity_id: switch.original_xiaomi_mi_smart_wifi_socket\n  mode: single\n```\n\n```yaml\n- id: 'xxxxx'\n  alias: awtrix off\n  description: ''\n  trigger:\n  - platform: time\n    at: '23:00'\n  condition: []\n  action:\n  - service: shell_command.turn_off_541\n    data: {}\n  mode: single\n```\n\n## 利用 MQTT\n\n实例：通过 MQTT 实现扫描特定 NFC 标签（或其他条件）显示「降落文字」（falling test）\n\n首先可以在 AWTRIX 设置好 MQTT 服务器，设置成功在 MQTT 服务器中可以看到 awtrix 相关的主题，AWTRIX 基本主题是`awtrix`。\n\n这里示例扫描特定 NFC 标签（或其他条件）显示「降落文字」，自动化配置参考：\n\n```yaml\n- id: 'xxxxx'\n  alias: Tag blue is scanned\n  description: ''\n  trigger:\n  - platform: tag\n    tag_id: xx-xx-xx-xx\n  condition: []\n  action:\n  - service: mqtt.publish\n    data:\n      topic: awtrix/notify\n      payload: '{\"name\":\"TestNotification\", \"force\":true, \"repeat\":10,\"fallingText\":\"keep cool\", \"color\":[0, 255, 0]}'\n  mode: single\n```\n\n扫描 NFC 标签后， AWTRIX 先绿色字体显示「keep」，之后掉落显示「cool」。","tags":["Home Assistant"]},{"title":"自制 NFC 读卡器接入 HA","url":"/nfc_reader/","content":"\n![nfc_reader_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/nfc_reader_cover.png)\n\n\nNFC（Near-field communication，近距离无线通讯）可以作为一种很好的验证方式，以一种方便的形式实现一些自动化，比如：\n\n- 扫描 NFC 卡之后播放特定的音乐列表清单\n- 利用 NFC 标籤激活房间中的场景\n- 通过 NFC 卡开锁\n- 读取后 NFC 标签打开设备详情页\n- 等等\n\n现在人人随身携带手机，手机也自带 NFC 功能，NFC 使用场景更加充满实用性和想象力。Home Assistant 在 App 中已为标籤编写特殊的 Home Assistant URL扫描 NFC 标籤后，可以触發 Home Assistant 应用并将标识符發送到 Home Assistant 实例处理。\n\n不过不是所有手机都支持 NFC（如 iPhone 需要 iPhone XS、XR、iPhone 11 及以上可以后台读取 NFC 卡片）。有大大利用 ESPHome [自制了一个 NFC 读卡器](https://github.com/adonno/tagreader)，小弟跟着步骤踩了一遍坑，以下是步骤：\n\n## 所需材料\n\n1、ESP8266（或 D1 Mini，D1 mini 体积更小）\n2、PN532 NFC 读卡器（PN532 可能是最好的 NFC 读写模块）\n3、WS2812（非必须，用作读卡后的 LED 灯泡反馈）\n4、蜂鸣器（非必须，作为读卡后的声音反馈）\n5、3D 打印外（非必须），地址在[这里](https://github.com/adonno/tagreader/blob/master/STLs) \n6、杜邦线若干\n\n## 准备工作\n\n如果使用 D1 Mini，可能需要焊接。\n\n另外，确保将 PN532 上的开关设置为以下开关状态：\n开关1：打开（向上）\n开关2：关闭（向下）\n\n![nfc_reader_pn532](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/nfc_reader_pn532.png)\n\n## 刷机\n\n确保 ESPHome 版本在 1.16.0 及以上，在 ESPHome 中新增一个 ESP8266 设备，在配置中加入以下代码（若无 WS2812 和蜂鸣器可以删去相应代码）：\n\n```yaml\nsubstitutions:\n  devicename: tagreader\n  friendly_name: TagReader\n\n\n# 如果有蜂鸣器，连接成功后在 api 中通知\n  on_boot:\n    priority: -10\n    then:\n    - wait_until:\n        api.connected:\n    - logger.log: API is connected!\n    - rtttl.play: \"success:d=24,o=5,b=100:c,g,b\"\n    - light.turn_on:\n        id: activity_led\n        brightness: 100%\n        red: 0%\n        green: 0%\n        blue: 100%\n        flash_length: 500ms\n\n# 在 HA 中虚拟一个可以控制 LED 灯和蜂鸣器的开关\nswitch:\n- platform: template\n  name: \"${friendly_name} Buzzer Enabled\"\n  id: buzzer_enabled\n  icon: mdi:volume-high\n  optimistic: true\n  restore_state: true\n- platform: template\n  name: \"${friendly_name} LED enabled\"\n  id: led_enabled\n  icon: mdi:alarm-light-outline\n  optimistic: true\n  restore_state: true\n\n\n# 启用 Home Assistant API\napi:\n  services:\n  - service: rfidreader_tag_ok\n    then:\n    - rtttl.play: \"beep:d=16,o=5,b=100:b\"\n\n  - service: rfidreader_tag_ko\n    then:\n    - rtttl.play: \"beep:d=8,o=5,b=100:b\"\n\n  - service: play_rtttl\n    variables:\n      song_str: string\n    then:\n    - rtttl.play: !lambda 'return song_str;'\n\n  - service: write_tag_random\n    then:\n    - lambda: |-\n        static const char alphanum[] = \"0123456789abcdef\";\n        std::string uri = \"https://www.home-assistant.io/tag/\";\n        for (int i = 0; i < 8; i++)\n          uri += alphanum[random_uint32() % (sizeof(alphanum) - 1)];\n        uri += \"-\";\n        for (int j = 0; j < 3; j++) {\n          for (int i = 0; i < 4; i++)\n            uri += alphanum[random_uint32() % (sizeof(alphanum) - 1)];\n          uri += \"-\";\n        }\n        for (int i = 0; i < 12; i++)\n          uri += alphanum[random_uint32() % (sizeof(alphanum) - 1)];\n        auto message = new nfc::NdefMessage();\n        message->add_uri_record(uri);\n        ESP_LOGD(\"tagreader\", \"Writing payload: %s\", uri.c_str());\n        id(pn532_board).write_mode(message);\n  - service: write_tag_id\n    variables:\n      tag_id: string\n    then:\n    - lambda: |-\n        auto message = new nfc::NdefMessage();\n        std::string uri = \"https://www.home-assistant.io/tag/\";\n        uri += tag_id;\n        message->add_uri_record(uri);\n        id(pn532_board).write_mode(message);\n  - service: clean_tag\n    then:\n    - lambda: 'id(pn532_board).clean_mode();'\n\n  - service: cancel_writing\n    then:\n    - lambda: 'id(pn532_board).read_mode();'\n\n\ni2c:\n  scan: False\n  frequency: 400kHz\n\npn532_i2c:\n  id: pn532_board\n  on_tag:\n    then:\n    - homeassistant.tag_scanned: !lambda |\n        if (!tag.has_ndef_message()) {\n          ESP_LOGD(\"tagreader\", \"No NDEF\");\n          return x;\n        }\n        auto message = tag.get_ndef_message();\n        auto records = message->get_records();\n        for (auto &record : records) {\n          std::string payload = record->get_payload();\n          size_t pos = payload.find(\"https://www.home-assistant.io/tag/\");\n          if (pos != std::string::npos) {\n            return payload.substr(pos + 34);\n          }\n        }\n        ESP_LOGD(\"tagreader\", \"Bad NDEF, fallback to uid\");\n        return x;\n    - if:\n        condition:\n          switch.is_on: buzzer_enabled\n        then:\n        - rtttl.play: \"success:d=24,o=5,b=100:c,g,b\"\n    - if:\n        condition:\n          switch.is_on: led_enabled\n        then:\n        - light.turn_on:\n            id: activity_led\n            brightness: 100%\n            red: 0%\n            green: 100%\n            blue: 0%\n            flash_length: 500ms\n\n# 定义蜂鸣器输出所在端口\noutput:\n- platform: esp8266_pwm\n  pin: D7\n  id: buzzer\n\nbinary_sensor:\n  - platform: status\n    name: \"${friendly_name} Status\"\n\n# 定义蜂鸣器作为 RTTTL 输出\nrtttl:\n  output: buzzer\n\n# LED 配置\nlight:\n- platform: fastled_clockless\n  chipset: WS2812\n  pin: D8\n  default_transition_length: 10ms\n  num_leds: 1\n  rgb_order: GRB\n  id: activity_led\n  name: \"${friendly_name} LED\"\n  restore_mode: ALWAYS_OFF\n```\n\n之后编译并下载固件，使用 [NodeMCU PyFlasher](https://github.com/marcelstoer/nodemcu-pyflasher) 将固件刷入 ESP8266/D1 Mini。\n\n## 连线\n\n按照以下将 ESP8266 与 PN532 连线：\n\n| PN532 | ESP8266 |\n| ----- | ------- |\n| GND   | G       |\n| VCC   | VIN     |\n| SDA   | D2      |\n| SCL   | D1      |\n\nLED 等与蜂鸣器可以按照以下连线：\n\n![nfc_reader_schematics](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/nfc_reader_schematics.png)\n\n最终效果如下：\n\n![nfc_reader_inside](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/nfc_reader_inside.jpg)\n\n## 使用\n\n确保 Home Assistant版本在 0.115 及以上，待 NFC 读取器连接到与 HA 同一网络，Home Assistant 会自动發现 NFC 读取器。\n\n之后从 Home Assistant 中的标籤界面中可以管理扫描的标籤（在 config->tag 下可以找到。\n\n![nfc_reader_ui](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/nfc_reader_ui.gif)\n\n\n","tags":["Home Assistant"]},{"title":"善用悲观的力量——Using Ancient Philosophy to Live a Modern Life","url":"/stoic/","content":"\n![stoic_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/stoic_cover.png)\n\n> 如果想要一个新点子，读一本古书吧。\n>\n> ──摘自伊凡．巴夫洛夫（等人）\n\n几个世纪以来，宗教推播着黑暗的讯息，佛教告诉信徒人生是一场苦痛，基督教诉说着人类的堕落和人世不可避免的不完美。如今我们活在一个乐观的世界，商人尝试用欢乐向我们推销商品，科技的进步让我们对未来感到一切都会变得更美好。\n\n各种乐观的今日，我们面临更多的焦虑、诱惑、竞争，如同两千年前的古罗马人一样面临的羞辱、悲伤、衰老，但我们仍旧束手无策，饱受各种负面情绪所苦。\n\n心理学家威廉·詹姆士提出过一个等式:「幸福等于现实除以期待」，有两种方式可以实现快乐：改变现实，或改变期待。\n\n两千多年前，一个叫做斯多噶哲学学派尝试运用悲观思考的正面力量，解决人生困境。他们主张降低期待，每天会预演一些重要的课题：「人生永远会出错」「每个人多数时间都在烦恼和难过」「在生涯的重大选择上后悔是很平常的」「唯一『正常』的人是那些我们还不熟的人」「高兴超过 15 分钟是很困难的」「几乎所有的希望都会破灭」「平庸是普遍的」。斯多噶哲学发现，痛苦的元凶就是人类「贪得无厌」「习惯控制结果」的两大天性，让我们不知不觉丧失了享受简单事物的能力，而严重耗损了享受生活、感受快乐的能力。\n\n在斯多噶主义者眼中，「消极想像」可以消解填不满的欲望，「幽默自嘲」可以穿越羞辱与愤怒，「宿命论」可以战胜生命的悲苦与眼泪，我们应该努力剔除过度的欲望及有毒的情绪，实践素朴的极简生活，發现生命真正有价值的事物，学会保持心灵平静。\n\n斯多噶哲学强调用悲观的力量找回快乐的能力，提出五大极简心法，帮助我们恢復快乐的嗅觉：\n\n1、消极想像大满足\n\n斯多噶哲学倡导我们牢牢记住「万事皆无」，常常想像最坏的结果，想象失去，学会渴望早已拥有的事物，成为「成熟的」乐观主义者。改变我们的心智状态，增强对生活的享受，享受，却不执着，「勇于不敢，爱而无伤」。同时消除困境带来的心理痛苦，寻找出路活下去。\n\n2、控制二分心自在\n\n斯多噶主义认为，改变自己的欲望，是人生幸福的祕诀。我们应该学会将事物分成能控制与不能控制的，让爱控制的心学会断捨离。我们可以把事物分成由我们决定的，和不由我们决定的。我们不能够完全控制的事物，又有两种状况：我们可能完全无法控制（比如明天会不会出太阳），或者能够控制一些但不能完全控制（比如是否会赢得网球比赛）。\n\n![stoic_content1](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/stoic_content1.jpeg)\n\n对于我们无法完全控制的事物，我们不应该花时间和精力去关注。对于能部分控制的事物，我们应当将追求的目标放到内在，也就是「目标内在化」：把目标设定为尽力發挥到最佳水准，减少随后情绪上的苦恼。\n\n![stoic_content2](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/stoic_content2.jpeg)\n\n3、活在当下大智慧\n\n斯多葛哲学建议我们针对过去和现在採取宿命论的态度，牢记过去是不能改变的，思考过去，吸取教训，帮助建构未来。拥抱眼下这个时刻，拥抱宿命，摆脱不满足，学会享受现有的生活。\n\n4、锻鍊意志反快乐\n\n在斯多葛主义看来，进行消极想像，预想可能發生在我们身上的坏事，定期自寻不适、自找麻烦，延迟享受，培养自控力，锻鍊意志力，培养自我控制力，这样快乐便可以操之于己。\n\n5、反躬自省的实践\n\n斯多葛主义者建议我们定期对日常生活中的事件进行沉思，定期反省日常生活中的事件，像《沉思录》那样认真过生活。\n"},{"title":"电子版单向历使用","url":"/oneway/","content":"\n![oneway_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/oneway_cover.png)\n\n单向历是单向书店出的日历，开始是线上版，印成纸质版之后迅速流行，还带动了一波日历风潮。小弟觉得这个日历很酷，这个日历传递了小弟不具备但想拥有的品质：朴实、可爱、有趣、平和。上面的文字默默引导小弟以灵魂人的视角面对生活，醒目的日期提醒小弟生命有限，勇敢争取自己想要的。\n\n![oneway_pape](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/oneway_paper.jpeg)\n\n有些人买纸质日历追求生活的「仪式感」，小弟是个内心脆弱、将就过日子的粗糙人，觉得「仪式感」可有可无，偏好电子版日历。下面是使用电子版单向历的几种方法：\n\n## 单向历 App\n\n最简单的方法是安装「单向历」App，手机应用商店搜索下载即可。注意，App 中的文字内容和纸质版不一样。\n\n## 秒秒测日历\n\n小米下的[秒秒测](http://www.miaomiaoce.com/product.html)公司有出一款 [Eink 日历](https://shop41517656.m.youzan.com/wscgoods/detail/1y6m3h8gmm8qo)，其中有包含单向历。售价约 ￥200（物料成本大约 ￥100），Eink 屏幕、乐鑫 ESP32 芯片、微信 airkiss 联网方案，拆机图片详见这个[大大的帖子](https://www.mydigit.cn/forum.php?mod=viewthread&tid=133256)。另外，这个日历的文字内容与纸质版一致。\n\n![oneway_miaomiaoce](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/oneway_miaomiaoce.jpg)\n\n![oneway_miaomiaoce2](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/oneway_miaomiaoce2.png)\n\n## DIY\n\n### 获取单向历图片\n\n首先手机安装好抓包工具 [Thor](https://apps.apple.com/cn/app/id1210562295) 和单向历 App，启动抓包，打开单向历 App，可以得到某一天如 2020 年 10 月 29 日的线上版单向历的图片地址是 `https://img.owspace.com/Public/uploads/Download/2020/1029.jpg` 。\n\n![oneway_thor](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/oneway_thor.png)\n\n获取当天的线上版单向历图片，只要将相应的日期替换成当天之后下载即可。实现这个功能比较简单的办法是利用计划任务，以群晖为例：\n\n#### 建立外链文件夹\n\n借助 [Zdir](https://github.com/helloxz/zdir) 这个小工具可以建立外链文件夹。首先新建一个文件夹用来存放日历图片文件，打开群晖 Docker，在「注册表」中搜索「zdir」，选择「baiyuetribe/zdir」并下载，\n\n![oneway_docker1](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/oneway_docker1.png)\n\n待映像下载完成，映射路径到 `/var/www/html/var` ，\n\n![oneway_docker2](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/oneway_docker2.png)\n\n映射 80 端口，\n\n![oneway_docker3](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/oneway_docker3.png)\n\n之后在路由器中设置好端口映射。\n\n#### 添加计划任务\n\n打开群晖「控制面板」中的「计划任务」，创建一条用户自定义脚本，\n\n![oneway_task1](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/oneway_task1.png)\n\n在脚本中设置以下：\n\n```shell\n#!/bin/bash\ncd /volume1/8t/share/oneway # 完整路径\na=$(date +\"%Y/%m%d\") \ncurl -o calendar.jpg http://img.owspace.com/Public/uploads/Download/$a.jpg\n```\n\n![oneway_task2](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/oneway_task2.png)\n\n之后运行一次测试是否正常，之后设置每天 0 点运行。到此可以得到一个图片的地址，类似 `http://<群晖地址>:<端口号>/var/oneway/calendar.jpg`\n\n### 屏幕显示\n\n#### 通过 ESP8266 + Eink 屏幕\n\nESP8266 作为控制，Eink 屏幕输出日历图片，可以实现秒秒测日历的近似效果。比较简单的搭建方法是利用 [ESPHome](https://esphome.io)，需要准备的材料：ESP8266 开发版、Eink 屏幕、Eink 屏幕确定版，参考 [Eink 屏幕输出](https://esphome.io/components/display/waveshare_epaper.html)连线、定义输出设备，参考 [ESPHome 显示](https://esphome.io/components/display/index.html)配置图片显示。\n\n这种方法小弟没有具体尝试，使用时可能要挑选合适大小的屏幕（图片尺寸 691*1006 px）。这个方法比较酷的地方是显示什么完全自由，不仅可以显示图片，显示内容可以完全自定义。\n\n#### 通过 Kindle（未越狱）\n\n首先点击 Kindle 首页右上角的「搜索」图标，输入 `~ds`，按回车键，调用隐藏的 `Disable Screensaver` 命令。这样 Kindle 可以禁用休眠不锁屏。（注意重启 Kindle 失效）。\n\n在浏览器输入图片地址 `http://<群晖地址>:<端口号>/var/oneway/calendar.jpg`，之后双击图片即可居中放大显示。注意，这个「日历」不会自动刷新，需要明天点击「刷新」按钮手动刷新（意外地拥有精致上流人士才有的「仪式感」）\n\n![oneway_kindle](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/kindle_calendar.jpeg)\n\n#### 其他\n\n因为我们最终得到的是一个固定的链接，所以能用的地方很多，如用在 iOS 上的 Widget 上、Home Assistant 的图片组件等等。\n\n"},{"title":"使用 Bitwarden 搭建密码管理","url":"/bitwarden/","content":"\n![bitwarden_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/bitwarden_cover.png)\n\n\n使用密码管理工具管理密码理由很多，最主要的是方便、安全。Bitwarden 是一个开源的密码管理服务，全平台支持，介面简洁，前后端均开源（Telegram 仅客户端开源）功能全面，支持两步验证（Lastpass 付费版都不支持的功能）、团队共享密码库，另外，支持将服务端部署在自己的服务器上。\n\n小弟尝试在群晖搭建 Bitwarden 服务端，期间踩了一些坑，主要参考了[这位大大的帖子](https://www.chiphell.com/thread-2006498-1-1.html)。\n\n## 准备工作\n\n首先需要配置好域名和 SSL 证书，最简单的是利用群晖自带功能申请一个二级域名，并为这个二级域名申请 SSL 证书。在群晖「控制面板」→「安全」中导出证书，导出得到一个压缩包备用，\n\n![bitwarden_export_ssl](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/bitwarden_export_ssl.png)\n\n新建一个文件夹存放密码数据库，一个文件夹存放 SSL 证书，并将导出的证书压缩包解压至这个文件夹。\n\n## Docker 安装\n\n打开群晖 Docker，在「注册表」 中搜索 `bitwardenr`，找到 `bitwardenrs/server` 并选择 latest 下载。\n\n![bitwarden_docker1](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/bitwarden_docker1.png)\n\n待镜像下载完成（有群晖系统通知），到「映像」中找到并双击打开下载好的镜像，点击「高级设置」，\n\n![bitwarden_docker2](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/bitwarden_docker2.png)\n\n在「卷」 中添加路径存放密码数据库的文件夹，装载路径为`/data`，添加存放 SSL 证书的文件夹，装载路径为 `/ssl`\n\n![bitwarden_docker3](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/bitwarden_docker3.png)\n\n\n在 「端口设置」中自定义容器端口 `80` 所对应的本地端口，删去自带的 `3021` 的容器端口，\n\n![bitwarden_docker4](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/bitwarden_docker4.png)\n\n在环境变量中添加 `ROCKET_TLS`，值为 `{certs=\"/ssl/cert.pem\",key=\"/ssl/privkey.pem\"}`（值里面的文件名改为自己的证书的文件名），点击应用保存。\n\n## 设置端口映射\n\n在路由器中设置好端口转发（确保有有公网 IP），OpenWrt 系统可以在「网络」→「防火墙」→「端口转发」中找到。\n\n![bitwarden_port](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt23_new.png)\n\n\n## 使用\n\n在浏览器中输入 `https:// <DDNS 域名>:<端口号>` 即可访问刚刚搭建的 Bitwarden 服务，\n\n![bitwarden_web](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/bitwarden_web.png)\n\n之后注册一个账号即可使用，注意千万牢记主密码。\n\n![bitwarden_web2](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/bitwarden_web2.png)\n\n各端客户端可以到官方下载专区 https://bitwarden.com/download/ 下载，使用方法大致相同，在设置中填写服务器地址即可。\n\n![bitwarden_url](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/bitwarden_url.png)\n\n## 维护\n\n如果用的是群晖申请的 Let's Encrypt 证书，3 个月证书会过期，过期之后重新导出证书文件覆盖即可。\n\n\n\n\n","tags":["Docker"]},{"title":"通过 Calibre-Web 制作图书在线管理","url":"/calibre/","content":"\n![calibre_cover.png](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/calibre_cover.png)\n\n随着时间推移，小弟渐渐不再局限在一个平台买电子书，[Kobo](http://kobo.com/)、美亚、中亚上都买过电子书，时间一长，图书的管理成了一个问题。\n\n小弟开始是用 [Calibre](https://calibre-ebook.com) 这个应用管理电子书，这个应用可以很好地完成去电子书 DRM、转换格式等等，缺点也有：1、图书管理限于本地电脑，无法全平台、外网访问图书资源库，图书本身也占用很多本地存储资源；2、转换格式时若图书文件较大会花很长时间，还会占用很多 CPU 资源，转换图书期间本地电脑几乎不能做其他的事。\n\n[Calibre-Web](https://github.com/janeczku/calibre-web) 是一个很酷的在线图书管理服务，基于网页，介面简洁，使用 Calibre 的数据库，可以在线转换格式、浏览、下载图书，如果设置好端口映射，就可以在外网全平台访问图书资源库了。下面是步骤：\n\n## 准备工作\n\nCalibre-Web 和 Calibre 使用相同的数据库，首次打开Calibre-Web 可能会因为没有数据库而报错，为此我们可以先建好一个空白数据库备用。在电脑上打开 Calibre，选择「资源库」→「切换/新增资源库」，\n\n![calibre_data.png](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/calibre_data.png)\n\n选择「在新路径新增资源库」并指定路径，之后可得到一个 `metadata.db` 文件，\n\n![calibre_data2](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/calibre_data2.png)\n\n在群晖任意路径新建一个文件夹用来存放图书，文件名任意，权限设置为可读写，\n\n![calibre_file](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/calibre_file.png)\n\n将上一步 `metadata.db` 文件拷贝至这个路径，\n\n## Docker 安装\n\n在群晖打开 Docker，在「注册表」中搜索「calibre」，选择「technosoft2000/calibre-web」这个映像并下载，\n\n![calibre_docker1](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/calibre_docker1.png)\n\n待下载完成（有群晖系统通知），在「映像」中找到「technosoft2000/calibre-web」双击，选择「高级设置」，\n\n![calibre_docker2](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/calibre_docker2.png)\n\n映射路径 `/books`，\n\n![calibre_docker3](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/calibre_docker3.png)\n\n端口根据自己情况设置或选择默认，之后应用设置。\n\n## 查看效果\n\n在浏览器输入地址 `http://hostname:<HTTP PORT>/opds`，输入用户名、密码，默认如下：\n\n```\n  用户名: admin\n  密码: admin123\n```\n\n登录之后可以更改密码、新增用户，或者上传书籍，设置 Kindle 推送，上传的书籍可以转化格式、epub 格式还可以在线阅读等等，都是图形化操作。\n\n![calibre_main_screen](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/calibre_main_screen.png)\n\n## 外网访问\n\n如果有公网 IP，可以在路由器中新增一个映射端口，这样就可以在外网访问了。\n\n","tags":["Docker"]},{"title":"洗衣完成发送短信","url":"/ha_washer/","content":"\n![ha_washer_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_washer_cover.png)\n\n小弟看到有大大有贴[洗衣机洗衣完成发通知的自动化](https://blog.yxwang.me/2019/07/washer-dryer-notification/)，通过插座功率的改变来判断洗衣完成，小弟偏好这种接外挂式的改造，感觉实用，跟着试了一番：\n\n## 准备工作\n\n### 接入插座\n\n这个自动化需要一个可以测功率的插座，小弟有一个「小米插座增强版」，有内置测功率的功能，首先要先将这个插座接入 Home Assistant，具体步骤可参考[这个大大的程序](https://github.com/syssi/xiaomiplug)，其中 token 可以通过[修改版米家 App](https://www.kapiba.ru/2017/11/mi-home.html)（仅支持 Android 系统，免 root）获取。\n\n之后在 `configuration.yaml` 文件中添加一个传感器获取插座功率：\n\n```yaml\nsensor:\n  - platform: template\n    sensors:\n      xiaomi_plug_power:\n        friendly_name: \"socket load power\"\n        unit_of_measurement: W\n        value_template: \"{{ state_attr('switch.xiaomi_chuangmi_plug_v3', 'load_power') }}\"\n```\n\n### 配置通知\n\nHome Assistant 通知方式很多，App 通知无需配置，另外还可以选短信通知、TTS 通知等。\n\n### 配置 Twilio 短信通知\n\n利用 Twilio 可以发送短信通知，注册试用即送 $15，美国手机号文字短信 $0.0075/条，中国手机号文字短信 $0.0280/条。\n\n首先到 [Twilio](https://www.twilio.com) 网站注册并试用，验证手机号后可以获得一个美国手机号，账号 SID 及Token。\n\n![ha_washer_twillo](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_washer_twillo.png)\n\n在 Home Assistant 的 `configuration.yaml` 文件中添加配置：\n\n```yaml\ntwilio:\n  account_sid: ACCOUNT_SID_FROM_TWILIO\n  auth_token: AUTH_TOKEN_FROM_TWILIO\n```\n\n试用账号只能给白名单的手机号，需要将接受短信的手机号添加至白名单，\n\n![ha_washer_twillo_phone](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_washer_twillo_phone.png)\n\n### 配置 TTS 通知\n\n若使用 Googlecast 设备访问地址是配置了 SSL 证书，需要添加 base_url，另外，建议添加与文字内容相同的语言（避免用说英文的方式说中文）。\n\n```yaml\ntts:\n  - platform: google_translate\n    base_url: https://<Home Assistant URL>:8123\n    language: 'en-us'\n```\n\n### 配置 Home Assistant 应用通知\n\n免配置，装好应用，允许应用通知权限即可。\n\n## 自动化\n\n自动化这里小弟搬运[大大的配置](https://blog.yxwang.me/2019/07/washer-dryer-notification/)，用两种状态（空闲和运转）描述洗衣机状态，在 `configuration.yaml` 文件中添加配置：\n\n```yaml\ninput_select:\n  washer_status:\n    name: Washer Status\n    options:\n      - Idle\n      - Running\n    initial: Idle\n```\n\n定义虚拟的洗衣机传感器，\n\n```yaml\nsensor:\n  - platform: template\n    sensors:\n      washer_status:\n        value_template: '{{ states.input_select.washer_status.state}}'\n        friendly_name: 'Washer Status'\n```\n\n自动化脚本一：检测到电量后的更新洗衣机状态为运转，10 瓦作为运转开始的阈值。\n\n```yaml\nalias: Set washer active when power detected\ntrigger:\n  - platform: numeric_state\n    entity_id: switch.xiaomi_chuangmi_plug_v3\n    value_template: '{{ state_attr(''switch.xiaomi_chuangmi_plug_v3'', ''load_power'') }}'\n    above: '10'\ncondition:\n  - condition: or\n    conditions:\n      - condition: state\n        entity_id: sensor.washer_status\n        state: Idle\naction:\n  - service: input_select.select_option\n    data:\n      entity_id: input_select.washer_status\n      option: Running\nmode: single\n```\n\n自动化脚本二：洗衣机用电低于 3 瓦且超过 1 分钟以上后，把状态切换成空置并通过 Twilio 发送短信通知、应用通知、TTS。\n\n```yaml\nalias: Set washer inactive\ntrigger:\n  - platform: numeric_state\n    entity_id: switch.xiaomi_chuangmi_plug_v3\n    value_template: '{{ state_attr(''switch.xiaomi_chuangmi_plug_v3'', ''load_power'') }}'\n    below: '3'\n    for: '0:01:00'\ncondition:\n  - condition: or\n    conditions:\n      - condition: state\n        entity_id: sensor.washer_status\n        state: Running\naction:\n  - service: input_select.select_option\n    data:\n      entity_id: input_select.washer_status\n      option: Idle\n  - service: notify.sms\n    data:\n      message: 'The Washer is finished!'\n      target:\n        - '+8613012345678'\n        - '+8613033333333'\n  - service: tts.google_translate_say\n    data:\n      message: 'The Washer is finished!'\n    entity_id: media_player.bedroom_speaker\n  - service: notify.notify\n    data:\n      title: The Washer is finished\n      message: 'The Washer is finished!' \nmode: single\n```\n\n![ha_washer_notify](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_washer_notify.png)","tags":["Home Assistant"]},{"title":"窗帘快速接入 HA——免去换轨 超快接入","url":"/ha_curtain/","content":"\n![ha_curtain_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_curtain_cover.png)\n\n小弟觉得窗帘接入自动化还是有用的，早上打开窗帘可以更好地醒来，晚上关掉窗帘在黑暗环境也容易睡眠。不知因为什么，市面上大部分窗帘产品感觉都被带偏了，大多数都需要换轨道，安装繁琐，这一点对租房者不友好。\n\n偶然发现了 [Switchbot](https://www.switch-bot.com/) 有出 [Switchbot Curtain](https://www.switch-bot.com/products/switchbot-curtain) ，安装简单，无需更换轨道，感觉这样的产品更适合自己。\n\n小弟买的是淘宝的一款类似产品，[Zemismart 的涂鸦窗帘](https://www.zemismart.com/products/zemismart-tuya-smart-curtain-driver-for-m17)，价格只要 Switchbot Curtain 不到一半价格，涂鸦 433 mHZ 方案。\n\n## 与 Switchbot Curtain 对比\n\n有大大做了[与 Switchbot Curtain 对比视频](https://youtu.be/3Gm5bBW1sRY)，Switchbot Curtain 全面超越 Zemismart 窗帘，只有两点微微胜出：\n\n1、价格\n\n单个 Switchbot Curtain， $89（约 ￥584）\n\n单个 Zemismart，国际友人 $50，淘宝 ￥200\n\n单论价格，Zemismart 还是占优势的，淘宝购买更划算。\n\n2、接入 HA 便利\n\nZemismart 有附 433mHz WiFi 转接头，内置涂鸦固件，可以方便接入 HA（Switchbot Curtain 目前似乎不能原生接入 Home  Assistant，Switchbot 可以）。\n\n## 安装\n\nZemismart 好像一直在做海外市场，Youtube 有一些产品的视频，小弟买的这个是刚刚生产出来的，下单到收货花了近两周，外包装是一个白色的盒子，一个字也没有，打开盒子，有附一个窗帘马达、一个 WiFi USB 转换器、一个 433 mHZ 遥控器、三对挂钩适配三种窗帘轨道、两节 18650 电池、一本英文说明书。\n\n![ha_curtain_stuff](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_curtain_stuff.jpg)\n\nZemismart 窗帘安装很简单，装上电池，将马达挂在窗帘末端，用遥控器测距就安装好了。\n\n插上  WiFi USB 转换器，在 Tuya Smart App 中配对就可以接入 WiFi 了。如果 App 上开光与实际不一致，可通过反挂马达同步。\n\n另外这个窗帘也支持「touch and go」的功能，稍用力反方向手动拉窗帘可以自动开合窗帘。\n\n尾部还有一个鸡肋的光敏电阻，可以感知光线强弱，当光线较弱时认定为「夜间模式」，会省一点电。\n\n## 接入 Home  Assistant 及其他\n\n### 利用 Tuya 组件\n\nHome Assistant 支持涂鸦固件，直接在 Configuration 中点击右下角的添加按钮，搜索 `tuya`，之后填入用户名、密码、国家代码即可。\n\n![ha_curtain_ha](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_curtain_ha.png)\n\n### 利用 localTuya 组件\n\n\n\n### OpenMQTTGateway 自制 RF 网关\n\n\n\n另外，还可以通过 [OpenMQTTGateway](https://docs.openmqttgateway.com) 自制 RF 网关本地控制。\n\nGoogle Assistant 和 Alexa 可以通过 Home Assistant，也可以通过涂鸦账号接入。\n\nHomekit 可以通过 Home Assistant 接入。\n\n![ha_curtain_app](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_curtain_app2.png)\n\n## 自动化\n\n接入 Home Assistant 可以方便地进行各种自动化，玩法很多。\n\n## 缺点\n\n1、做工不优\n\nZemismart 好像在供应链议价能力较弱，这个窗帘外壳看起来像比较廉价的塑料，连接处缝隙也较大，小弟的这个窗帘电池垫片第一次装电池就陷到内壳里了，只能拆开取出。\n\n2、噪音较大\n\n这个是比较大的缺点，这款窗帘开关噪音很大，这一点产品开发时好像完全没有考虑优化，每次开合窗帘都像一个巨大机械怪兽在行走。\n\n3、不支持百分比控制\n\n无论 Home Assistant、Google Assistant、Alexa或者 HomeKit 中，都只能控制开合，没法按百分比控制（HomeKit 中有显示百分比，但只能控制开合）。\n\n4、433 mHZ\n\n这款窗帘是比较过时的 433 mHZ，没有采用 Zigbee，不过厂家似乎在以后会出 Zigbee 的版本。","tags":["Home Assistant"]},{"title":"小米温度计接入 HA","url":"/ha_xiaomi_tem/","content":"\n![ha_xiaomi_tem_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_xiaomi_tem_cover.png)\n\n小米有出好几款温度计，借助 ESPHome 和 Zigbee2MQTT，可以将其接入 Home Assistant。\n\n## 圆形 Zigbee 温度计\n\n![../images/devices/WSDCGQ01LM.jpg](https://www.zigbee2mqtt.io/images/devices/WSDCGQ01LM.jpg)\n\n\n\n\n\n| 型号 | [WSDCGQ11LM](https://www.zigbee2mqtt.io/devices/WSDCGQ11LM.html)、[WSDCGQ12LM](https://www.zigbee2mqtt.io/devices/WSDCGQ12LM.html) |\n| ---- | ------------------------------------------------------------ |\n| 协议 | Zigbee                                                       |\n\n这个 Zigbee 圆形温度计好像是小米出的第一款温度计，可以通过 Zigbee2MQTT 快速接入，具体制作可参考小弟之前的文章。\n\n## 方形 Zigbee 温度计\n\n![../images/devices/WSDCGQ11LM.jpg](https://www.zigbee2mqtt.io/images/devices/WSDCGQ11LM.jpg)\n\n| 型号 | [WSDCGQ11LM](https://www.zigbee2mqtt.io/devices/WSDCGQ11LM.html)、[WSDCGQ12LM](https://www.zigbee2mqtt.io/devices/WSDCGQ12LM.html) |\n| ---- | ------------------------------------------------------------ |\n| 协议 | Zigbee                                                       |\n\nZigbee 方形温度计可以通过 Zigbee2MQTT 接入。\n\n## 圆形 LCD 蓝牙温度计\n\n![../../_images/xiaomi_lywsdcgq.jpg](https://esphome.io/_images/xiaomi_lywsdcgq.jpg)\n\n| 型号 | LYWSDCGQ |\n| ---- | -------- |\n| 协议 | 蓝牙     |\n\n这款温度计是蓝牙协议，圓形，分段 LCD 显示，可廣播溫度、濕度和電池電量，可通过 ESPHome 接入（参考小弟之前的文章），\n\n配置示例：\n\n```yaml\nsensor:\n  - platform: xiaomi_lywsdcgq\n    mac_address: \"7A:80:8E:19:36:BA\"\n    temperature:\n      name: \"LYWSDCGQ Temperature\"\n    humidity:\n      name: \"LYWSDCGQ Humidity\"\n    battery_level:\n      name: \"LYWSDCGQ Battery Level\"\n```\n\n## 长方形 E-Ink 蓝牙温度计\n\n![../../_images/xiaomi_lywsd02.jpg](https://esphome.io/_images/xiaomi_lywsd02.jpg)\n\n| 型号 | LYWSD02 |\n| ---- | ------- |\n| 协议 | 蓝牙    |\n\n长方形 E-Ink 蓝牙温度计有電子墨水顯示屏，可廣播溫度和濕度值，無電池狀態。可通过 ESPHome 接入，\n\n配置示例：\n\n```yaml\nsensor:\n  - platform: xiaomi_lywsd02\n    mac_address: \"3F:5B:7D:82:58:4E\"\n    temperature:\n      name: \"LYWSD02 Temperature\"\n    humidity:\n      name: \"LYWSD02 Humidity\"\n```\n\n\n\n## 圆形 E-Ink 蓝牙温度计\n\n![../../_images/xiaomi_cgg1.jpg](https://esphome.io/_images/xiaomi_cgg1.jpg)\n\n| 型号 | CGG1 |\n| ---- | ---- |\n| 协议 | 蓝牙 |\n\n圆形 E-Ink 蓝牙温度计带電子墨水顯示屏，可通过 ESPHome 接入，\n\n配置示例：\n\n```yaml\nsensor:\n  - platform: xiaomi_cgg1\n    mac_address: \"7A:80:8E:19:36:BA\"\n    temperature:\n      name: \"CGG1 Temperature\"\n    humidity:\n      name: \"CGG1 Humidity\"\n    battery_level:\n      name: \"CGG1 Battery Level\"\n```\n\n\n\n## 方形 LCD 蓝牙小温度计\n\n![../../_images/xiaomi_lywsd03mmc.jpg](https://esphome.io/_images/xiaomi_lywsd03mmc.jpg)\n\n| 型号 | LYWSD03MMC |\n| ---- | ---------- |\n| 协议 | 蓝牙       |\n\n这款温度计体积很小，方形，分段 LCD 显示，蓝牙协议（已加密），可廣播溫度、濕度和電池電量，需要先可获取 bindkey 再通过 ESPHome 接入。\n\n有大大写了[很赞的网页版程序](https://github.com/atc1441/ATC_MiThermometer)可以快速获取到 bindkey，步骤如下：\n\n在浏览器（推荐电脑版 Chrome）打开网页 https://atc1441.github.io/TelinkFlasher.html ，点击「connect」可以看到蓝牙设备列表，选中名称叫做「LYWSD03MMC」的设备并配对，若有多个，建议关闭其他，一个一个获取，\n\n![ha_xiaomi_tem1](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_xiaomi_tem1.png)\n\n配对后即可获取到 bindkey，记下备用。\n\n![ha_xiaomi_tem2](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_xiaomi_tem2.png)\n\n在电脑连接的蓝牙设备中可以获取到温度计的 MAC 地址。\n\n之后通过 ESPHome 可接入 Home Assistant，配置示例：\n\n```yaml\nsensor:\n  - platform: xiaomi_lywsd03mmc\n    mac_address: \"A4:C1:38:B1:CD:7F\"\n    bindkey: \"eef418daf699a0c188f3bfd17e4565d9\"\n    temperature:\n      name: \"LYWSD03MMC Temperature\"\n    humidity:\n      name: \"LYWSD03MMC Humidity\"\n    battery_level:\n      name: \"LYWSD03MMC Battery Level\"\n```\n","tags":["Home Assistant"]},{"title":"Google Home 作报时钟","url":"/ha_clock/","content":"\n![ha_clock_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_clock_cover.png)\n\n小弟一直很偏好报时钟，买过 [MUJI 的郭公报时钟](https://www.muji.com/sg/products/cmdty/detail/4547315832491)，还用宜家的表壳 DIY 过一个报时钟。\n\n![ha_clock_diy](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_clock_diy.png)\n\n这些都可以实现报时，但是程序都是写死的。MUJI 报时钟很有趣，还可以感应光线开关报时，小弟觉得这个条件不够完善，有时候很早天亮会被吵醒，晚上完睡觉会吵到别人。DIY 报时钟音乐但是固定的，每天的报时时间也是固定的。\n\n有 Home Assistant，Google Home 作为音频输出，才是最酷的报时钟。\n\n首先准备好音频文件，常用的报时铃声有[西敏寺钟声](https://www.youtube.com/watch?v=oTW01MlbBRM)、[孤挺花](https://www.youtube.com/watch?v=0nc6lx2i4-Q)、[念故乡](https://youtu.be/yDETNSA-u6M)等等，需要将音频文件设置成外链，小弟是借助 [zdir](https://github.com/helloxz/zdir) 这个工具。\n\n之后新建一个自动化，配置参考：\n\n```yaml\nalias: clock hour\ndescription: ''\ntrigger:\n  - platform: time\n    at: '8:00'\n  - platform: time\n    at: '9:00'\n  - platform: time\n    at: '10:00'\n  - platform: time\n    at: '11:00'\n  - platform: time\n    at: '12:00'\n  - platform: time\n    at: '13:00'\n  - platform: time\n    at: '14:00'\n  - platform: time\n    at: '15:00'\n  - platform: time\n    at: '16:00'\n  - platform: time\n    at: '17:00'\n  - platform: time\n    at: '18:00'\n  - platform: time\n    at: '19:00'\n  - platform: time\n    at: '20:00'\n  - platform: time\n    at: '21:00'\n  - platform: time\n    at: '22:00'\n  - platform: time\n    at: '23:00'\ncondition: []\naction:\n  - service: media_player.play_media\n    data:\n      entity_id: media_player.bedroom_speaker\n      media_content_id: 'http://drunkfish.i234.me:4444/var/clock.mp3'\n      media_content_type: music\nmode: single\n```\n\n","tags":["Home Assistant"]},{"title":"Chromecast 设备接入 HA","url":"/ha_chromecast/","content":"\n![ha_chromecast_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_chromecast_cover.png)\n\nHome Assistant 可以自动发现 Chromecast 设备，进行相关配置可以解锁更多玩法。\n\n## Chromecast 音频\n\nChromecast 音频包括 Google Home、Google Home mini、Google Nest Mini、Google Audio。\n\n### 充当 AirPlay 设备\n\n若安装的是 HASS 可以在 Add-on Store 中查找安装插件 `AirCast`，安装后不需配置，Google Home就可以当做一个 AirPlay 设备使用了。\n\n![ha_chromecast_aircast](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_chromecast_aircast.png)\n\n### TTS\n\nGoogle Home 支持 TTS，配置 SSL 证书后会出现无法播放的情况，有大大贴出[解决方法](https://community.home-assistant.io/t/tts-with-ssl-on/207875/3)，比较简单的办法是在 `tts` 组件下添加一个 `base_url`，地址是配置了 SSL 证书的Home Assistant 访问地址。\n\n```yaml\ntts:\n  - platform: google_translate\n    base_url: https://<Home Assistant URL>:8123\n```\n\n### 播放音频文件\n\n同样音频文件在配置 SSL 证书后也会出现无法播放，小弟的解决办法是通过 [zdir](https://github.com/helloxz/zdir) 这个小工具将音频文件转成外链。\n\n## Android TV\n\nAndroid TV 在 Home Assistant 也可以自动发现，配置 ADB 有更多的控制选项。\n\n首先在 Android TV 在手机「设置」→「关于」→「Build」中连按 7 次，打开「开发者选项」，\n\n![ha_chromecast_adb](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_chromecast_adb.png)\n\n在 Add-on Store 中查找安装插件 `ADB - Android Debug Bridge`，并配置 Android TV 地址，\n\n```yaml\ndevices:\n  - <Android TV IP Address>\nreconnect_timeout: 90\n```\n\n在 `configuration.yaml` 文件中添加配置：\n\n```yaml\nmedia_player:\n  - platform: androidtv\n    name: Android TV\n    host: <Android TV IP Address>\n    adb_server_ip: 127.0.0.1\n    adb_server_port: 5037\n```\n\n配置好之后重启 Home Assistant，首次连接到设备时，Android TV 上将出现一个对话框，要求批准连接。选中「始终允许来自此设备的连接」复选框，之后点击「确定」。\n\n在前端 UI 添加媒体播放器即可看到新配置的 Android TV，组件可以看到屏幕缩略图，点开可以控制音量、上一首、下一首等等，也可以直接打开某一个应用。\n\n![ha_chromecast_tv](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_chromecast_tv.png)\n\n\n\n\n\n","tags":["Home Assistant"]},{"title":"空调快速接入 HA","url":"/ha_ac/","content":"\n![ha_ac_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_ac_cover.png)\n\n[IRbaby](https://github.com/Caffreyfans/IRbaby) 是一个 ESP8266 空调红外方案，只需对其进行简单设置就可以快速部署在 Home Assisant。\n\n## 材料准备\n\n1、ESP8266\n\n![Nodemcu](http://irbaby.caffreyfans.top/src/nodemcu.jpg)\n\n2、红外二级管\n\n![红外二级管](http://irbaby.caffreyfans.top/src/ir_led.jpg)\n\n3、红外接收头（非必须）\n\n![红外接收头](http://irbaby.caffreyfans.top/src/ir_receiver.jpg)\n\n\n\n## 连线\n\n![接线](http://irbaby.caffreyfans.top/src/connect.jpg)\n\n\n\n```\n红外二级管长引脚接 gpio，短脚接地。如果不使用录码功能可忽略红外接收头。\n```\n\n## 开始使用\n\n1. 下载 [ESP8266 固件](https://github.com/Caffreyfans/IRbaby-firmware/releases)并烧写到设备，\n\n2. 设备上电，移动端搜索连接到 `ESP**` 信号，并对设备进行联网设置，\n\n3. 下载 [Android 客户端](https://github.com/Caffreyfans/IRbaby-android/releases)并运行，对设备进行 MQTT 和红外收发引脚设定。\n\n   参考引脚：\n\n   ![../_images/nodemcu_esp8266-full.jpg](https://esphome.io/_images/nodemcu_esp8266-full.jpg)\n\n4. 匹配电器，完成控制。\n\n||||\n|---|---|---|\n|![发现设备](http://irbaby.caffreyfans.top/src/discovery.jpg) |![配置信息](http://irbaby.caffreyfans.top/src/device_setting.jpg) |![添加电器](http://irbaby.caffreyfans.top/src/select.jpg) |\n|![匹配电器](http://irbaby.caffreyfans.top/src/parse.jpg) |![已有电器](http://irbaby.caffreyfans.top/src/main.jpg) |![导出MQTT](http://irbaby.caffreyfans.top/src/mqtt.jpg) |\n\n5、在 Home Assistant 中的 Integrations 中可以自动发现一个 MQTT 设备。\n\n![ha_ac_mqtt](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_ac_mqtt.png)","tags":["Home Assistant"]},{"title":"到家附近 自动开灯","url":"/ha_tracker/","content":"\n![ha_washer_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_tracker_cover.png)\n\n我们几乎每天回家都会开灯，Home Assistant 的设备跟踪功能可以帮助这个过程自动化。\n\nHome Assistant 的设备跟踪功能可以判定在家、离家状态有很多，现在大多数人好像到哪里都会带手机，手机可以作为一个追踪的设备，设备跟踪功能很多，比如 [Apple iCloud](https://www.home-assistant.io/integrations/icloud/)、[通过蓝牙设备追踪](https://www.home-assistant.io/integrations/bluetooth_tracker/)、路由器追踪、[MQTT 设备追踪](https://www.home-assistant.io/integrations/device_tracker.mqtt/)等等。\n\n其中路由器追踪又分[华硕路由器追踪](https://www.home-assistant.io/integrations/asuswrt/)、[OpenWRT (luci)](https://www.home-assistant.io/integrations/luci/)、[OpenWrt (ubus)](https://www.home-assistant.io/integrations/ubus/) 追踪，小弟这里用 OpenWRT (luci)实例，在这个追踪器中，设备 WiFi 断开 2-3 分钟会设置状态为「离开」，连上 WiFi 10 秒会判定「在线」。\n\n## OpenWRT 配置\n\n打开 OpenWrt 介面，选中「系统」→「软件包」中，点击刷新软件列表，之后在「过滤器」中搜索「luci-mod-rpc」，如未安装可点击安装。\n\n![ha_washer_luci](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_tracker_luci.png)\n\n## Home Assistant 配置\n\n在 Home Assistant 的 `configuration.yaml` 文件中添加配置：\n\n```yaml\ndevice_tracker:\n  - platform: luci\n    host: ROUTER_IP_ADDRESS\n    username: YOUR_ADMIN_USERNAME\n    password: YOUR_ADMIN_PASSWORD\n    interval_seconds: 10\n    consider_home: 120\n    new_device_defaults:\n      track_new_devices: true\n```\n\n### 自动化\n\n以下是一个自动化的示例，追踪的设备的手机，在 18:00-23:00 期间若手机状态由「离家」变为「在家」，即打开灯。\n\n```yaml\nalias: welcome home\ndescription: ''\ntrigger:\n  - platform: state\n    entity_id: <device_tracker MAC Address>\n    from: not_home\n    to: home\ncondition:\n  - condition: time\n    after: '18:00'\n    before: '23:00'\naction:\n  - type: turn_on\n    device_id: <device_id>\n    entity_id: <entity_id>\n    domain: <domain>\nmode: single\n```\n\n","tags":["Home Assistant"]},{"title":"Alexa 接入 HA","url":"/ha_alexa/","content":"\n![ha_alexa_cove](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_alexa_covwe.png)\n\n和 Google Assistant 一样，通过 [Home Assistant Cloud](https://www.home-assistant.io/cloud/) 服务可以快速接入 Home Assistant，每月 ＄5。有大大写了[一个程序](https://github.com/mike-grant/haaska)可以帮助接入 Home Assistant，并且写了[详细的 wiki](https://github.com/mike-grant/haaska/wiki)，小弟走了一遍流程，下面是步骤：\n\n## 设置好外网访问\n\n和 Google Assistant 一样需要设置好 https 外网访问。\n\n## 下载 haaska\n\n下载 [haaska 最新版本](https://github.com/mike-grant/haaska/releases/latest)，将其命名为like `haaska_1.1.0.zip`。\n\n将以下内容添加到您的`configuration.yaml`文件中：\n\n```yaml\napi:\n\nalexa:\n  smart_home:\n```\n\n之后在 Home Assistant 中创建一个获取一个长期令牌。登录 Home Assistant，单击头像或头像蓝色圆圈内的字母，向下滚动到「长期访问令牌」。点击 `CREATE TOKEN`，对于 `Name? 输入` haaska，之后点击 `OK`。令牌将出现，複製到安全的地方备用。\n\n## 设置 haaska\n\n### 设置与亚马逊的登录\n\n登录 [Amazon Developer Console](https://developer.amazon.com/home.html) （建议美亚账号），\n\n点击顶部导航栏中的[「使用 Amazon 登录」](https://developer.amazon.com/loginwithamazon/console/site/lwa/overview.html)链接，\n\n点击「创建新的安全配置文件」的金色按钮，\n\n![ha_alexa1](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_alexa1.png)\n\n输入以下内容：\n\n- 输入您想要的任何安全配置文件名称，例如  haaska\n- 写一个简短的描述，例如 haaska for my Home Assistant\n- 添加您想要的隐私声明网址，随意填\n\n点击保存继续，\n\n![ha_alexa2](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_alexa2.png)\n\n在新的安全配置文件上，点击齿轮按钮，选择网络设置，记下客户端 ID 和客户端密钥，将此窗口保持打开状态以供参考。\n\n![ha_alexa3](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_alexa3.png)\n\n### 设置 Alexa 技能套件\n\n打开一个**新的浏览器窗口**，使先前的**窗口**保持打开状态，以供以后使用。\n\n点击页面右上方的[开发者控制台](https://developer.amazon.com/home.html)链接，\n\n在导航栏中查找 Alexa，选择 [Alexa Skills Kit](https://developer.amazon.com/alexa/console/ask) ，点击[创建技能](https://developer.amazon.com/alexa/console/ask/create-new-skill)按钮，\n\n![ha_alexa4](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_alexa4.png)\n\n在这个新页面上，输入以下内容：\n\n- 技能名称-可以是您想要的任何名称，例如 haaska，\n- 语言-选择您要使用的正确语言，例如英语，\n- 点击「智能家居」图块，\n\n点击右上角的蓝色「创建技能」按钮，\n\n![ha_alexa5](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_alexa5.png)\n\n记下列出的技能ID（例如`amzn1.ask.skill.ed66dfa4-1185-492e-bf6e-1f70e90fb018`）。\n\n![ha_alexa6](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_alexa6.png)\n\n### 准备 AWS Lambda 访问\n\n打开一个**新的浏览器窗口**。请保持先前的窗口打开，以便以后使用。注册登录到 [AWS 控制台](https://console.aws.amazon.com/console/home)（注意：注册 AWZ 需要外币信用卡验证），选择 [IAM](https://console.aws.amazon.com/iam/home) ，\n\n![ha_alexa7](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_alexa7.png)\n\n在左侧栏上，点击[角色](https://console.aws.amazon.com/iam/home#/roles)。之后点击蓝色的[创建角色](https://console.aws.amazon.com/iam/home#/roles%24new?step=type)按钮，\n\n![ha_alexa8](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_alexa8.png)\n\n勾选「AWS服务」图块，点击选中 Lambda，之后点击右下角「下一步：权限」按钮，\n\n![ha_alexa9](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_alexa9.png)\n\n在搜索框中输入「basic」，之后选中 AWSLambdaBasicExecutionRole，\n\n![ha_alexa10](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_alexa10.png)\n\n点击右下角的「下一步：标签」按钮，无需输入任何标签，之后点击「下一步：查看」继续。\n\n在「角色名称」框中，输入 lambda_basic_execution，点击右下角「创建角色」，\n\n![ha_alexa11](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_alexa11.png)\n\n单击左上方的AWS按钮，返回到[主控制台](https://console.aws.amazon.com/console/home)。\n\n### 地区选择\n\n在屏幕的右上角用户名旁边，根据语言选中相应的地区，英语选择「美国东部（弗吉尼亚北部）」。\n\n![ha_alexa12](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_alexa12.png)\n\n### 设置 AWS Lambda-第 1 部分\n\n点击左上方的服务按钮，在列表中，找到「计算」部分，之后单击 [Lambda](https://console.aws.amazon.com/lambda/home) ，点击橙色的[创建功能](https://console.aws.amazon.com/lambda/home?#/create)按钮，选中「从头开始创建作者」图块，设置以下选项：\n\n- 名称 - haaska\n- 运行 - `Python 3.6`\n- 角色 - 选择现有角色\n- 现有角色 - lambda_basic_execution\n\n![ha_alexa13](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_alexa13.png)\n\n### 设置 AWS Lambda-第 2 部分\n\n在新功能的「设计器」部分中，点击 Alexa Smart Home。如果没有看到此信息，说明尚未设置[正确的区域](https://github.com/mike-grant/haaska/wiki/Setting-up-haaska#Region-Select)。\n\n在「应用程序 ID」框中，从 Alexa 开发人员控制台窗口（例如`amzn1.ask.skill.ed66dfa4-1185-492e-bf6e-1f70e90fb018`）複製并粘贴「技能ID」，\n\n确保选中「启用触发器」，点击右下角的「添加」，在「设计器」部分中，点击功能名称（例如 haaska），在「功能代码」部分中，查找「代码输入类型」，点击此菜单，选择「上传.zip文件」，\n\n![ha_alexa14](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_alexa14.png)\n\n点击「上传」按钮，选择之前下载的 zip 文件（例如`haaska_1.1.0.zip`）。\n\n在「处理程序」框中，将现有内容替换为 haaska.event_handler，等待其加载。\n\n## 配置 haaska 功能\n\n在「功能代码」部分，将看到文件列表，双击 `config.json`，\n\n在 URL 部分中，添加远程 Home Assistant URL（例如 `https://my-hass.example.com:8123`）\n\n在「承载令牌」部分中，添加先前保存的长期令牌（例如 amcb3i2248yfm ...）\n\n![ha_alexa15](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_alexa15.png)\n\n## 将 AWS Lambda 链接到 Alexa 技能套件\n\n在Lambda窗口的右上方，有一个 ARN（例如 arn:aws:lambda:us-east-1:111234567890:function:haaska），复制此文本并保存。\n\n返回您的 Alexa 开发人员控制台窗口，将ARN粘贴到标有「默认端点」的框中，\n\n从可用的复选框中，点击与之前的技能语言/Lambda 功能区域匹配的「端点区域」，将 ARN 粘贴到区域框中，点击右上角的「保存」按钮。\n\n![ha_alexa16](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_alexa16.png)\n\n## 链接 Alexa 技能套件以登录 Amazon\n\n点击「设置帐户链接」按钮，输入以下内容：\n\n| 名称                                | 内容                                                |\n| ------------------------------------ | ------------------------------------------------------ |\n| Authorization URI                    | `https://www.amazon.com/ap/oa`                         |\n| Access Token URI                     | `https://api.amazon.com/auth/o2/token`                 |\n| Client ID                            | 「使用Amazon登录」窗口中的客户端 ID |\n| Client Secret                        | 「使用亚马逊登录」窗口中的客户端秘钥 |\n| Client Authentication Scheme         | HTTP 脚本 (推荐)                             |\n| Scope                                | 点击 `+ Add Scope` 并输入 `profile`          |\n| Domain List                          | *Not used*                                             |\n| Default Access Token Expiration Time | *Not used*                                             |\n\n![ha_alexa17](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_alexa17.png)\n\n之后将看到重定向URI的列表，把这些复制备用，点击右上角的保存。\n\n返回到 Amazon 开发人员控制台/使用 Amazon 登录窗口，点击右下角的编辑，在「允许的返回 URL」部分中，点击「添加另一个」，直到三行为止。\n\n在每一行上，从  Alexa Developer Console 窗口中添加一个重定向 URL，点击保存。\n\n### 测试 haaska\n\n登录到 [Lambda 控制台](https://console.aws.amazon.com/lambda/home)，点击 haaska，之后点击页面右上方的「测试」按钮，\n\n在「事件名称」字段中为测试指定一个自定义名称。将以下 JSON 复制到测试控制台：\n\n```json\n{\n  \"directive\": {\n    \"header\": {\n      \"namespace\": \"Alexa.Discovery\",\n      \"name\": \"Discover\",\n      \"payloadVersion\": \"3\",\n      \"messageId\": \"1bd5d003-31b9-476f-ad03-71d471922820\"\n    },\n    \"payload\": {\n      \"scope\": {\n        \"type\": \"BearerToken\",\n        \"token\": \"access-token-from-skill\"\n      }\n    }\n  }\n}\n```\n\n单击「创建」，测试应该在「测试」按钮旁边的下拉框中列出，单击「测试」按钮，如果测试成功，将出现一个绿色的选中标记。恭喜，haaska 可以与 Home Assistant 进行通信。\n\n![ha_alexa18](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_alexa18.png)\n\n如果有问题，并且测试失败，可以展开「详细信息」部分查看。\n\n## Alexa App 中设定\n\n打开 Alexa App，在「更多」tab 中选择「Skill & Games」，之后就可以在「Your Skills」的「Dev」中可以看到建立的技能，连接即可。\n\n![ha_alexa19](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_alexa19.png)\n\n\n\n\n\n\n","tags":["Home Assistant"]},{"title":"Google Assistant 接入 HA","url":"/ha_ga/","content":"\n![ha_google_assistant_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_ga_cover.png)\n\nGoogle Assistant 接入 Home Assistant 最简单的方法是通过 [Home Assistant Cloud](https://www.home-assistant.io/cloud/) 服务，每月 ＄5，收入用于支持 Home Assistant 的开发，如果不想折腾可以直接订阅即可。另外一种方法是通过手动设置的方法，下面是步骤：\n\n## 设置好外网访问\n\n首先确保有公网 IP，在群晖或路由器中设置好 DDNS、端口映射 8123 端口，域名申请好 SSL 证书。\n\n## 新增 Action\n\n打开网址 [http://console.actions.google.com](http://console.actions.google.com/)，\n\n点击 `New Project` 并为项目命名，\n\n![ha_ga1](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_ga1.png)\n\n选中 `Smart Home` 卡片，之后点击 `Start Building`，\n\n![ha_ga2](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_ga2.png)\n\n点击 `Name your Smart Home action` 下方 `Quick Setup` 的名称，为操作命名（Home Assistant 将在 Google Home 应用中显示为 `[test] <Action Name>`），\n\n![ha_ga3](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_ga3.png)\n\n点击 `Build your Action`下方的 `Add Action(s)`，添加 Home Assistant 的访问 URL `https://[YOUR HOME ASSISTANT URL:PORT]/api/google_assistant`，之后点击 `Save`，在 `Overview` 选项卡，可以看到应用程序详细信息。\n\n![ha_ga4](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_ga4.png)\n\n## 关联账号\n\n点击页面 `Setup account linking` 下面的 `Quick Setup` 设置`Overview`，\n\n输入以下内容：1.专案项目 ID： `https://oauth-redirect.googleusercontent.com/r/YOUR_PROJECT_ID`（可以通过网址 URL 看到 YOUR_PROJECT_ID，）；2. Client Secret：无填写要求；3.授权 URL（与实际 URL 替换）： `https://[YOUR HOME ASSISTANT URL:PORT]/auth/authorize`。4.令牌URL（与实际URL替换）： `https://[YOUR HOME ASSISTANT URL:PORT]/auth/token`，\n\n![ha_ga5](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_ga5.png)\n\n在`Configure your client` `Scopes`文本框中，输入 `email` 并点击 `Add scope`，输入`name`并再次点击 `Add scope` 。（不要勾选 `Google to transmit clientID and secret via HTTP basic auth header`)，点击`Next`，然后点击 `Save`，\n\n![ha_ga6](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_ga6.png)\n\n选择顶部的选项卡 `Test` 按钮以生成草稿版本 Test App。\n\n![ha_ga7](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_ga7.png)\n\n## 启用设备同步\n\n这一步的目的是向Google服务器发送状态报告，当使用命令 Ok Google，sync my devices 时，可以同步设备。\n\n首先在GCP控制台中，转到[「创建服务帐户密钥」](https://console.cloud.google.com/apis/credentials/serviceaccountkey)页面。\n\n确保匹配 `project_id`，从服务帐户列表中，选择新服务帐户。在服务帐户名称字段中，输入名称。在服务帐户 ID 字段中，输入 ID。从角色列表中，选择服务帐户 > 服务帐户令牌创建者。密钥类型，选择 JSON，点击创建，之后包含密钥下载的 JSON 文件将自动下载。\n\n![ha_ga8](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_ga8.png)\n\n转到 [Google API 控制台](https://console.cloud.google.com/apis/api/homegraph.googleapis.com/overview)。选择项目，查找并启用 HomeGraph API。\n\n![ha_ga9](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_ga9.png)\n\n## Home Assistant 配置\n\n将以下配置添加至 `configuration.yaml`：\n\n```yaml\ngoogle_assistant:\n  project_id: YOUR_PROJECT_ID\n  service_account: !include SERVICE_ACCOUNT.JSON\n  report_state: true\n```\n\n如果有不想使用 Google Assistant 进行控制的实体，可以将其禁用，在其下方，键入`expose:`并将其设置为`false`。\n\n```yaml\ngoogle_assistant:\n    light.living_room:\n      expose: false\n```\n\n## Google Home App 设置\n\n打开手机上的 Google Home App，添加设备，选择 test 账号，之后填入 Home Assistant 用户名及密码。\n\n![ha_ga10](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/ha_ga10.png)","tags":["Home Assistant"]},{"title":"制作使用网址导航","url":"/nav/","content":"\n![nav_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/nav_cover.png)\n\n小弟在群晖上跑了不少服务，多了之后要记各个服务项的地址，想尝试做一个网址导航方便使用各项服务。一番搜索，发现[这个](https://github.com/WebStackPage/WebStackPage.github.io)好像不错，静态页面，简单直接。\n\n## 修改源码\n\n首先修改静态页面的源码，将里面的网址换成自己的地址。[下载](https://github.com/WebStackPage/WebStackPage.github.io)好作者的源码解压，用文本编辑器打开其中的文件修改即可。有一个问题是，html 文件里的各种标签的括号容易搞混层级，这里可以一款前端编辑器 [Espresso](https://www.espressoapp.com/)，这个小工具可以方便折叠收起各种标签，找到对应位置替换地址即可。\n\n![nav_tool](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/nav_tool.png)\n\n图片资源放在 `/assets/images` 路径下，作者还放了一个 Sketch 的源文件，方便改图。\n\n改好好可以在浏览器中看下效果。\n\n![nav_preview](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/nav_preview.png)\n\n## 设置外网访问\n\n比较简单从外网访问这个网页的方式是通过群晖的 Web 服务器。\n\n首先上传网页文件夹至群晖任意位置，在群晖套件中心安装「Web Station」，\n\n![nav_web1](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/nav_web1.png)\n\n打开 Web Station，新建一个网站，可以选择按端口号，之后填写端口号，后端服务器可任意选择，之后即可创建好网站。\n\n![nav_web2](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/nav_web2.png)\n\n若设置好了 DDNS 与端口映射，应该外网就可以访问了。\n\n需要注意的是，各类入口露在外网，记得设好密码，密码建议不要太简单。\n\n"},{"title":"舵机控制普通单控 86 开关","url":"/servo/","content":"\n![servo_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/servo_cover.png)\n\n小弟想将灯泡接入 HA，看到有大大通过舵机控制灯泡开关（参见[这里](https://taron.top/archives/108.html)），感觉思路很赞，那个大大是通过 Arduino 写固件，小弟觉得想用 ESPHome 实现，代码简单、有拓展性（可接入其他传感器之类的），尝试一番成功接入。\n\n## 材料准备\n\n1、ESP8266 开发板\n\n2、SG90 9g 克舵机（90 度）\n\n3、公对母杜邦线\n\n4、公对母 USB 延长线（方便接电源）\n\n5、90 度直角固定支架（或其他直角支架）\n\n## 刷入固件\n\n确保安装好 ESPHome，HASS 可以直接通过插件安装。打开 ESPHome ，新建或打开已经或在原有设备新增以下代码：\n\nESP8266 参考：\n\n```yaml\napi:\n  services:\n    - service: control_servo\n      variables:\n        level: float\n      then:\n        - servo.write:\n            id: my_servo\n            level: !lambda 'return level / 100.0;'\n\nservo:\n  - id: my_servo\n    output: pwm_output\n\noutput:\n  - platform: esp8266_pwm\n    id: pwm_output\n    pin: D7\n    frequency: 50 Hz\n\nswitch:\n  - platform: gpio\n    name: \"switch\"\n    pin: D7\n    on_turn_on:\n      - servo.write:\n          id: my_servo\n          level: +100.0%\n      - delay: 0.5s\n      - servo.write:\n          id: my_servo\n          level: 0%  \n    on_turn_off:\n      - servo.write:\n          id: my_servo\n          level: -100.0%\n      - delay: 0.5s\n      - servo.write:\n          id: my_servo\n          level: 0% \n```\n\n代码执行命令如下：按下「开」，正旋转 70%，500ms 之后回到初始位置；按下「关」，负旋转 70%，500ms 之后回到初始位置。注意角度可以按照实际情况修改。\n\n在 Home Assistant 可以自动发现 ESPHome 设备，添加即可。\n\n## 连线\n\n首先将舵机与 ESP8266 连线，\n\n| 舵机 | ESP8266 |\n| ---- | ------- |\n| 红色 | 3.3V    |\n| 棕色 | GND     |\n| 黄色 | D7      |\n\n将舵机、直角支架放在 86 开关上确定各自的距离，注意舵机旋转方向，用热熔胶粘在直角支架上，直角支架粘在墙上，舵机与开关可以留一定距离，这样不影响手动开关。\n\n![servo_pic1](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/servo_pic1.jpg)\n\n![servo_pic2](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/servo_pic2.jpg)\n\n距离可参考小弟的：\n\n![servo_distance](https://cdn.jsdelivr.net/gh/drunkfish7/pic3@master/uPic/servo_distance2.png)\n\n粘上后最好等待 24 小时热熔胶固定再使用。\n\n","tags":["Home Assistant"]},{"title":"大国特色奇异技巧系列之三：联通光猫改桥接实现外网访问","url":"/modem/","content":"\n![modem_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/modem_cover.png)\n\n如果想要外网访问群晖或其他自己搭建的 Docker 等服务，比较好的方法是利用 DDNS 和端口映射，比其他方法稳定且快速，方法如下：\n\n## 光猫改桥接\n\n光猫最好改成桥接模式，用路由器拨号，这样可以少一层 NAT，并且不受限于自带光猫羸弱的硬件配置和残缺的软件功能。不同光猫改桥接方法不尽相同，以小弟住的地方的光猫是中兴 F627V2，如果和小弟同款，可以参考以下步骤：\n\n### 前期准备\n\n1、确保同型号、同地区\n\n小弟用的是北京联通，中兴 F627V2，外观如下：\n\n![modem_hardware1](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/modem_hardware1.png)\n\n![modem_hardware2](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/modem_hardware2.png)\n\n另外可以连接光猫的 WiFi 登录光猫后台查看型号：\n\n![modem_series](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/modem_series.png)\n\n2、备份好拨号用户名和密码\n\n建议保存好拨号用户名和密码，路由器拨号时需要使用。\n\n连接光猫的 WiFi（名称与密码在光猫背面），浏览器访问 http://192.168.1.1/hidden_version_switch.gch ，选 `Default version`，输入密码 CUAdmin，保存修改，\n\n![modem_switch](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/modem_switch.png)\n\n浏览器访问 http://192.168.1.1/cu.html ，选择「管理员账户」，\n\n![modem_admin](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/modem_admin.png)\n\n输入密码 `CUAdmin` 进入，选择「基本配置」，连接名称选择 `2_INTERNET_B_VID_0`，端口绑定勾选 `LAN1`，VLAN 模式选 `改写(tag)`，VLAN ID 填写 `3961`，点击「修改」。\n\n![modem_config](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/modem_config.png)\n\n输完后再检查一遍，确保输入正确。\n\n### 配置路由器拨号\n\n不同的路由器配置拨号不完全一样，以 OpenWrt 为例：\n\n在「网络」中选择「端口」，找到「WAN」口，点击「修改」，\n\n![modem_pppoe1](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/modem_pppoe1.png)\n\n协议选择「PPPoE」，填入拨号用户名和密码，点击「保存并应用」。\n\n![modem_pppoe2](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/modem_pppoe2.png)\n\n之后浏览器打开网址试试，正常打开说明配置成功。\n\n## 确保有公网 IP\n\n外网访问 NAS 需要公网 IP，判断是否有公网 IP 可以参照[这篇](https://hsk.oray.com/news/5928.html )。\n\n由于 IPv4 是稀缺资源（现已耗尽），公网 IP 大部分默认没有开通。如果没有公网 IP，可以打电话给运营商的客服，一般情况会有装网师傅再联系，说明开通公网 IP 即可，注意不要说搭服务器之类的黑话（需要知道，在世界上最富裕、最发达、最文明、最开放的國家，网站是需要「备案」的）。话术可以参考以下：\n\n> 话术参考 1：我想用光猫里的端口映射功能，请问是应该怎样操作。\n\n（一般师傅会推荐使用光猫自带的 DMZ 功能，贴心会发一个 PDF 说明文件，之后如果没开公网 IP 师傅会帮开公网 IP ）\n\n> 话术参考 2：我想给家里的网开公网 IP。\n\n（不想拐弯抹角也可以直接问，有些师傅会说公网 IP 是企业用的，费用很高，这时候说是那种临时公网 IP）\n\n## 设置 DDNS\n\nDDNS 即动态 DNS，方便我们的公网 IP 更换时仍可以指向我们的主机。设置 DDNS 最简单的方法是利用群晖的 DDNS（OpenWrt 也支持，比群晖稍繁琐）。\n\n打开群晖控制面板，找到「外部访问」，之后添加 DDNS，最简单的是选择群晖自带的 DDNS。\n\n![modem_ddns](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/modem_ddns2.png)\n\n## 配置端口映射\n\n设置好 DDNS 还需要配置端口映射，不同路由器配置方法不尽相同，大体相似，以 OpenWrt 为例：\n\n在「网络」中选择「防火墙」，找到「端口转发」，添加主机、内部端口、外部端口即可。\n\n![modem_port](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/modem_port.png)\n\n配置好之后可以用手机蜂窝网络访问 DDNS 域名:端口号，可正常访问说明配置成功。"},{"title":"这个手机来自过去——掌阅 F1/海信 A5 使用","url":"/eink/","content":"\n![eink_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/eink_cover.png)\n\n> It's time for a phone to save us from our phones.\n>\n> -- [Windows Phone commercial - \"Really?!\"](https://youtu.be/l9evyGr57hs)\n\n（9 月 10 日补充「关于打卡」）\n\n小弟最近入手一个手机，[掌阅 F1](https://item.jd.com/100012756284.html)，这个手机特别之处是屏幕是电子纸，另外还可以参与[打卡 0 元购买](https://sale.jd.com/m/h5/urbwvqmqh1qb.html)。手机是海信代工的，外壳打上了掌阅的标志，和去年出的「[海信 A5](https://item.jd.com/100009261640.html)」硬件配置相同，配置如下：\n\n![eink_hardware](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/eink_hardware.png)\n\n小弟用了一段时间这个手机，感觉还挺好的，以下是一些应用推荐：\n\n## 作为电子纸阅读器\n\n这个手机作为一个文字类电子纸阅读器还是可以的，5.84 英寸、276 ppi、158g，比 Kindle 便携、更容易装进口袋。由于是手机，故可插手机卡，支持 4G，在没有 WiFi 的地方可以通过蜂窝网络联网。另外，手机对电子纸屏幕有软件上的优化，包括底部导航键可以选择「清晰」「流畅」等模式、双击左侧按键可以强制刷新、设置应用内整页刷新等等。骁龙 439、4G 内存非高配，但对阅读类应用够用。\n\n注意：阅读类应用尽量调成白底黑字、无动画、高对比度，在电子纸屏幕显示效果最佳。\n\n### 读书应用推荐\n\n1、各电子书平台\n\n手机内置 Android 9 系统，可以安装各类 Android 应用。如果在其他电子书平台（如 [Readmoo 读墨](https://readmoo.com/)、[Kobo](https://www.kobo.com/)）有购买电子书，可以免转档直接安装相应应用使用（Google Play 图书无法使用）。\n\n2、Kindle\n\n如果有 Kindle 设备，可以装一个 Kindle 应用，与硬件 Kindle 或其他平台的 Kindle 阅读进度保持同步。\n\n另外，亚马逊中国自己魔改了 Kindle 应用，推荐安装 Google Play 的版本，64 位，无启动广告。\n\n3、Moon+ Reader\n\n阅读应用推荐 [Moon+ Reader](https://www.moondownload.com)，可以高度定制化，对阅读内的方方面面设置，包括字体、间距、翻页方式、调用 TTS 等等，甚至可以设置使用耳机音量键翻页。\n\n4、KOReader\n\n[KOReader](https://koreader.rocks/) 可以方便读一些图片类、扫描类 PDF 文档，能自动切边、重排（许多人给 Kindle 越狱或选 Kobo 阅读器而不选 Kindle 就是为了可以用 KOReader）。由于有更高的硬件配置，使用中，感觉比在 Kindle 上使用 KOReader 更流畅，少有卡顿情况。\n\n下图是同一个文档同一页重排前后效果对比：\n\n![eink_koreader](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/eink_koreader.png)\n\n另外，由于是电子纸屏幕，可以关闭「颜色渲染」功能，减少一点内存占用。\n\n### 借书应用推荐\n\n1、Libby\n\nKindle 可以在图书馆借书，但是需要美国借书证或美国实体手机号（Google Voice 号码不可以）。\n\n借助安装 [Libby](https://www.overdrive.com/apps/libby/) 应用，借书并在电子纸屏幕上阅读成为可能。[Libby](https://www.overdrive.com/apps/libby/) 是一个超酷的借书应用，与全世界大多数图书馆都有合作（其中包括中国），在上面可以很方便地借电子书或有声书。\n\n首先可以到下面列出的图书馆办一张借书证，得到卡号与密码（其中浙江图书馆可以在支付宝中在线申请）。\n\n![eink_china_list](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/eink_china_list.png)\n\n在 Libby 中找到对应图书馆，之后添加借书证就可以借书了，可借的包括英文书、中文书、有声书（带耳机标志）。\n\n![eink_libby](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/eink_libby.png)\n\n注意：大部分读者书图书馆只有几份数字拷贝，可能需要预定排队。另外，借书有数量限制，每个图书馆不同，默认一定期限内自动归还，也可以提早归还。\n\n2、Hyread\n\n[Hyread](https://ebook.hyread.com.tw) 是台湾图书馆借阅平台，中文书多，还包括很多热门的的书。大多数台湾的图书馆注册验证并不严格，在中国也能用（参见这位大大写的[攻略](https://www.facebook.com/groups/hyreadgaze/permalink/872978743174546/)）。\n\n注册成功后在 Hyread 中找到对应图书馆并填入用户名及密码。之后可以按照类别选书，也可以直接搜索书名或作者名。可借的有中文书、杂志，其中一些很夯的如《原子习惯》也有。大部分书也只有几份数字拷贝，想借需要预定。\n\nHyread 比较酷的一点是大部分书可以在线读（这个比 Libby 还要酷），一本书看到「Read now」按钮表示这本书可以在线读，这个有点类似在图书馆阅览书，但不借回家。借书时，有些书会消耗点数，有些不会，不同图书馆点数不尽相同。\n\n![eink_hyread](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/eink_hyread.png)\n\n### RSS 订阅\n\nRSS 订阅推荐 [Inoreader](https://www.inoreader.com)，可以多平台同步，方便将文章保存至 Evernote 等。\n\n### 那么，Kindle 呢\n\n论显示效果，小弟感觉 Kindle 在软件层面优化得更好一点，文字显示更锐利，不容易有类似残影，漫画显示也更清晰、屏幕显得更大。2：1 的屏幕比时每行可以容纳的字减少，眼睛需要更频繁上下跳转。另一方面，2：1 的屏幕比使手机很细长，更容易装进口袋。内置相对开放的 Android 可以安装各种阅读类应用，作为 Kindle 的一个补充。\n\n![eink_compare](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/eink_compare.JPG)\n\n## 作为音乐播放器\n\n这个手机视频体验不优，但当一个音乐播放器，连接音箱还是不错的。小弟连的是 Google Home Mini，手机不支持使用 Google Home 应用连接 Chromecast，但是可以蓝牙连接。使用中，蓝牙连接较稳定，也支持各种语音指令，如「pause」「continue to play」「next」等等。\n\n### 网易云音乐\n\n网易云音乐配合 [UnblockNeteaseMusic](https://github.com/nondanee/UnblockNeteaseMusic) 解锁脚本可以听大多数音乐。建议安装[网易云音乐 v4.0.0](https://www.wandoujia.com/apps/293217/history_v90)，没有花里胡哨的功能、资源占用小。 \n\n### Youtube\n\nYoutube 有很多官方或个人上传的 MV 视频，基本覆盖所有已发行的音乐， Youtube 也可以做一个音乐播放工具。一个问题是，小弟目前不知道怎么给这个手机安装 Google 框架，官方的 Youtube 没法使用。小弟安装了一个改版的 Youtube，[YouTube Vanced](https://vanced.app/)（感谢 Xin Yee 推荐），免 Google 服务，另外可以去广告，还有后台播放。\n\n### Spotify\n\n如果没有 Spotify Premium，可以到 [MODDROID](https://moddroid.com/) 下载一个修改版的 Spotify ，可以去广告、无限切歌。不过，比较尴尬的是， Spotify 在这个手机上显示黑乎乎一片，看起来有一点吃力。\n\n![eink_music](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/eink_music.png)\n\n## 作为学习手机\n\n这个设备和 Kindle 不同之处在于，可以作为手机使用。小弟觉得这个手机很适合作为想学习的人，需要手机的一些便利，但是又不希望沉迷在视频、社交等应用，某种程度可能是一个「save us from our phones」的手机。\n\n### 优点\n\n作为一个手机，这个手机在系统上做了优化，包括上划、左划、下划全局手势，还为电子纸屏幕的优化，不用操心的后台自动清理、等等，以及一些贴心的新功能，如分屏、息屏手势、两指识别等。\n\n手机自带的应用也相对很完善，拨号内置了 T9 拨号，也有类似冰箱的应用，甚至有一个语音助手。\n\n手机电池容量够，加上电子纸屏幕耗电少，待机时间长。\n\n### 缺点\n\n由于 E-Ink 屏幕限制，手机屏幕对视频、动效显示不佳，另外，有些暗色系应用看起来有些吃力。\n\n另外一个是小弟没有正常安装使用 Google 框架（应该可以使用，但小弟没找到方法），依赖 Google 框架的应用用不了，手机可用性大大降低。\n\n另外，手机 WiFi 只支持 2.4GHz，有点遗憾。\n\n### 应用推荐\n\n这个手机自带的应用还挺完善的，拨号内置了 T9 拨号，也有类似冰箱的应用，甚至有一个语音助手。\n\n1、卸载自带垃圾应用\n\n**方法一：**\n\n系统自带应用大多数可以禁用卸载，浏览器与自带应用市场需要 ADB 连电脑禁用或删除，方法如下：\n\n① 电脑端装好 ADB 工具；\n\n② 在手机「设置」→「关于手机」→「Kernel 版本」中连按 7 次，打开「开发者选项」；\n\n③ 在手机「设置」→「其他设置」→「开发者选项」中，打开「USB 调试」；\n\n![eink_adb](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/eink_adb2.png)\n\n④ 手机 USB 连接电脑，并允许 USB 调试；\n\n⑤ 打开系统终端机，输入 `adb shell`，进入 adb 命令环境， `pm disable-user  --user 0 应用包名` 可以禁用应用，`pm uninstall  --user 0 应用包名` 可以卸载应用。\n\n如：禁用浏览器和自带应用市场可以输入：\n\n```\n浏览器 pm disable-user  --user 0 com.android.browser\n应用市场 pm disable-user  --user 0 com.hisense.hiphone.appstore\n```\n\n卸载浏览器和自带应用市场可以输入：\n\n```\n浏览器 pm uninstall  --user 0 com.android.browser\n应用市场 pm uninstall  --user 0 com.hisense.hiphone.appstore\n```\n\n不知道包名，可以安装 LibChecker 或 Package Names（可在 Google Play 搜索下载）。\n\n**方法二（免电脑，推荐）：**\n\n安装 [App Manager](https://f-droid.org/packages/io.github.muntashirakon.AppManager/) （可在 [F-Droid](https://f-droid.org/) 下载），这个应用可以模拟 ADB，安装好后找到要禁用或卸载的应用即可，免电脑操作，推荐。\n\n![eink_app-manager](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/eink_app-manager.png)\n\n2、浏览器\n\n浏览器推荐 [Alook](https://www.coolapk.com/apk/alook.browser) 是一个好用的浏览器，可以倍速、小窗、后台播放，小窗播放视频等等，贴心功能很多。\n\n3、应用市场\n\nGoogle Play 里的应用都是 64 位，可以更好发挥硬件性能、更省电。另外，Google Play 里的应用都经过 Google 审核，相对更安全，是应用市场首选。\n\n由于小弟没安装成功 Google Play，所以只能用第三方应用市场，如 [Aurora Store](https://auroraoss.com/downloads.php) （基于 Google Store API 构建，可以登录 Google 账号，推荐）、 [APKPure](https://apkpure.com)（可以直接使用网页版）、[APKMirror](https://www.apkmirror.com/)（仅网页版）。\n\n如果有下载国内应用需求，可以使用[酷市场](https://www.coolapk.com/)（推荐 [v6.0.1](https://www.wandoujia.com/apps/998339/history_v1601131) 版本，够用，没有乱七八糟的功能）。\n\n另外可以安装 [F-Droid](https://f-droid.org/)，里面的应用都是开源的。\n\n4、Wormhole\n\n[Wormhole](https://er.run) 可以方便在电脑查看、控制手机，可以直接在电脑键盘操作、输入文本等。\n\n![eink_pc](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/eink_pc7.png)\n\n5、AirDroid\n\n[AirDroid](https://www.airdroid.com) 可以方便在电脑浏览器控制、管理手机，传输文件等等。\n\n6、欧路词典\n\n[欧路词典](https://www.eudic.net/v4/en/app/eudic)是一个好用的词典应用，支持 MDX 格式的词典，可以剪贴板取词，跨应用全局使用。\n\n7、Telegram\n\n[Telegram](https://telegram.org/) 作为一个即时沟通工具没话说，占用资源极少，运行超流畅，各种好玩的贴纸，不用担心泄露隐私。另外可以作为在其他设备传输工具，方便传输文本、文件等。\n\n另外，Telegram 借助 [ehForwarderBot](https://github.com/blueset/ehForwarderBot) 这个小工具，可以作为一个微信客户端，界面美观、现代，启动迅速，运行流畅，可无限多端登录，信息全云端存储，不用担心臃肿的垃圾微信信息占用宝贵的存储空间。\n\nTelegram 可以自定义皮肤，建议将消息背景、气泡等调成黑白获得更好的显示。\n\n![eink_telegram_mini](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/eink_telegram_mini2.jpg)\n\n8、讯飞输入法\n\n手机系统自带[讯飞输入法](https://srf.xunfei.cn/)，也支持超酷的无需切换直接手写功能，使用时手写笔迹有些延时。自带的功能较精简，可以选择升级（建议安装 Google Play 的 版本，64 位），升级后会比自带的臃肿，但是功能也会多一点，升级后小弟比较喜欢的功能有：① 按键有振动反馈，更有打字的感觉；② 可以安装剪贴板插件，方便管理剪贴板。 \n\n推荐使用「无缝线框·浅色」这款皮肤，在电子纸屏幕显示更清楚。\n\n9、Overdrop\n\nOverdrop 是一款天气应用，可以设置白底黑字、无动画显示，在电子纸屏幕上获得较好的天气体验。\n\n![eink_weather&tts](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/eink_weather&tts.png)\n\n10、Google Text-to-speech Engine\n\nGoogle 有把文字转语音引擎单独打包，可以直接安装，在需要 TTS 的应用（如 Moon+ Reader）中使用。\n\n11、乐播投屏\n\n这个手机投屏协议是 Miracast，没法使用 Google Home 这个应用，所以没法使用 Chromecast 投屏。可以安装[乐播投屏](https://www.hpplay.com.cn/)进行投屏（电视或盒子端、手机端均需安装），推荐安装 [v3.2.14 版本](https://m.wandoujia.com/apps/6651787/history_v30214)，体积小，免注册。\n\n## 关于打卡\n\n（9 月 10 日补充）\n\n这个手机可以[打卡 0 元购买](https://sale.jd.com/m/h5/urbwvqmqh1qb.html)，大体规则是在「掌阅精选」应用阅读 30 分钟，打卡 180 天可返购机款。有大大写了 Auto.js 脚本，可帮助完成打卡。\n\n首先下载 [Auto.js V4.0.1 Beta](https://drive.google.com/file/d/11qGDEPZZnrfgVoY3xW5bg-eGGAEkLANz/view?usp=sharing)（最后一个免费版本，最新版本需付费），允许无障碍权限，新建脚本，输入以下内容并保存：\n\n```javascript\n//等待无障碍服务开启\nauto.waitFor();\n//启动掌阅精选\napp.startActivity({\n    packageName: 'com.zhangyue.read.iReader',\n    data: 'zyireaderpro://home'\n});\n//打开书籍\nvar bookList = selector().id('bookshelf_all_recyclerview').findOne()\nvar book0 = bookList.child(1); // child0是空白的view，跳过。\nbook0.click();\n//进度展示\nvar readMinutes = 0;\nvar tipWindow = floaty.window(\n    <frame gravity=\"center\">\n        <text id=\"text\">本次已阅读0分钟</text>\n    </frame>\n);\ntipWindow.setPosition(360,10);\nfunction updateTip(){\n    tipWindow.text.setText('本次已阅读'+readMinutes+'分钟');\n}\n//定时翻页\nconst width = device.width;\nconst height = device.height;\nfunction nextPage(){\n    var random = (Math.random()*2 + 7)/10;\n    var x = width*random;\n    var y = height*random;\n    click(x,y);\n}\nvar count = 30;\nvar stopAfter31m = true;\nwhile (count > 0){\n    var random123 = Math.floor(Math.random() * 3);\n    sleep(1000 * 61 * random123);\n    nextPage();\n    count -= 1;\n    readMinutes += random123;\n    ui.run(updateTip);\n    if (stopAfter31m && readMinutes > 31){\n        break;\n    }\n}\n//关闭书籍\nback();//不需要退出掌阅精选，H5Bridge需要向它获取数据。\n//启动打卡应用H5Bridge\napp.startActivity({\n    action: 'hmct.intent.action.H5BRIDGE'\n});\nsleep(5000);\nclick(677,810);//刷新时长\nsleep(5000);\nvar button = selector().className('android.widget.Button')\n                        .text('立即打卡');\nif (button.exists()){\n    button.findOne().click();\n} else {\n    log('button not found');\n}\n```\n\n使用脚本过程确保联网、电量充足。另外，系统升级可能会造成脚本失效，建议关闭系统更新。\n\n![eink_script](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/eink_script.png)\n\n![eink_clock](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/eink_clock.jpg)\n\n\n\n"},{"title":"谈谈电子书 DRM","url":"/drm/","content":"\n![drm_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/drm_cover.png)\n\n> 藏天下於天下。\n\n2007 年，乔布斯希望唱片公司废除音乐的 DRM（数字版权管理），这样 iTunes 上销售的音乐可以就可以在所有设备上播放。这个倡议推动了音乐平台的 DRM 改革，几年过后，线上一首首卖歌逐渐被订阅制听歌取代。\n\n电子书市场的 DRM 似乎和音乐市场不太一样，出版社众多，看到饱的订阅制无法覆盖每一本书，一本本购书是主流。一个问题是，DRM 是防盗版的好办法吗？DRM 好处会大于坏处吗？\n\n有位大大曾有过 [DRM-free 的实验](https://bookfere.com/post/380.html)，其中的观点如下：1.有了盗版，书籍销售不降反升；2.去 DRM 对程序员并不费劲；3.盗版是一个宣传、评估内容受欢迎的一种方式。\n\n已经购买了正版电子书，可以在不同平台、不同设备可以不受限阅读，小弟认为这没有不对的地方，以下是几种电子书平台去电子书的 DRM 的方法：\n\n## Amazon 电子书\n\n中亚、美亚、日亚等电子书去 DRM 方法相同。Amazon 电子书在 Windows 下去 DRM 最方便，\n\n1、下载安装 [calibre](https://calibre-ebook.com/)，\n\n2、下载 [DeDRM_tools](https://github.com/apprenticeharper/DeDRM_tools/releases)，解压，\n\n3、打开 calibre，在工具栏中找到「偏好设置」，\n\n![drm_win1](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/drm_win1.png)\n\n在偏好设置中找到「插件」，\n\n![drm_win2](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/drm_win2.png)\n\n选择「从文件导入」，选择文件 `DeDRM_Plugin.zip`，安装并重启 calibre，\n\n![drm_win3](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/drm_win3.png)\n\n4、下载安装旧版 [Kindle for Windows v1.17](https://www.epubsoft.com/soft/kindle-for-pc.html)，\n\n5、登录亚马逊账号，下载要去 DRM 的电子书，\n\n6、在路径 `C:/Users/user name/Documents/My Kindle Content` 下找到后缀名为 `azw` 的电子书文件，将文件拖入 calibre，此时已经去好 DRM 了，可以进一步转成 mobi 或 epub 格式。\n\n\n## Kobo 电子书\n\nKobo 电子书在 Windows 和 macOS 下均可去 DRM，\n\n1、下载安装 [calibre](https://calibre-ebook.com/)，\n\n2、下载 [DeDRM_tools](https://github.com/apprenticeharper/DeDRM_tools/releases)，解压，\n\n3、打开 calibre，在工具栏中或菜单栏中的「文件」中找到「偏好设置」，在偏好设置中找到「插件」，\n\n![drm_mac1](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/drm_mac1.png)\n\n选择「从文件导入」，\n\n![drm_mac2](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/drm_mac2.png)\n\n选择文件 `DeDRM_Plugin.zip`，之后选择文件 `Obok_plugin.zip`，安装并重启 calibre，安装成功后工具栏会看到 Obok DeDRM 图标，\n\n![drm_mac3](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/drm_mac3.png)\n\n3、下载安装 [Kobo 桌面客户端](https://www.kobo.com/us/en/p/desktop)，\n\n4、登录 Kobo 账号，下载要去 DRM 的电子书，\n\n5、打开 calibre，在工具栏中点击「Obok DeDRM 图标」，可以看到 Kobo 中的电子书，点击「好」可以汇入，汇入之后即去 DRM，之后可以将电子书转成 mobi 或其他格式。"},{"title":"大国特色奇异技巧系列之二：Telegram 收发微信消息","url":"/ehforwarderbot/","content":"\n![ehforwarderbot_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/ehforwarderbot_cover.png)\n\n![ehforwarderbot_ui](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/ehforwarderbot_ui.png)\n\n不鳥萬如一老师曾讨论过[关于微信](https://blog.yitianshijie.net/2018/02/27/2nd-anniversary-of-ditching-wechat/)，小弟很赞成其中的观点。微信可以成功，和防火长城关系密切。[Telegram](https://telegram.org/) 是一款在功能及体验上远超微信的即时聊天工具，关于 Telegram 的传奇故事可以参见[这篇](https://www.tmtpost.com/1443098.html)。\n\n[EH Forwarder Bot](https://github.com/blueset/ehForwarderBot) 是一位大大开发的一个消息隧道聊天机器人框架，可将一个平台的消息转到另一个平台，其中包括将微信消息转发至 Telegram。\n\n这个小工具可以将 Web 端的微信消息转发至 Telegram，这样做有几个好处：1、使用更现代的 Telegram 聊天界面收发微信消息；2、聊天记录在 Telegram 云备份一份；3、得益于 Telegram 优秀的跨平台特性，可以更方便多平台使用微信；4、 Telegram 的某些功能，如超多的贴图、定时发信息等也可以使用。\n\n使用 EH Forwarder Bot 微信消息转至 Telegram 需要准备：1、可以连外网的 VPS 或连外网的群晖（推荐）；2、两个 Telegram 账号；3、确保微信可以正常登录 Web 端。\n\n## 配置 Telegram 机器人\n\n### 创建 Telegram 机器人\n\n首先创建一个新的 Telegram 机器人，打开 Telegram 应用，与 [@BotFather](https://t.me/BotFather) 开始对话，\n\n发送 `/start` ，可以看到各种指令及简要说明，\n\n发送 ` /newbot ` 创建一个新机器人，之后会询问机器人的名字及机器人的用户名，根据提示输入即可。\n\n之后会返回机器人的 token，记下备用。\n\n### 配置 Telegram 机器人\n\n接下来配置刚刚建立的 Telegram 机器人，\n\n发送 `/setprivacy` 至 @BotFather，选择刚刚建立的机器人，设置为 `Disable`，\n\n发送 `/setjoingroups` 至 @BotFather，选择刚刚建立的机器人，设置为 `Enable`，\n\n发送 `/setcommands` 至 @BotFather，选择刚刚建立的机器人，回复以下内容：\n\n```\nhelp - 显示命令清单\nlink - 连接对话到 TG 群组\nunlink_all - 解除群组中所有对话的连接\ninfo - 显示当前对话的详细信息\nchat - 创建对话\nrecog - 回复语音消息以进行识别\nextra - 获取更多功能\nupdate_info - 更新组群名字及头像\n```\n\n### 获取 Telegram ID\n\n之后获取自己的 Telegram ID，与 [@get_id_bot](https://t.me/get_id_bot) 对话，发送 `/start`，获得的一串数字即为自己的 ID，记下这串数字备用。\n\n## 配置 Docker\n\n首先确保 VPS 或群晖可以连外网，Telegram 目前需要连外网才能用。另外，有些 VPS 可能触发微信的异地登录，导致登录 Web 端微信失败（小弟有尝试在谷歌云上搭建，最后导致禁止 Web 端登录微信），相对比较安全且稳定的是在连外网的群晖上搭建。\n\n小弟使用的是[这个大大的 Docker](https://hub.docker.com/r/jemyzhang/ehforwarderbot)。首先新建存放这个 Docker 的文件夹，文件夹依照下面的层级结构建立好子文件目录：\n\n```\n📂profiles\n└── 📂default\n    ├── 📂blueset.telegram\n    │   └── config.yaml\n    ├── 📂blueset.wechat\n    └── config.yaml\n```\n\n其中，`profiles/default/config.yaml` 这个文件输入以下内容：\n\n```\nmaster_channel: blueset.telegram\nslave_channels:\n  - blueset.wechat\n```\n\n`profiles/default/blueset.telegram/config.yaml` 这个文件中输入机器人的 token 和 Telegram ID，\n\n```\ntoken: \"123456789:ABCD_1-1A2BASDFA_ASFASDFASDFASDFASF\"\nadmins:\n- 1234567\n```\n\n打开群晖 Docker ，在「注册表」标签卡中搜索「ehforwarderbot」，找到「jemyzhang/ehforwarderbot」下载映像，\n\n![ehforwarderbot_reg](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/ehforwarderbot_reg.png)\n\n待下载完成，在「映像」标签卡中点击「启动」，选择「高级设置」，在「路径」选项卡中选择存放配置文件的路径，挂载路径填写 `/data`，\n\n![ehforwarderbot_dir](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/ehforwarderbot_dir.png)\n\n之后启动容器，在「日志」或「终端机」中可以看到微信登录二维码，可以复制网址到浏览器，微信扫描二维码登录，登录成功日志会有显示，Telegram 可以收到微信的消息。\n\n![ehforwarderbot_qr](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/ehforwarderbot_qr.png)\n\n## 使用 \n\nWeb 端支持的文字、语音、文件都可以转发至 Telegram，红包、定位、朋友圈等 Web 端没有的功能不支持。\n\n### 直接回复\n\n默认会将所有微信 Web 端的消息汇总至一个消息框中，想要回复可以直接发送命令`/chat`，选择要回复的联系人或群组，之后右滑返回的消息回复即可。另外还支持 `/chat 关键词` 快速定位要回复的联系人或群组。\n\n### 分组对话\n\n如果某个联系人或群组，可以首先用两个 Telegram 账号新建一个空白群组，之后向机器人发送命令 `/link` 将某个联系人或群组连接至空白群组，也支持 `/link 关键词` 快速链接联系人或群组，之后选择空白群组，链接好之后就可以实现消息分组。\n\n### 酷功能\n\n#### 超酷贴图\n\nTelegram 有很多不错的贴图，还有很多从 Line 移植过来的贴图，比微信的贴图精致很多，其中静态贴图可以直接发送至微信，动态贴图可以借助 [Sticker download](https://t.me/Stickerdownloadbot) 这个机器人将动态贴图转成 GIF 发送。\n\n#### 定时发送\n\nTelegram 支持定时发送信息，这个也支持。\n\n","tags":["Docker"]},{"title":"大国特色奇异技巧系列之一：群晖 Docker 接管百度网盘","url":"/baidupan/","content":"\n![baiduyun_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/baiduyun_cover.png)\n\n21 世纪的欧亚大陆，天下第一超级大国有一项领先全球的科技创举，这项独步世界的先进技术可以对处在水深火热地区传播落后、低级思想的网站或应用进行屏蔽封锁。事实证明，科技创新力量大，国内的同类应用在缺少害虫的情况下，逐渐成长成问鼎天下的巨无霸，其中不乏微信、百度这样的忧质、业界凉心应用。\n\n都说科技使人变懒退步，这种事情在神奇的超级大国不会发生，我们的聊天工具有内置不允许自有生态链以外、可能会随时打不开朋友发来的链接的超级浏览器，我们有下载速度几乎为零的优秀网盘工具。因为这些优质工具，我们需要「用浏览器打开」等操作，让人动手又动脑，一举解决世界性重大科学难题——人类科技使人变懒的魔咒。\n\n人人努力上进，偏偏有人退步，「大国特色奇异技巧系列」这个系列介绍国内忧秀应用的退化降级版，帮助大家识别辨认。\n\n百度网盘是闻名全球的网盘工具，创新性地突破重大技术难关、实现 100M、200M、300M 带宽下下载速度为零，网纷纷按赞业界良心，有些人还感受到了愤怒拍桌后手疼的酥麻感觉。\n\n[baidunetdisk-crossover-vnc](https://hub.docker.com/r/johnshine/baidunetdisk-crossover-vnc) 是一位大大开发的百度网盘下载工具，将虚拟机系统和 VNC 客户端打包至一个 Docker 中，可以帮助高速、稳定下载百度网盘的文件。\n\n## 搭建\n\nbaidunetdisk-crossover-vnc 比较适合装在群晖 Docker 中，首先打开群晖 Docker ，在「注册表」中搜索「baidunetdisk」，之后下载映像，\n\n![baiduyun_reg](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/baiduyun_reg.png)\n\n待映像下载完映像后在「映像」中找到「baidunetdisk-crossover-vnc」，点击「启动」，选择「高级设置」，\n\n![baiduyun_img](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/baiduyun_img.png)\n\n默认占用 5901 端口，可以在「端口设置」中根据需要修改，\n\n![baiduyun_port](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/baiduyun_port.png)\n\n在路径中选择存放下载文件的路径，挂载路径填入`/home/baidu/baidunetdiskdownload/`，\n\n![baiduyun_dir](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/baiduyun_dir.png)\n\n设置好之后启动容器。\n\n另：如果感觉 Docker 设置起来麻烦，也可以直接使用群晖套件安装，在[这里](https://github.com/john-shine/synology-baiduNetdisk-package/releases)下载后缀为 `spk` 的群晖套件文件，打开群晖套件中心，点击「手动安装」\n\n![baiduyun_spk](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/baiduyun_spk.png)\n\n## 使用\n\n可以事先先将待下载的文件转存至百度网盘账号内，访问网址 `http://群晖 IP:自定义的端口号`即可使用百度网盘客户端，首先登录，找到要下载的文件下载，文件会下载至预先设置的文件夹内。小弟使用中速度平均在几兆/秒，最慢也在 100K 左右，相对较稳定。\n\n![baiduyun_ui](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/baiduyun_ui.png)\n\n## 客户端推荐\n\n如果只是需要看百度网盘的视频或音频，可以尝试使用在线播放。\n\n### 电脑端\n\n电脑端可以使用网页版百度网盘在线播放视频、视频。推荐使用 Firefox 浏览器，自带倍速播放。\n\n### 手机端\n\n手机端不建议使用臃肿的官方客户端，代码质量差、广告多。可以安装 ES File Explorer，百度发力海外市场的应用，支持挂载百度网盘，可以直接播放百度网盘中的视频、音频，支持倍速播放。iOS 可直接 App Store 搜索安装，Android 建议到 [MODDROID.COM](https://moddroid.com/es-file-explorer.html) 下载修改版，解锁付费功能（不建议付费入正版）。","tags":["Docker"]},{"title":"想要快乐，读读庄子——How Chuang Tzu Can Change Our Life","url":"/zhuangzi/","content":"\n![zhaungzi_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/zhaungzi_cover.png)\n\n> 人在江湖，身由自己。\n\n正如我们和邻居是「熟悉的陌生人」，除了知道有一本叫做《庄子》的书，有时用到出自这本书的成语，如「每下愈况」「朝三暮四」「庖丁解牛」等等，我们对这本书知之甚少。\n\n《庄子》这本书不好读，不仅仅是成书时间离我们远，还因为这本书是写在乱世，庄子生活的战国时期有七国争雄，战乱频繁，为了安全书中观点通过隐晦的方式书写。作者庄子，当时是管理漆树园的一个小吏。\n\n尽管《庄子》这本书不好读，但这本书深深影响了很多人的一生，包括陶渊明、李太白、白居易、苏东坡等等。小弟看了蔡璧名老师的公开课[《正是时候读庄子》](http://ocw.aca.ntu.edu.tw/ntu-ocw/ocw/cou/103S123)，后悔没有早点读这本书。\n\n作者蔡璧名老师是个奇女子，她是台大中国文学系博士、中文系副教授，出生在中医和武术世家，曾得过癌症又奇迹痊愈。看公开课时，可以配合[蔡老师的书](https://search.books.com.tw/search/query/key/蔡璧名)一起看。\n\n庄子讲的是什么？庄子讨论了跟每个人息息相关的主题：爱情、人生选择、情绪、死亡等等。下面是庄子对我们人生的几条建议：\n\n## 灵魂人的视角\n\n在庄子看来，人的一生应该是热血的，我们应该把人生当做一个 RPG （角色扮演游戏），努力克服困难，顺境时可以随造化之气乘正而行，在六气异变的逆境时可以积极应对变化，将不利因素为己所用（「若夫乘天地之正，而御六气之辩」），做一个「逍遥」的人。\n\n以地球人的视角，我们往往希望事事顺遂、追求安全感，但在灵魂人的视角，这样的一生是乏味、无趣的。庄子力主我们坚韧不拔，听从自己内心的呼唤，跳出舒适区，勇敢实现自我完成，以「灵魂人的视角过肉体人的一生」。\n\n此外，庄子希望我们要精进自己的职业、技艺或专业，因为这些可以当作是内在、不可见的生命境界于现实情境中的投影（「一龙一蛇」），以此评估生命进退消长、达标与否，作为提升自己生命境界的辅助工具。\n\n## 保持开放心态\n\n庄子认为，我们痛苦来源之一在于执意要心中所认定的「正色」「正味」，认定世界只有一种正确，自动屏蔽其他可能性，当外在环境不符其成见所预期时，便会立即断定其是非对错，是故产生得失、利害等成见，以致劳倦不安。\n\n而事实是，对立的一方可能是另一方的养料（「物无非彼，物无非是」），当陷于辩论之中时，庄子建议我们远离「此」的坚持，不固执自己原先的立场为「是」，靠近「彼」的处境，体谅对方的行为与想法，改以「两行」的态度谅解、包容不同的异议。\n\n## 注意力转向内\n\n我们会感到疲惫、痛苦的原因是，我们将太多注意力投放在无法操之在己的外在世界，「终身役役而不见其成功，苶然疲役而不知其所归」地追随世俗、主流价值，以外在世界中的鹄的为人生要务（「以物为事」）。而事实是，所有的追求和盼望都可能随时落空，这使得我们身体坐立不安，精神心神不宁，难以获得长久、真实的「逍遥」。\n\n庄子并非是劝导我们拒绝或舍弃外在世界的所有，而是希望我们将专注力的探照灯转向，照回内在自我的身、心、灵，致力从事一己身体、心灵的控制与锻炼，以期使个我的身心不论置身何种处境、际遇，都能保持平和、镇静与放松，拥有稳定长远的安乐。\n\n## 勇于面对现实\n\n情绪的来源之一是我们不愿承认某些事实。庄子提醒我们，勤奋地去寻找自己没有看清的事实和真相，接受现实，在行为上承认事实，我们的情绪就会少很多，心情会平静很多（「知不可奈何，而安之若命」）。\n\n同时，我们要勇于面对自己，可以活在自己的黑暗面中，对自己诚实，承认自己想要的，不要受到世俗的影响，勇敢去争取自己想要的。\n\n## 深情而不沉溺\n\n关于情感，庄子认为，理想的关系像是你喜欢一棵树，只是出自本心地这棵树，为它浇水、施肥、驱虫，而不是想吃树上的果子，或者把树做成家具。喜欢一个人，只是单纯地喜欢，希望他可以终日逍遥、心安身健，而不是把对方当成一个工具，相处的过程中，不会因为提起某个名字、碰触某件话题以致情绪欠佳甚至翻脸无情。\n\n我们在情感里不要把对方当成一个器具，同时也应该避免自己被当成一个器具，深情但不陷溺在感情里（「不以好恶内伤其身」）。关于爱情，庄子力劝我们应该去寻找那个发光、能够照亮我们生命的人，而前提是我们自己先变这样的人，这样我们才会吸引到这样的人。\n\n## 选择权在于我\n\n庄子提醒我们，人要遭受外在情境的种种压迫与影响，或是能够主动地乘御于情境之上，皆是「咸其自取」、操之在己的。一旦了解到自身拥有选择的权力，许多原本以为是身不由己的困难，便可藉由一己之决心、意志而克服。这也正是庄子所揭示的真正自由——必须为自己的每一个选择负责，不得一味归咎于外在的境遇而加以推拖。另外，庄子还为我们提供了一些小工具：\n\n「用心若镜」：将自己的心陶冶如一面镜子，无论面对怎样的人事物，都不因有所好恶而刻意迎向或离弃所映照的事物，心平如镜地与人事物应对交接，却不将已然过往的影像情绪留藏镜里，陷溺其中（「至人之用心若镜，不将不迎，应而不藏」）。\n\n「照之于天」：以日、月为喻——抽离一己「将执而不化」所固守的成见、跳脱一己的立场，看待、体谅人我与所有人间世的异议与纷争。\n\n「环中」「道枢」：从原本对立的两端抽离而出，转移立场居于车轮或门户的轴心，如此便与轮框、门户上无数过往的「彼」「此」皆成等距——远离了「此」的坚持、靠近「彼」的处境。\n\n## 保持身心强健\n\n在庄子眼中，身体和心灵难分轩轾地影响、决定着我们的生命（「其形化，其心与之然」）。形体一旦衰败，心神也将随之日渐消损，步上「近死」之途；同理，身体一旦升进，心灵的操控与自主能力也将随之一并提升。\n\n庄子告诉我们，当我们改变「用心」，原本在情境中「日以心斗」的情绪归于平静祥和，保持心绪在「心如死灰」的状态，身体也较不会因情境的压迫而感到疲惫不堪；而若能经由身体的锻炼，将身体维持在「形如稿木」的放松轻盈，亦有助于心绪的宁定，也更易以开阔、包容的眼光与态度，面对生命中的一切处境。\n"},{"title":"这样用 Kindle 有点不一样","url":"/kindle/","content":"\n![kindle_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/kindle_cover.png)\n\n1. 新买的 Kindle 注册后注意断开 WiFi 防止自动升级固件，待越狱之后再升级固件，越狱可以解锁更多可能性（如阅读 epub 格式电子书等等），越狱相关可以参考[这里](https://bookfere.com/skills/jailbreak)。\n2. 推荐的越狱插件：① [File Browser](https://bookfere.com/post/823.html)：可以方便地在浏览器管理 Kindle 文件；② [Koreader](https://bookfere.com/post/39.html)：超酷的阅读应用，方便在 Kindle 阅读 epub 等格式电子书，pdf 文件支持切边、重排，重排效果很赞，甚至可以 OCR 识别扫描 pdf 文件中的文字。 \n3. Kindle 屏幕较脆弱（小弟已经用坏两个了，一个进水、一个被压），建议装一个保护套，一般都带休眠功能，打开即读也挺好的。如果感觉重，也可以取出保护套，记得取出时，先取一个对角，再取另一个对角，方能取出。\n4. 天下第一超级大国中国的外文翻译书删减随意、翻译质量差、引进时间长，读台版、英文原版是一个更好、不得不的选择。电子版是购买纸质书的一个补充，可以节省一部分印刷、物流费用，且无需等待物流时间。\n5. 购买台版电子书可以到 [Readmoo 读墨电子书](https://readmoo.com/)、[Kobo](https://www.kobo.com)、[Google Play 图书](https://play.google.com/store/books)、[BOOKWALKER](http://www.bookwalker.com.tw/)、[博客来电子书](http://www.books.com.tw/)、[Amazon.com 繁中电子书店](https://www.amazon.com/Chinese-Traditional-eBooks/)、[HyRead](https://ebook.hyread.com.tw/)、[pubu 书城](https://www.pubu.com.tw/)、[TAAZE 读册生活](https://www.taaze.tw/) 等平台，购买前可以先比价，比价可以用「[台湾电子书搜寻](https://taiwan-ebook-lover.github.io/)」这个小工具，有网页版、 App。其中，各平台对比可以参考这位大大的[文章](https://twinsyang.net/archives/19487)。购书前建议准备好外币银行卡。\n6. 在其他平台购买的电子书想要在 Kindle 上阅读，需要去 DRM 保护、转成 mobi 格式，Kobo 可以很容易去 DRM（参考这个大大的[文章](https://medium.com/akichy/筆記-如何用-kindle-閱讀-kobo-樂天-電子書檔案-5aa529b61203)）。如果比较看重在 Kindle 上阅读这一点，建议在 Kobo 上购买电子书。另外，中亚、美亚账号不互通，建议两个邮箱注册，想在登录美亚的 Kindle 上读中亚的书需要去 DRM。\n7. 寻找英文原版书可以直接 Google 关键词「书名 mobi」或「书名 epub」，另外可以到这两个网站搜索：[Library Genesis](http://gen.lib.rus.ec/)、[The Pirate Bay](https://thepiratebay.org/index.html)。\n8. 购买英文原版书可以到 [Amazon.com](https://www.amazon.com) 购买，需要注册美亚账号，填入「有效的」美国地址（可以在[这里](http://www.fakenamegenerator.com)生成），建议选择 AK、DE、MT、NH，OR 五个免税州中的地址，免扣税（重要，小弟被扣了好几次税才知道）。\n9. 登录美亚账号后 Kindle 会有广告，广告会出现在锁屏及主页底部。有广告需要右划才能解锁，如果感觉繁琐可以联系[在线客服](https://www.amazon.com/hz/contact-us/)，选择「Kindle 设备」，接入人工客服，说 Kindle 上的促销广告很吸引人，奈何自己在中国用不上，每每想到此心急如焚，茶不思饭不想，可以帮去掉广告吗，类似下面的话术：\n\n> Hi, I've got a Kindle, but I am in China now. The special offer ads are nothing to me, would you please unsubscribe special offers for me? Thanks a lot.\n\n之后客服会帮操作去广告，有些客服需要提供给设备序列号，成功去除 Kindle 会显示一条通知，广告就可以去掉了。\n\n10. Kindle 支持图书馆借书。前提是有一张美国图书馆的借书证或者有一个美国的非虚拟手机号（Google Voice 这类虚拟手机号不可以）。借书是借助 [Libby](https://www.overdrive.com/apps/libby/) 这个服务，有 [Web 端](https://libbyapp.com) 及手机端。首先先添加图书馆，有借书证直接搜索图书馆添加，没有借书证，可以根据手机号查询归属地邮编，搜索添加当地的图书馆。之后输入手机号验证即可在线办理借书证（少部分图书馆不支持在线办理）。添加好借书证就可以借书了，注意有些书需要预定排队（图书馆图书馆不拥有电子书版权，仅仅是一定数量数字拷贝，且每份数字拷贝有借阅次数限制），如果上面有显示「Kindle 格式」，则可以选 Kindle 格式，跳转至 Kindle 借阅链接，点击「借阅」即可。\n11. Kindle 可以看漫画，漫画资源可以到[这里](https://volmoe.com)下载。\n12. Kindle 词典资源可以到[这里](https://bookfere.com/dict)下载，英文词典推荐朗文、柯林斯、牛津词典，中文词典推荐萌典。另外 Kindle 支持选中文本在「维基百科」搜索，可以作为词典的一个补充。\n\n![kindle_calendar](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/kindle_calendar.jpeg)"},{"title":"这个甜甜圈很酷——Google Nest Mini/Home Mini 指南","url":"/nest/","content":"\n![nest_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/nest_cover.png)\n\nGoogle Nest Mini （小弟的是旧款 Google Home Mini）是 Google 出的小型音箱，小弟觉得够酷够实用，以下是一些使用建议：\n\n## 基本设置\n\n使用前可以先注册好 Google 账号，建议使用 Gmail App 或 Google App 注册，免输手机号。注意配置好路由器，可以连外网，Google Nest Mini 所有功能均需外网环境下使用。手机安装好名为「Google Home」的 App，Android 系统非原生系统可能安装 Google 框架，iOS 系统需非中国区账号。\n\nGoogle Nest Mini ，支持英文、中文。英文可以更换语音角色，还有名人录制的声音，小弟觉得 Google Assistant 的英文声音很自然（目前感觉是最自然的），听起来有活力。另外，可以添加中文，中文支持的指令比英文少，且感不够自然、不支持「连续对话」，建议还是使用英文。比较酷的一点是，Google  Nest Mini 支持自动识别中英文，问英文，回答是英文，问中文，回答是中文。\n\nGoogle Nest Mini 唤醒软硬件都做了优化，唤醒异常灵敏。唤醒词是「Hey Google」或「OK Google」，另外「Hey googoo」「Hey noddle」「OK goodle」「Hey d00doo」这些也可以唤醒。另外，Google Nest Mini 支持超酷的连续对话，无需一直说唤醒词。\n\nGoogle Nest Mini 支持 Routines，可以将一系列命令集合成一个命令，方便日常操作。\n\nGoogle Nest Mini 支持各种 action，详细可以到[这里](https://assistant.google.com/explore)或 Google Assistant 应用中查看。\n\n## 作为音箱\n\n小弟认为  Nest Mini  作为音箱已经值回票价，外观漂亮，音质比手机或电脑自带的好一点，更酷的是可以直接用语音控制，如\n\n\"Hey Google, pause the music.\"\n\n \"Hey Google, continue to play.\"\n\n\"Hey Google, turn it up.\"\n\n\"Hey Google, louder.\" \n\n\"Hey Google, stop.\"\n\n等等。 \n\nNest Mini 可以绑定 Spotify、YouTube Music 等平台账号，之后可以直接语音控制。\n\n\"Hey Google, play relaxing music on Spotify.\"\n\n\"Hey Google, play my 'Discover Weekly' playlist on Spotify.\"\n\n等等。\n\n或者可以利用 Chromecast 播放音乐（各种支持 Chromecast 的 App、Chrome 浏览器等等 ），国内的音乐应用可以通过连接蓝牙播放。\n\n## 实体  Google\n\nGoogle Nest Mini 像实体的 Google ，简单的问题可以直接用语音获得答案。日常的询问，如日常天气、现在的时间、设定定时器、设定闹钟都可以，如\n\n \"Hey Google, what's the weather like?\"\n\n \"Hey Google, what's the forecast for today?\"\n\n \"Hey Google, set a timer for [time].\"\n\n\"Hey Google, cancel my timer.\"\n\n\"Hey Google, what time is it?\"\n\n\"Hey Google, set an alarm for [time].\" \n\nGoogle Nest Mini 天气、提醒、闹钟\n\n或者听新闻（需要先在 App 内选新闻来源），中文新闻有「东森新闻」、「TVBS 新闻」、「公视新闻  PTS News」，如\n\n\"Hey Google, give me some news.\" \n\n或者问一些百科问题，如\n\n\"Hey Google, how to spell [word]?\" \n\n\"Hey Google, how do you say [word or phrase] in [language]?\" \n\n\"Hey Google, why the sky blue?\" \n\n\"Hey Google, who is Steve Jobs?\" \n\n等等。\n\n## 小朋友的好伙伴\n\nGoogle Nest Mini 是小朋友的好伙伴，对世界充满好奇心的小朋友的问题 Google 总会耐心解答，如\n\n\"Hey Google, tell me a joke.\"\n\n\"Hey Google, sing a song.\"\n\n\"Hey Google, what does the cat say?\"\n\n\"Hey Google, play a game.\"\n\n等等。\n\n## 控制其他设备\n\nGoogle Nest Mini 可以很方便地控制其他硬件，可以直接购买支持 Google Assistant 的设备，也可以自己搭建接入。"},{"title":"群晖虚拟机安装软路由","url":"/openwrt/","content":"\n![openwrt_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt_cover.png)\n\n> 我外表是胖，但内在的我是瘦的。你有没有想到过每个胖人的内部都有个瘦人，就像有人所说，每块石头里都有座雕像？\n\n软路由是一台运行 [OpenWrt]( https://openwrt.org/) 系统的主机，以软件的形式实现拨号、DHCP 等路由器功能。相较于「硬路由」，使用软路由的主要理由有：\n\n1、可以更快更稳地科学上网，因为一个只处理网络相关的 Linux（OpenWrt 基于 Linux） 处理需要消耗 CPU 的运算（如科学上网中的加密解密过程）比其他设备做得更好。\n\n2、有些设备需要科学上网的环境才能正常使用，如 Google Home，Android TV 等等。\n\n这篇文章是群晖虚拟机运行 OpenWrt 作为主路由的步骤，这样做的好处是免去另外增添额外硬件。如果群晖只有一个网口，OpenWrt 只能以「旁路由」的方式运行，想以主路由的方式运行，建议群晖有两个物理网口。\n\n## 网络连接建议\n\n大多数光猫默认负责拨号，小弟建议改成桥接模式，不同光猫设置方法不尽相同，可以自行搜索方法，如果搞不定，可以像小弟一样到淘宝寻求办法。\n\n建议软路由做主路由，硬理由以无线 AP 的模式运行，这样的好处是少了一层 NAT ，减少网络损耗，具体网络连接方式如下：\n\n![openwrt1](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt1.png)\n\n## 建立虚拟机\n\n首先准备好软路由固件，固件可以自己编译（推荐用 Github Actions 编译），也可以使用别人编译好的固件。编译好的固件可以到[恩山论坛 x86 系统区](https://www.right.com.cn/forum/forum-169-1.html)去找，有很多大大编译好的，比如小弟使用的[这个](https://www.right.com.cn/forum/thread-3708606-1-1.html)。\n\n注意：固件文件一般会有 combined 和 uefi-gpt 两种，前者支持 MBR 的分区表和 BIOS 系统，后者支持 GPT 分区表和 EFI 系统。我们这里选用 uefi-gpt 即可，下载的固件后缀名为「.gz」，需要解压成「.img」文件。\n\n打开群晖「套件中心」，搜索「Virtual Machine Manager」，下载并安装，\n\n![openwrt2](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt2.png)\n\n打开 Virtual Machine Manager，在「网络」中添加两个网口，一个作为软路由 LAN 口（作为 DHCP 的网口），一个作为 WAN 口（连外网的网口），\n\n![openwrt3](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt3.png)\n\n最终添加两个网口，\n\n![openwrt4](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt4.png)\n\n在「映像」中选择「创建」，选择「从电脑上传」，上传后缀为「.img」的固件文件，\n\n![openwrt5](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt5.png)\n\n在「虚拟机」中选择「新建」→「导入」，选择刚刚的映像，\n\n![openwrt7](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt7.png)\n\n填入虚拟机名称，名字任意，如 openwrt，选择 CPU、内存（建议 1G 或以上）配置，点击「下一步」，\n\n![openwrt8](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt8.png)\n\n选择硬盘容量，最小是 10G，点击「下一步」，\n\n![openwrt9](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt9.png)\n\n点击「+」新增网口，注意 LAN（作为 DHCP 的网口）在上， WAN（连外网的网口）在下，点击「下一步」，\n\n![openwrt10](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt10.png)\n\n建议勾选「开机自启动」，点击「下一步」，\n\n![openwrt11](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt11.png)\n\n权限可以全部勾选，点击「下一步」，\n\n![openwrt12](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt12.png)\n\n确认配置，点击「完成」。\n\n![openwrt13](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt13.png)\n\n## 联网设置\n\n### 配置网口\n\nOpenWrt 模拟了一个管理地址 192.168.1.1 ，可能与我们的路由器或光猫冲突，我们需要先调整管理界面地址。\n\n在「虚拟机」标签卡中找到刚刚建立的虚拟机，若未开机可以先开机，点击「连接」，\n\n![openwrt14](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt14.png)\n\n在新浏览器标签页可以看到 OpenWrt 运行的命令行，点击回车，看到 OpenWrt 的标志，之后输入`vi /etc/config/network`，点击回车，\n\n![openwrt15](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt15.png)\n\n之后输入`i`，进入编辑模式，找到「lan」，将地址改为其他未占用的 IP，如`192.168.77.1`，之后按 esc 键退出编辑模式，之后重启虚拟机。\n\n![openwrt16](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt16.png)\n\n下一步将硬路由设置为 AP 模式，不同路由器设置方法不一样，若是华硕路由器可以下载 [ASUS Router](https://www.asus.com/asus-router-app/) 这个 App 将路由器改为 AP 模式，\n\n![openwrt17](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt17_new.png)\n\n先将群晖关机，将一根网线一端插入  LAN 口（作为 DHCP 的网口），另一端插入路由器，之后将群晖开机，\n\n电脑连接路由器的 WiFi，访问刚刚设定的 OpenWrt 的管理地址，如`192.168.77.1`，输入密码（可以在固件介绍页找到），找到「网络」→「接口」，在 WAN 口点击「修改」，\n\n![openwrt18](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt18_new.png)\n\n设置连外网方式，如选择「PPPoE」，填入宽带账号、密码，\n\n![openwrt19](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt19_new.png)\n\n稍等片刻，应该可以联网了。\n\n### 科学上网设置\n\nOpenWrt 固件一般会内置不止一个科学上网工具，如 ShadowSocksR Plus+、PassWall、Hello World、OpenClash，填入节点信息即可，或者填入订阅地址。\n\n![openwrt20](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt20_new.png)\n\n### 其他\n\n若群晖无法联网，可以这样修改，在「控制面板」中找到「网络」，在「常规」选项卡中修改网关地址，将 OpenWrt 的管理地址移到上面。\n\n![openwrt21](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt21_new.png)\n\n## 软路由设置\n\nOpenWrt 功能很多，以下是几个常用功能的位置：\n\n### 设置密码\n\n在「系统」→「管理权」中可以修改登录密码。\n\n![openwrt22](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt22.png)\n\n### 端口转发\n\n我们想在外网访问内网的服务或设备，可以使用「端口转发」功能，可以在「网络」→「防火墙」→「端口转发」中找到。\n\n![openwrt23](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt23_new.png)\n\n### DNS 劫持\n\n需要将特定域名跳转至特定地址，可以使用「DNS 劫持」，可以在「网络」→「主机名」找到。\n\n![openwrt24](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt24_new.png)\n\n## 管理 Openwrt\n\n### SSH 连接\n\nOpenWrt 有内置终端机，在「系统」→「TTYD」可以找到。\n\n![openwrt25](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt25.png)\n\n### STP 管理文件\n\n在 STP 客户端，如 Transmit 中选择「STP」，填入 OpenWrt IP地址，用户名填「root」，之后就可以管理 OpenWrt 文件。\n\n![openwrt27](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt27.png)\n\n### 固件升级\n\nOpenWrt 支持固件升级，若使用同一个作者编译的，可以保留配置，Web 页面升级 \\*.gz 文件无需解压，在「系统」→「备份/升级」中上传固件即可。\n\n![openwrt26](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/openwrt26_new.png)\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"Apple Watch 使用理由","url":"/watch/","content":"\n![watch_cover2](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/watch_cover2.png)\n\n小弟很幸运，很早以前嫂子就送小弟一块 Apple Watch，如果要说这块表有没有用，用一句话描述很合适——「还没用的时候感觉手机可以替代，用了之后离不开」，以下是有一块 Apple Watch 的理由：\n\n## 提醒珍惜时间\n\n正如手机的功能之一是打电话，手表可以看时间。 Apple Watch 提供最酷的时间显示，偏好简洁可以选大字体表盘，喜欢运动可以选运动表盘，还有万花筒、蝴蝶等等可选，每个表盘都设计精美。最酷的是「米奇」「米妮」表盘——这款复刻 1933年 的迪士尼表盘，点一下表盘可以报时，中文「米妮」声音很萌，有时还会加「哇呜」等等语气词。充电时会显示大字体时间，敲一下桌子会显示。\n\n我们需要一个可以随时看到时间的物品的原因不仅是我们仅仅获得时间信息，更重要的是会给我们一个珍惜时间提醒。佛经的作用不仅仅是提供文字信息，实体的经书犹如佛像，可以提供我们一个可以看到、触摸的实体，提醒我们重要的不是经书，而是佛经中的教义。而时间是我们最稀缺资源，无法再生，一块实体表以一个实体的形式通过数字的笔画、指针的转动提醒我们时间在流逝，人生有限。\n\n## 减少手机依赖\n\n手机的硬件越来越厉害，能做的事情越来越多，我们花在手机上的时间也越来越多，甚至花了过多时间。我们不想沉溺于几英寸的屏幕，又担心错过「重要」的信息。Apple Watch 可以设置每个应用的通知形式，过滤「不重要」的信息，并以一种「温和」「可以感知」的振动方式提醒。我们大可以设置好应用的通知与否，放下手机，专注于其他事情，而手腕收到「重要」通知的振动时，抬手一窥通知简要详情，在需要的时候打开手机。\n\n## 帮助保持健康\n\nApple Watch 内置保持健康提醒，每日会以温和、不打扰、鼓励为主的方式发提醒。我们快接近设定的目标时，会有提醒，我们超过设定的目标时，会鼓励，我们久坐时，会提醒站立，每个提醒文案和动画都是精心设计，使我们不自觉想要完成健身目标。\n\n## 简化日常操作\n\n手机功能越来越多，操作也越发复杂，有时候我们可能两手拿很多东西不方便，又需要看一些信息或执行一些简单操作，这时候 Apple Watch 的作用就体现出来了，下面是一些例子：\n\n1. 简化付款\n\n在中国好像都偏好用二维码、条形码付款，支付宝有出手表付款码，并且可以在表盘上加快捷入口，只要抬腕、点一下即可展示付款码，有二维码、条形码（一般店员扫的是条形码，自己扣机器的是二维码），比较酷一点是，付款码支持「离线」，即Apple Watch 无需联网、连手机可以独立使用（确切地说是半离线，扫码的电脑需要联网）。\n\n2. 简化看购物清单\n\n有时我们会写一个购物清单去购物，有时手机并不是很方便，因为手机会占用一只手。Google Keep 可以解决这个问题，Google Keep 是一个轻量级的笔记应用，在 Apple Watch 很好地适配，且执行速度很快，可以提前打开手表上的 Google Keep ，找到要看的笔记，之后只要抬腕就可以看到诸如购物清单等简单的文字信息。\n\n3. 简化控制家电\n\n如果有搭建或购买 Homekit 的设备，可以直接用手表控制，不用到处找各种开关，可以作为语音控制设备的一个补充。\n\n4. 简化用天气等小工具\n\n手机不在身边，可以用 Apple Watch 完成一些轻量级的操作，如查看天气、设定定时器等等。\n\n5. 简化导航\n\n现在的道路越来越复杂，去陌生地方不得不带手机的原因之一是手机可以导航。小弟曾经尝试用 Apple Watch 的地图导航，是可以基本完成导航这个功能的。首先需要在 iOS 自带地图设定好起点、终点，启动导航，此时打开 Apple Watch 就可以看到导航开始，在过程中，表盘上会显示下一步要乘哪路车，或者应该走哪条路，待该下车或拐弯的时候会振动提醒，同时表盘提示下一步要做什么。整个过程中， Apple Watch 会将路线以文字显示，适时提醒。"},{"title":"DIY 超酷的像素钟","url":"/awtrix/","content":"\n![awtrix_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/awtrix_cover.png)\n\n![awtrix_display](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/awtrix_display.png)\n\n小弟以前听说过 [LaMetric TIME](https://lametric.com/)，觉得很酷，像桌面版的 Apple Watch，可以显示一些固定信息（如时间、天气等等），还可以显示通知，过滤信息。但是囊中羞涩，只能远观。直到发现这位大大的[视频](https://www.youtube.com/playlist?list=PLmxTR4AYd_9T3Lw7PR9u_UrtplM1Dqp77)，详细记录了替代品的完整制作过程，小弟根据步骤也做了一个，期间踩了一些坑，以下是过程：\n\n## 购买配件\n\n像素钟的名字是 [Awtrix](https://blueforcer.de/awtrix-2-0/)，在[这里](https://awtrixdocs.blueforcer.de/#/en-en/hardware)中可以找到需要的电路元件，主要有以下：\n\n基本元件：\n- Wemos D1 mini（也可以用 NodeMCU 等 Esp8266 模块，免焊接）\n- 8x32 WS2812B 全彩软像素屏\n- 杜邦线若干（建议公对母、公对公、母对母都备一些，方便延长线）\n- MicroUSB 数据线\n\n可选配件：\n- DC 直流电源插头\n- 5v 4A电源\n- 1000uF 10V 电容\n- LDR GL5528 光敏电阻\n- 1000Ω 电阻\n- APDS-9960 手势模块\n- MicroSD 卡模块\n- 扬声器\n\n（以上元件都可以在淘宝买到，直接搜索关键词即可，若选择 Wemos D1 mini，可能还需要一个电烙铁进行焊接）。\n\n其他配件：\n1.3D 打印光栅\n默认像素灯是圆形，加入光栅可以将圆形变成方形，显示效果更好，建议打印。打印文件可以在 [Thingiverse](https://www.thingiverse.com/thing:2791276) 下载，小弟是在[魔猴网](http://www.mohou.com/)打印的，加运费大概 60-70 元。\n\n2.外壳（可选）\n可选外壳，非必选，打印成本较高，另外作者推出了 Awtrix Pro，外壳和之前的不一样。\n\n3.亚克力蒙版\n可以增强显示效果，淘宝搜索「亚克力定制」即可，颜色选「黑茶色」，尺寸可以选 95×340×2mm。\n\n4.A3 纸\n起到增强显示效果的作用，A4 纸不够长。\n\n## 服务器端\n\nAwtrix 分服务器端与控制端，其中服务器端小弟选择用群晖 Docker 运行，也可以用树莓派（新的外壳可以直接放入树莓派），甚至是 Android 手机。\n\n下面是 Docker 的步骤，在注册表中搜索「whyet」，下载「whyet/awtrix2」这个映像。映像下载好运行映像，小弟没搞清楚配置文件的路径，所以没有配置路径相关，另外 Awtrix 默认会占用 7000 端口号，可以根据自己实际情况调整。\n\n![docker_awtrix](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/docker_awtrix.png)\n\n容器运行后，可以在日志后终端中看到安装情况，待 jar 文件下载完成，在浏览器中打开 `http://群晖 IP:7000`，就可以进入 Awtrix 服务器端，因为还没有控制端，所以会有未连接的提示。\n\n![awtrix_manager](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/awtrix_manager.png)\n\n另外，服务端适配了移动端，可以手机端进行控制。由于是运行在群晖中，可以通过配置 DDNS 与端口映射实现外网访问。\n\n## 控制端\n\n### 刷入固件\n\n1.控制端刷入固件非常容易，首先要下载相应模块的驱动，若是 D1 mini，请前往[这里](https://wiki.wemos.cc/downloads)下载，若是 NodeMCU 请前往[这里](https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers) 下载。\n\n2.下载安装 [NodeMCU PyFlasher](https://github.com/marcelstoer/nodemcu-pyflasher/releases) 及控制端[固件](https://blueforcer.de/awtrix/beta/firmware.bin)，将模块用 MicroUSB 数据线连接至电脑 USB 口，选择好端口及固件路径，点击[刷入]。\n\n![awtrix_flash](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/awtrix_flash.png)\n\n刷入成功可以看到 Awtrix 的 AP，连入这个 WiFi（密码是 awtrixxx），之后填入 WiFi 信息（名称、密码）及服务端 IP （即群晖 IP）即可（无需端口号）。\n\n![awtrix_wifi](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/awtrix_wifi.png)\n\n### 连接电路元件及组装\n\n1.连接按照官方的[电路图](https://awtrixdocs.blueforcer.de/#/en-en/hardware)连接即可，连接成功默认显示「时间」 App。\n\n注意：正负极不要接反。\n\n2.显示部分按照亚克力板、纸（裁成亚克力板大小）、光栅、像素灯从外到底的顺序，用双面胶粘住。若打印了外壳，可以将元件套入外壳中。\n\n![awtrix_wire](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/awtrix_wire_mini.JPG)\n\n3.连接好后，按几次 D1 mini 的「reset」键，待屏幕出现图像启动即可。\n\n### App 推荐\n\nAwtrix 支持多个 App，以下是几个 App 介绍：\n\nTime：默认自带，可以在设置中调整时区，可以选择日期、时间 12/24 制、是否显示星期指示格式。\n\nOpenWeather：需到 [OpenWeather](https://home.openweathermap.org/) 注册填入 APIKey。填入之后位置 ID，可以在[这里](https://openweathermap.org/city)。 \n\nAnimations：可以显示随机动画，很有趣，无需配置。目前总计有二十多种动画，包括：91yinpin、彩虹（Rainbow）、老虎机（SlotMachine）、漩涡（Swirl）、Shockwave、KnightRider、Raindrops、Starfield、ghost&pac、Fire2、蝙蝠侠（batman）、Metaballs、emoji、candycane、nyancat、贪吃蛇（snake）、俄罗斯方块（tetris）、吃豆人（pacman）、马力欧（mario）、fire、太空侵略者（space invader）、invader attack、kamehameha、yoshi、Amiga、Smiley\n\nMoon：可以显示当日月相（即月圆月缺），无需配置。\n\nPM：可以显示地区 PM2.5 值，需要填入位置监测点位置 ID。\n\nMatrix：显示黑客帝国里面的矩阵动画。\n\nSpotify：登录 Spotify 账号即可，每次切换歌曲可以显示歌名（目前仅支持英文显示，其他语言显示空白）。\n\n## 固件升级\n\nAwtrix 控制端升级可以直接在控制界面在线升级，服务端可以通过重启 Docker，重新下载服务器端 jar 文件的形式升级。\n"},{"title":"Freenom 申请免费域名","url":"/domain/","content":"\n![domain_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/domain_cover.png)\n\n我们有时候有需要用到域名，比如建博客、搭建伪装流量、访问家中的设备等等，如果不想花钱买域名，[Freenom](https://www.freenom.com) 提供了 .tk、.ml、 .ga、.cf、.gq 域名，是一个选择。\n\n## 获取域名\n\n**操作时建议全程美国 IP。**首先打开 [Freenom](https://www.freenom.com/) 网站，默认注册是隐藏的，直接在搜索框中需要的域名，务必加后缀，如「drunk-fish.tk」，若显示绿色的「Selected」按钮，说明域名可用。依次输入想要的域名（需加后缀「.tk、.ml、 .ga、.cf、.gq」 ），之后点击「checkout」按钮，\n\n![domain1](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/domain1.png)\n\n选择「12个月」，\n\n![domain2](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/domain2.png)\n\n输入邮箱或使用 Google 或 Facebook 账号登录，登录邮箱打开验证链接，\n\n![domain3](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/domain3.png)\n\n填写个人信息，其中美国地址建议在这里生成，\n\n![domain4](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/domain4.png)\n\n此时申请域名成功。\n\n![domain5](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/domain5.png)\n\n注意：若出现以下提示建议更换美国 IP 重试。\n\n![domain6](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/domain6.png)\n\n## 域名解析\n\n申请域名之后可以根据实际情况设置域名解析。首先找到要解析的域名，Freenom 可以选择「服务」，之后选择「我的域名」，\n\n![domain7](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/domain7.png)\n\n找到要解析的域名如 drunk-fish.tk，选择「管理域名」，\n\n![domain8](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/domain8.png)\n\n选择「管理 DNS 记录」，\n\n![domain9](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/domain9.png)\n\n之后就可以修改 DNS 解析，\n\n![domain10](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/domain10.png)\n\n其中 drunk-fish.ga 是一级域名， www.drunk-fish.ga 是二级域名， www.xiaoyu.drunk-fish.ga 是三级域名，二级、三级域名都是子域名。\n\n主机记录是域名前缀，如 www.drunk-fish.ga， `www` 即为这个子域名的主机记录。其中主机记录常用的有以下两个：\n\n1. A 记录\n\n如果虚拟主机是独立 IP，使用 A 记录类型，记录值填写服务器 IP。主机记录内容填写域名前缀，常见用法有:\n\n- `www`  解析至域名 www.drunk-fish.ga\n- `@` 或留空    直接解析至主域名 drunk-fish.ga\n- `*` 解析至域名 *.drunk-fish.ga\n\n2. CNAME 记录\n\n如果虚拟主机不是独立IP，使用 A 记录类型，用法与 A记录相似。\n\nTTL 是一条域名解析记录在 DNS 服务器中的存留时间，一般默认值即可。\n\n注意：域名解析需要一定时间，几分钟至几小时不等，可以在终端机输入 `ping 域名`检查是否解析成功。\n\n## 域名续期\n\n记得设好提醒续约域名，域名快到期也会收到邮件，记得续约。\n"},{"title":"Terminal 这样美化很酷","url":"/terminal/","content":"\n![terminal_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/terminal_cover.png)\n\n小弟看到很多人把 macOS 下的终端 Bash 换成了 Oh My Zsh，可以设置主题和插件，比自带的黑底白字酷很多，以下是折腾步骤：\n\n![terminal_agnoster](https://cdn.jsdelivr.net/gh/drunkfish7/pic2@master/uPic/terminal_agnoster.gif)\n\n## 安装 iTerm2\n\n[iTerm2](https://iterm2.com/) 是一个终端机替代品，提供了比系统自带终端机更多的[功能](https://iterm2.com/features.html)，安装 iTerm2 非常简单，[官网](https://iterm2.com/downloads.html)下载安装即可。\n\niTerm2 的使用可以参照[这篇文章](http://swiftcafe.io/2015/07/25/iterm/)。\n\n## 安装 Oh My ZSH\n\n系统自带 Shell 是 Bash，[Oh My ZSH](https://ohmyz.sh/) 是一个更好用的 Shell，安装步骤如下：\n\n### 前期准备\n\n1.安装 Homebrew\n\n[Homebrew](https://brew.sh/) 是 MacOS 下的包管理工具，类似于 Ubuntu 下的 apt-get 或 CentOS 下的 yum。安装 Homebrew 首先要确保安装 Xcode 命令行工具（如未安装可以使用命令 `xcode-select --install` 安装，详见[这里](https://docs.brew.sh/Installation)，之后输入命令\n\n```\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\n即可安装 Homebrew。\n\n安装时需要输入系统用户密码，之后会提示下载和安装，之后等待安装完成，安装时间与网速有关（建议在科学上网环境）。\n\n![homebrew](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/homebrew.png)\n\nHomebrew 的使用可以参照[这篇文章](https://www.zybuluo.com/phper/note/87055)。\n\n若报错 curl: (7) Failed to connect to raw.githubusercontent.com port 443:Connection refused 可参考[这里](https://www.cnblogs.com/qichao123/p/12092933.html)。\n\n2.安装 Wget\n\n安装好 Homebrew 之后再安装 Wget，[Wget](https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/wget.html) 是一个下载文件的工具，安装输入命令 \n\n```\nbrew install wget\n```\n\n等待安装完成即可。\n\n### 安装 Oh My ZSH\n\n之后安装 Oh My ZSH，输入命令\n\n```\nsh -c \"$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-Zsh/master/tools/install.sh -O -)\"\n```\n\n安装成功后会提示是否将 zsh 设为默认 shell，输入系统用户密码即可。此时 Oh My ZSH 已经装好了。\n\n![zsh_done](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/zsh_done.png)\n\n## 配置主题\n\nzsh 很酷的一点是支持主题配置，主题方案很多，可参见[这里](https://github.com/ohmyzsh/ohmyzsh/wiki/Themes) 和 [这里](https://github.com/ohmyzsh/ohmyzsh/wiki/External-themes)。小弟使用的是 [agnoster](https://github.com/agnoster/agnoster-zsh-theme) ，这款主题使用了 [Solarized](https://ethanschoonover.com/solarized/) 主题，\n\n![solarized-yinyang](https://github.com/altercation/solarized/raw/master/img/solarized-yinyang.png)\n\n首先设置颜色，在 iTerm2->Preferences->Profiles 中可以设置颜色和字体，颜色选择 Solarized Dark ，\n\n![iterm_color](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/iterm_color.png)\n\n字体选择 Source Code Pro for Powerline（在[这里](https://github.com/powerline/fonts/tree/master/SourceCodePro)下载）。\n\n![iterm_font](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/iterm_font.png)\n\n打开 Finder，按快捷键 Shift-Command-句号（.）显示系统隐藏文件\n\n![hidden_files](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/hidden_files.png)\n\n用文本编辑器（如 Visual Studio Code）打开 ~/.zshrc 这个文件，修改主题为 agnoster ，\n\n![zshrc](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/zshrc.png)重启 iTerm2 之后就可以看到安装主题后的效果。\n\n## 安装插件\n\nzsh 支持插件，可扩展功能，介绍几个常用插件。\n\n### git\n\ngit 插件内置，功能是可以使用 git 命令缩写。如  ga='git add'，alias gau='git add --update'\n\n使用下面的命令可以查看 git 命令缩写，\n\n```\ncat ~/.oh-my-zsh/plugins/git/git.plugin.zsh\n```\n\n### 命令高亮\n\n[zsh-syntax-highlighting](https://github.com/zsh-users/zsh-syntax-highlighting) 这款插件可以高亮常用命令，若错误还会红色显示。\n\n首先克隆项目\n\n```\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git\necho \"source ${(q-)PWD}/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\" >> ${ZDOTDIR:-$HOME}/.zshrc\n```\n\n之后在 `~/.zshrc` 中配置\n\n```\nplugins=(其他插件 zsh-syntax-highlighting)\n```\n\n![zsh-syntax](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/zsh_syntax.png)\n\n重启终端可以看到效果。\n\n### 自动补全历史命令\n\n[zsh-autosuggestions](https://github.com/zsh-users/zsh-autosuggestions) 这款插件可以自动补全显示历史命令，按右箭头（→）可以补全命令。\n\n首先克隆项目\n\n```\ngit clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n```\n\n之后在 `~/.zshrc` 中配置\n\n```\nplugins=(其他插件 zsh-autosuggestions)\n```\n\n重启终端可以看到效果。\n\n## 卸载 oh-my-zsh\n\n若想现在 zsh 可以使用以下命令：\n\n```\ncd .oh-my-zsh/tools\nchmod +x uninstall.sh\n./uninstall.sh\nrm -rif .zshrc\n```","tags":["app"]},{"title":"群晖搭建静态博客","url":"/hexo/","content":"\n![hexo_cover](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/hexo_cover.png)\n\n小弟想写一个博客，了解到主流有动态博客 [WordPress](https://wordpress.org)、[Ghost](Ghosthttps://ghost.org)，静态的有 [Hexo](https://hexo.io/)、[Jekyll](https://jekyllcn.com)、[Hugo](https://gohugo.io) 等等，小弟的博客只是展示富文本，功能比较简单，尝试使用 Hexo。\n\n[Hexo](https://hexo.io/) 是台湾大学生 [tommy351](https://zespia.tw/) 开发的静态网页博客系统，基于 Node.js，可以将 Markdown 生成静态网页。相较于动态博客，Hexo 可托管至 [Github Page](https://pages.github.com/)，免购买与配置服务器，不用担心忘记续费服务器。另外和其他静态博客相比，Hexo 插件比较丰富。\n\nHexo 需运行在有 Node.js 及 Git 的环境，换一个电脑写就得重新安装一遍，手机及平板上写更不可能。而群晖 Docker 可以搭建各类环境、支持外网访问，还具备天然的备份功能，感觉在群晖上安装可以实现全终端写博客，以下是小弟的尝试：\n\n## GitHub 创建 Github Pages\n\n首先建立 GitHub Pages，[GitHub Pages](https://pages.github.com) 是 GitHub 提供的一个網頁寄存服務，我们的博客就放在这个地方。登录 [Github](https://github.com/)（没有 Github 账号先注册一个），在任意页面右上角点击「＋」，选择「新建仓库」。\n\n![github_new](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/github_new.png)\n\n之后填入名称，包括「Github 用户名」及后缀「.github.io」，等待建好仓库。\n\n![github_repo](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/github_repo.png)\n\n浏览器访问地址 `https://username.github.io` 就可以看到新建的网页。此时已经建好了一个博客，这个博客基于 [Jekyll](https://www.jekyll.com.cn/) ，我们要搭建 Hexo 还要继续。\n\n注意：个人主页前缀要和 GitHub 用户名一致，只能有一个，若要建立多个，可建立项目主页，具体参见[官方文档](https://help.github.com/en/github/working-with-github-pages/about-github-pages)。\n\n## 安装 Hexo\n\n### Docker 安装 Hexo\n\n之后安装 Hexo，打开群晖 Docker（未安装可在「套件中心」搜索 「docker」下载安装，图标是小鲸鱼顶集装箱）， 在「注册表」标签中搜索「spurin」，找到映像 「spurin/hexo」并下载。这个 Docker 已经集成 [Hexo Admin Plugin](https://github.com/jaredly/hexo-admin)（一个 Hexo 文章后台管理插件）和连接 Github Pages 服务，可以方便我们快速搭建 Hexo 。\n\n![docker_hexo_reg](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/docker_hexo_reg.png)\n\n待下载完成后在「映像」标签中双击刚刚下载的映像「spurin/hexo」，点击「高级设置」按钮，\n\n![docker_hexo_image](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/docker_hexo_image.png)\n\n在「高级设置」中可以选择是否自动启动、是否建立桌面快捷方式（随个人偏好）。在「卷」标签页中的路径中添加文件夹，此文件夹为放置 Hexo 文件的文件夹，路径为 `/app` 。在「网络」标签页中可以选「与宿主使用相同网络」，也可以到「端口设置」中自定义端口号。端口号随个人偏好，Hexo 会使用 4000 端口号。\n\n![docker_hexo_dir](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/docker_hexo_dir.png)\n\n在「环境」中可以填入自己的 Github 用户名及邮箱，以便生成有效的 SSH Key。\n\n![docker_hexo_env](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/docker_hexo_env.png)\n\n点击「应用」按钮，之后点击「下一步」按钮，确认信息填写正确，建立容器，可以勾选「完成向导后运行容器」。\n\n![docker_hexo_image_done](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/docker_hexo_image_done.png)\n\n等待容器安装并启动，在「容器」标签页中确保容器启动并正常运行，可以右击容器，选择「细节」，在日志中查看安装详情，等待安装完成。在浏览器中打开 `http://群晖 IP:4000`，可以看到 Hexo 生成的网站。访问 `http://群晖 IP:4000/admin`，可以看到文章后台管理页面。\n\n![hexo_admin](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/hexo_admin.png)\n\n### 连接 Github Pages\n\n下一步是连接 Github Pages，打开放置 Hexo 文件的文件夹，找到` /.ssh` 路径下的 id_rsa.pub 文件，用文本编辑器打开，复制 SSH Key，\n\n![hexo_ssh_key](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/hexo_ssh_key.png)\n\n打开 Github 个人设置，找到「SSH and GPG keys」，新建一个密钥，将密钥粘贴。\n\n![github_key](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/github_key.png)\n\n在「容器」标签页中找到「spurin/hexo」，右击选择「详情」，\n\n![docker_hexo_container](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/docker_hexo_container.png)\n\n在「终端机」选项卡中输入 `ssh -T git@github.com`，若可以看到自己的 Github 用户名，证明连接成功。\n\n![key_test](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/key_test.png)\n\n### 配置 Hexo Admin 插件\nHexo Admin 这个插件已经年久失修，最近一次更新是几年前了，小弟使用时踩了不少坑，下面只示范正确的步骤：\n\n1. 安装 hexo-deployer-git 插件，在容器终端输入命令 `npm install hexo-deployer-git --save`\n2. 在自定义的 Hexo 路径下新建脚本文件 hexo-deploy.sh，内容如下：\n\n``` bash\nhexo g\nhexo d\n```\n3. 配置文件 _config.yml 下添加以下：\n\n``` yml\ndeploy:\n  type: git\n  repo: git@github.com:<username>/d<username>.github.io.git\n  branch: master\n\nadmin:\n  deployCommand: './hexo-deploy.sh'\n```\n\n点击「deploy」按钮可以生成页面并部署至 Github Pages，若未报错说明插件配置成功，打开 `https://username.github.io` 可以看到 Hexo 生成的页面。\n\n注意：注意 yml 文件格式规范，名称后面有空格。\n\n4. 设置密码\n\n插件支持设置密码，相应页面设置密码即可。\n\n5. 设置外网访问\n\n为了可以随时随地发布博客，需要配置群晖外网访问。群晖外网访问可以利用群晖自带 DDNS，设置路由器映射端口，注意要有公网 IP（可以联系运营商开通）。\n\n## 绑定域名\n\n### 购买域名\n\n如果 IP 地址对应现实生活中的经纬度，域名就相当于我们的地址门牌号，域名可以是有意义的字词，帮助我们快速访问要访问的地址。\n\n购买域名可以去 [domcomp](https://www.domcomp.com) 先比较下价格再购买。若不想花钱，也可以在 [Freenom](https://www.freenom.com) 申请免费域名。\n\n### 域名商设置\n\n有了域名之后需要将域名解析到虚拟主机（这里是 Github Page 的服务器）上，小弟的域名 drunkfish.me 是从 [Gandi.net](https://www.gandi.net) 买的，新增一条 `@` 的 ALIAS 记录即可。不同域名商域名解析设置不同，若遇到困难可以联系域名提供商客服。\n\n![domain_alias](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/domain_alias.png)\n\n### Github Pages 设定\nGithub Pages 设定很简单，在仓库设置中直接填入域名即可，另外建议勾选「强制 https」，这样访问域名就可以看到安心的绿色小锁。\n\n![page_domain](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/page_domain.png)\n\n设置完成之后可能要过几分钟才能可以使 DNS 生效，另外可以在系统终端机使用命令`dig your domain +nostats +nocomments +nocmd`验证是否绑定成功。\n\n遇到问题可以咨询域名服务商和查阅 Github Pages 域名相关[官方文档](https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site)。\n\n## 配置相关\n\nHexo 的设置可以在 `_config.yml` 这个文件下修改，下面贴一下主要的配置项：\n\n### 配置主题\n\n小弟用了 [casper](https://github.com/xzhih/hexo-theme-casper) 这个主题，安装配置可移步[作者](https://zhih.me/hexo-casper-usage/)博客。\n\n几个注意的点：\n\n1. 注册 [LeanCloud](https://leancloud.app) 可以用[国际版](https://console.leancloud.app/login.html#/signin)地址注册，免实名认证（需提供国内手机号）；\n\n2. 在 Google Analytics 设置中点击[新增账户]可以新增一个账户，找到追踪 ID 填入即可，另外 Google Analytics 有手机端 App 可以使用。\n\n   ![hexo_ga_app](https://cdn.jsdelivr.net/gh/drunkfish7/pic@master/uPic/hexo_ga_app.png)\n\n### 增加 RSS 支持\n\n增加 RSS 支持需要安装 [hexo-generator-feed](https://github.com/hexojs/hexo-generator-feed) 插件。\n\n首先在容器终端中输入命令 `npm install hexo-generator-feed`\n\n之后在 Hexo 配置文件 `_config.yml` 文件中增加以下配置即可：\n\n```yml\nfeed:\n  type: atom\n  path: atom.xml\n  limit: 20\n  hub:\n  content:\n  content_limit: 140\n  content_limit_delim: ' '\n  order_by: -date\n  icon: icon.png\n  autodiscovery: true\n  template:\n```\n\n### 文章命名自定义\n\nHexo 默认文章链接以文章日期命名，想修改文章链接可以参考[官方文档](https://hexo.io/docs/permalinks.html)。\n\n## 撰写文章\n\n### 页面属性\n\nmd 文件会存放在 `/source/posts` 这个路径下，生成的页面在路径 `/public`，每篇文章可以加入页面属性：\n\n```md\n---\ntitle:               # 文章标题\ndate:                # 文章日期\ntags:                # 文章标签\ncover_img:           # 在文章摘要上显示\nfeature_img:         # 在文章详细页面上置顶\n---\n```\n\n文章用 Markdown 书写，语法参考[这个](https://markdown.tw/)，另外可以参考这个顺口溜：\n\n> 井号代表是标题，一个六个随你意，\n> 星号表示要强调，一斜二粗三合体，\n> 加减都可设列表，后面空格别忘记，\n> 「>」表示要引用，回车一行算另起，\n> 还有中小俩括号，超级链接很容易。\n\n### 书写工具\n\n可以直接打开 `http://群晖 IP:4000` 在线用 Markdown 撰写文章，支持实时保存、预览，另外可以使用任意支持 Markdown 的书写工具书写，如 [Typora](http://typora.io)（支持实时预览、实用小功能）。\n\n小弟推荐使用图床管理图片（这样做 md 文件可以免配置本地图片路径，且备份时只需要备份一个 md 文件就可以了），图床推荐放在 Github 仓库，稳定、够用（具体参见[容量限制](https://help.github.com/cn/github/managing-large-files/what-is-my-disk-quota)可到100G），推荐使用图床工具上传，如 [uPic](https://blog.svend.cc/upic/)(支持拖拽上传、上传完成后自动复制文件链接等等)、[PicGo](https://github.com/Molunerfinn/PicGo) (多平台、支持[插件](https://github.com/PicGo/Awesome-PicGo))，建议勾选 [jsDelivr](https://www.jsdelivr.com/) 优化国内访问。\n\n发布文章有两种：\n1.本地写好 md 文件，上传至 `/source/posts` 路径下，之后在容器终端运行 `hexo g && hexo d`；\n2.通过访问 `http(s)://群晖 IP:4000` ，在线写，写完点击[deploy]按钮。\n\n书写小建议：\n1.文件命名建议英文命名，关键词之间用「-」隔开;\n2.从「##」二级标题开始标；\n3.Markdown 模块间用一空行隔开；\n4.写作前排版参考[中文文案排版指北](https://github.com/sparanoid/chinese-copywriting-guidelines)；\n5.若图片体积太大建议用图片压缩工具压缩。\n\n至此我们的博客就搭建好了，是不是很酷。\n","tags":["docker"]}]